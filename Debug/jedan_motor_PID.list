
jedan_motor_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002168  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080022f0  080022f0  000122f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002330  08002330  00012330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002334  08002334  00012334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          000000a0  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000a4  200000a4  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011068  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002343  00000000  00000000  0003109c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000057ce  00000000  00000000  000333df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000770  00000000  00000000  00038bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a70  00000000  00000000  00039320  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000046dc  00000000  00000000  00039d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002e90  00000000  00000000  0003e46c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000412fc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000016e0  00000000  00000000  00041378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022d8 	.word	0x080022d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080022d8 	.word	0x080022d8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_InitTick+0x24>)
{
 8000ac0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000ac2:	6818      	ldr	r0, [r3, #0]
 8000ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000acc:	f000 f880 	bl	8000bd0 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4621      	mov	r1, r4
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f000 f846 	bl	8000b68 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000adc:	2000      	movs	r0, #0
 8000ade:	bd10      	pop	{r4, pc}
 8000ae0:	20000000 	.word	0x20000000

08000ae4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_Init+0x20>)
{
 8000ae6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae8:	6813      	ldr	r3, [r2, #0]
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f827 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f7ff ffe0 	bl	8000abc <HAL_InitTick>
  HAL_MspInit();
 8000afc:	f001 fa46 	bl	8001f8c <HAL_MspInit>
}
 8000b00:	2000      	movs	r0, #0
 8000b02:	bd08      	pop	{r3, pc}
 8000b04:	40022000 	.word	0x40022000

08000b08 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000b08:	4a02      	ldr	r2, [pc, #8]	; (8000b14 <HAL_IncTick+0xc>)
 8000b0a:	6813      	ldr	r3, [r2, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000020 	.word	0x20000020

08000b18 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000b18:	4b01      	ldr	r3, [pc, #4]	; (8000b20 <HAL_GetTick+0x8>)
 8000b1a:	6818      	ldr	r0, [r3, #0]
}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000020 	.word	0x20000020

08000b24 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b26:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff fff6 	bl	8000b18 <HAL_GetTick>
  uint32_t wait = Delay;
 8000b2c:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2e:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000b30:	4605      	mov	r5, r0
  {
     wait++;
 8000b32:	bf18      	it	ne
 8000b34:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b36:	f7ff ffef 	bl	8000b18 <HAL_GetTick>
 8000b3a:	1b40      	subs	r0, r0, r5
 8000b3c:	42a0      	cmp	r0, r4
 8000b3e:	d3fa      	bcc.n	8000b36 <HAL_Delay+0x12>
  {
  }
}
 8000b40:	b003      	add	sp, #12
 8000b42:	bd30      	pop	{r4, r5, pc}

08000b44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b46:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b4c:	041b      	lsls	r3, r3, #16
 8000b4e:	0c1b      	lsrs	r3, r3, #16
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b54:	0200      	lsls	r0, r0, #8
 8000b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b5e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b60:	60d3      	str	r3, [r2, #12]
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6a:	b530      	push	{r4, r5, lr}
 8000b6c:	68dc      	ldr	r4, [r3, #12]
 8000b6e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b72:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	bf28      	it	cs
 8000b7c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 0501 	mov.w	r5, #1
 8000b84:	fa05 f303 	lsl.w	r3, r5, r3
 8000b88:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8c:	bf8c      	ite	hi
 8000b8e:	3c03      	subhi	r4, #3
 8000b90:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b92:	4019      	ands	r1, r3
 8000b94:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b96:	fa05 f404 	lsl.w	r4, r5, r4
 8000b9a:	3c01      	subs	r4, #1
 8000b9c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b9e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	ea42 0201 	orr.w	r2, r2, r1
 8000ba4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	bfaf      	iteee	ge
 8000baa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	f000 000f 	andlt.w	r0, r0, #15
 8000bb2:	4b06      	ldrlt	r3, [pc, #24]	; (8000bcc <HAL_NVIC_SetPriority+0x64>)
 8000bb4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	bfa5      	ittet	ge
 8000bb8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000bbc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000bc4:	bd30      	pop	{r4, r5, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00
 8000bcc:	e000ed14 	.word	0xe000ed14

08000bd0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd0:	3801      	subs	r0, #1
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd6:	d20a      	bcs.n	8000bee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bdc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	21f0      	movs	r1, #240	; 0xf0
 8000be0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e010 	.word	0xe000e010
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bfe:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c00:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c02:	bf0c      	ite	eq
 8000c04:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000c08:	f022 0204 	bicne.w	r2, r2, #4
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	4770      	bx	lr
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c14:	4770      	bx	lr

08000c16 <HAL_SYSTICK_IRQHandler>:
{
 8000c16:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000c18:	f7ff fffc 	bl	8000c14 <HAL_SYSTICK_Callback>
 8000c1c:	bd08      	pop	{r3, pc}
	...

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c24:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c26:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c28:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000d90 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c2c:	4a56      	ldr	r2, [pc, #344]	; (8000d88 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c2e:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c30:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000c34:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c36:	9c01      	ldr	r4, [sp, #4]
 8000c38:	40dc      	lsrs	r4, r3
 8000c3a:	d102      	bne.n	8000c42 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000c3c:	b005      	add	sp, #20
 8000c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c42:	2401      	movs	r4, #1
 8000c44:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000c48:	9c01      	ldr	r4, [sp, #4]
 8000c4a:	ea14 050a 	ands.w	r5, r4, sl
 8000c4e:	f000 8093 	beq.w	8000d78 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c52:	684c      	ldr	r4, [r1, #4]
 8000c54:	f024 0b10 	bic.w	fp, r4, #16
 8000c58:	f1bb 0f02 	cmp.w	fp, #2
 8000c5c:	d111      	bne.n	8000c82 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000c5e:	08df      	lsrs	r7, r3, #3
 8000c60:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c64:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000c68:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c6a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c6e:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000c72:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c76:	690e      	ldr	r6, [r1, #16]
 8000c78:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c7c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000c80:	623e      	str	r6, [r7, #32]
 8000c82:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c86:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000c88:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c8a:	fa07 f70c 	lsl.w	r7, r7, ip
 8000c8e:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c90:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c94:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c96:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c9a:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c9e:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca2:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000ca6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ca8:	d811      	bhi.n	8000cce <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000caa:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cac:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb0:	68ce      	ldr	r6, [r1, #12]
 8000cb2:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000cb6:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000cba:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cbc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cbe:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cc2:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000cc6:	409e      	lsls	r6, r3
 8000cc8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000ccc:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000cce:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cd0:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd2:	688e      	ldr	r6, [r1, #8]
 8000cd4:	fa06 f60c 	lsl.w	r6, r6, ip
 8000cd8:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cda:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000cdc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cde:	d54b      	bpl.n	8000d78 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce0:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000ce4:	f046 0601 	orr.w	r6, r6, #1
 8000ce8:	f8c8 6018 	str.w	r6, [r8, #24]
 8000cec:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000cf0:	f023 0703 	bic.w	r7, r3, #3
 8000cf4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000cf8:	f006 0601 	and.w	r6, r6, #1
 8000cfc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000d00:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d02:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d08:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d0a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000d0e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d12:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d16:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d1a:	d02f      	beq.n	8000d7c <HAL_GPIO_Init+0x15c>
 8000d1c:	4e1b      	ldr	r6, [pc, #108]	; (8000d8c <HAL_GPIO_Init+0x16c>)
 8000d1e:	42b0      	cmp	r0, r6
 8000d20:	d02e      	beq.n	8000d80 <HAL_GPIO_Init+0x160>
 8000d22:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d26:	42b0      	cmp	r0, r6
 8000d28:	d02c      	beq.n	8000d84 <HAL_GPIO_Init+0x164>
 8000d2a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d2e:	42b0      	cmp	r0, r6
 8000d30:	bf14      	ite	ne
 8000d32:	2605      	movne	r6, #5
 8000d34:	2603      	moveq	r6, #3
 8000d36:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d3a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d3e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000d40:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d42:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d44:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000d48:	bf0c      	ite	eq
 8000d4a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000d4c:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000d4e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000d50:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d52:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000d56:	bf0c      	ite	eq
 8000d58:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000d5a:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000d5c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000d5e:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d60:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000d64:	bf0c      	ite	eq
 8000d66:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000d68:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000d6a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000d6c:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d6e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000d70:	bf54      	ite	pl
 8000d72:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000d74:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000d76:	60d6      	str	r6, [r2, #12]
    position++;
 8000d78:	3301      	adds	r3, #1
 8000d7a:	e75c      	b.n	8000c36 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e7da      	b.n	8000d36 <HAL_GPIO_Init+0x116>
 8000d80:	2601      	movs	r6, #1
 8000d82:	e7d8      	b.n	8000d36 <HAL_GPIO_Init+0x116>
 8000d84:	2602      	movs	r6, #2
 8000d86:	e7d6      	b.n	8000d36 <HAL_GPIO_Init+0x116>
 8000d88:	40010400 	.word	0x40010400
 8000d8c:	48000400 	.word	0x48000400
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d94:	b10a      	cbz	r2, 8000d9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d96:	6181      	str	r1, [r0, #24]
 8000d98:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d9a:	6281      	str	r1, [r0, #40]	; 0x28
 8000d9c:	4770      	bx	lr
	...

08000da0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da0:	6803      	ldr	r3, [r0, #0]
 8000da2:	07da      	lsls	r2, r3, #31
{
 8000da4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000daa:	d411      	bmi.n	8000dd0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dac:	682b      	ldr	r3, [r5, #0]
 8000dae:	079b      	lsls	r3, r3, #30
 8000db0:	f100 8088 	bmi.w	8000ec4 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000db4:	682b      	ldr	r3, [r5, #0]
 8000db6:	071c      	lsls	r4, r3, #28
 8000db8:	f100 80f8 	bmi.w	8000fac <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dbc:	682b      	ldr	r3, [r5, #0]
 8000dbe:	0758      	lsls	r0, r3, #29
 8000dc0:	f100 8141 	bmi.w	8001046 <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dc4:	69ea      	ldr	r2, [r5, #28]
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 81d7 	bne.w	800117a <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000dcc:	2000      	movs	r0, #0
 8000dce:	e021      	b.n	8000e14 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dd0:	4cba      	ldr	r4, [pc, #744]	; (80010bc <HAL_RCC_OscConfig+0x31c>)
 8000dd2:	6863      	ldr	r3, [r4, #4]
 8000dd4:	f003 030c 	and.w	r3, r3, #12
 8000dd8:	2b04      	cmp	r3, #4
 8000dda:	d007      	beq.n	8000dec <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ddc:	6863      	ldr	r3, [r4, #4]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d119      	bne.n	8000e1a <HAL_RCC_OscConfig+0x7a>
 8000de6:	6863      	ldr	r3, [r4, #4]
 8000de8:	03df      	lsls	r7, r3, #15
 8000dea:	d516      	bpl.n	8000e1a <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df4:	6821      	ldr	r1, [r4, #0]
 8000df6:	fa93 f3a3 	rbit	r3, r3
 8000dfa:	fab3 f383 	clz	r3, r3
 8000dfe:	f003 031f 	and.w	r3, r3, #31
 8000e02:	2201      	movs	r2, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	420b      	tst	r3, r1
 8000e0a:	d0cf      	beq.n	8000dac <HAL_RCC_OscConfig+0xc>
 8000e0c:	686b      	ldr	r3, [r5, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1cc      	bne.n	8000dac <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000e12:	2001      	movs	r0, #1
}
 8000e14:	b002      	add	sp, #8
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1a:	686a      	ldr	r2, [r5, #4]
 8000e1c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000e20:	d125      	bne.n	8000e6e <HAL_RCC_OscConfig+0xce>
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e28:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e2c:	68a9      	ldr	r1, [r5, #8]
 8000e2e:	f023 030f 	bic.w	r3, r3, #15
 8000e32:	430b      	orrs	r3, r1
 8000e34:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e36:	b352      	cbz	r2, 8000e8e <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8000e38:	f7ff fe6e 	bl	8000b18 <HAL_GetTick>
 8000e3c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000e40:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e42:	2701      	movs	r7, #1
 8000e44:	fa96 f3a6 	rbit	r3, r6
 8000e48:	6822      	ldr	r2, [r4, #0]
 8000e4a:	fa96 f3a6 	rbit	r3, r6
 8000e4e:	fab3 f383 	clz	r3, r3
 8000e52:	f003 031f 	and.w	r3, r3, #31
 8000e56:	fa07 f303 	lsl.w	r3, r7, r3
 8000e5a:	4213      	tst	r3, r2
 8000e5c:	d1a6      	bne.n	8000dac <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e5e:	f7ff fe5b 	bl	8000b18 <HAL_GetTick>
 8000e62:	eba0 0008 	sub.w	r0, r0, r8
 8000e66:	2864      	cmp	r0, #100	; 0x64
 8000e68:	d9ec      	bls.n	8000e44 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	e7d2      	b.n	8000e14 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6e:	6823      	ldr	r3, [r4, #0]
 8000e70:	b932      	cbnz	r2, 8000e80 <HAL_RCC_OscConfig+0xe0>
 8000e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e76:	6023      	str	r3, [r4, #0]
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7e:	e7d3      	b.n	8000e28 <HAL_RCC_OscConfig+0x88>
 8000e80:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000e84:	d1f5      	bne.n	8000e72 <HAL_RCC_OscConfig+0xd2>
 8000e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8a:	6023      	str	r3, [r4, #0]
 8000e8c:	e7c9      	b.n	8000e22 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fe43 	bl	8000b18 <HAL_GetTick>
 8000e92:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000e96:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e98:	2701      	movs	r7, #1
 8000e9a:	fa96 f3a6 	rbit	r3, r6
 8000e9e:	6822      	ldr	r2, [r4, #0]
 8000ea0:	fa96 f3a6 	rbit	r3, r6
 8000ea4:	fab3 f383 	clz	r3, r3
 8000ea8:	f003 031f 	and.w	r3, r3, #31
 8000eac:	fa07 f303 	lsl.w	r3, r7, r3
 8000eb0:	4213      	tst	r3, r2
 8000eb2:	f43f af7b 	beq.w	8000dac <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb6:	f7ff fe2f 	bl	8000b18 <HAL_GetTick>
 8000eba:	eba0 0008 	sub.w	r0, r0, r8
 8000ebe:	2864      	cmp	r0, #100	; 0x64
 8000ec0:	d9eb      	bls.n	8000e9a <HAL_RCC_OscConfig+0xfa>
 8000ec2:	e7d2      	b.n	8000e6a <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ec4:	4c7d      	ldr	r4, [pc, #500]	; (80010bc <HAL_RCC_OscConfig+0x31c>)
 8000ec6:	6863      	ldr	r3, [r4, #4]
 8000ec8:	f013 0f0c 	tst.w	r3, #12
 8000ecc:	d007      	beq.n	8000ede <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ece:	6863      	ldr	r3, [r4, #4]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d121      	bne.n	8000f1c <HAL_RCC_OscConfig+0x17c>
 8000ed8:	6863      	ldr	r3, [r4, #4]
 8000eda:	03de      	lsls	r6, r3, #15
 8000edc:	d41e      	bmi.n	8000f1c <HAL_RCC_OscConfig+0x17c>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee4:	6821      	ldr	r1, [r4, #0]
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	fab3 f383 	clz	r3, r3
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	420b      	tst	r3, r1
 8000efa:	d002      	beq.n	8000f02 <HAL_RCC_OscConfig+0x162>
 8000efc:	692b      	ldr	r3, [r5, #16]
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d187      	bne.n	8000e12 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f02:	6821      	ldr	r1, [r4, #0]
 8000f04:	23f8      	movs	r3, #248	; 0xf8
 8000f06:	fa93 f3a3 	rbit	r3, r3
 8000f0a:	fab3 f283 	clz	r2, r3
 8000f0e:	696b      	ldr	r3, [r5, #20]
 8000f10:	4093      	lsls	r3, r2
 8000f12:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000f16:	4313      	orrs	r3, r2
 8000f18:	6023      	str	r3, [r4, #0]
 8000f1a:	e74b      	b.n	8000db4 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f1c:	692a      	ldr	r2, [r5, #16]
 8000f1e:	2601      	movs	r6, #1
 8000f20:	b30a      	cbz	r2, 8000f66 <HAL_RCC_OscConfig+0x1c6>
 8000f22:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000f26:	fab3 f383 	clz	r3, r3
 8000f2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	2702      	movs	r7, #2
 8000f36:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000f38:	f7ff fdee 	bl	8000b18 <HAL_GetTick>
 8000f3c:	4680      	mov	r8, r0
 8000f3e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f42:	6822      	ldr	r2, [r4, #0]
 8000f44:	fa97 f3a7 	rbit	r3, r7
 8000f48:	fab3 f383 	clz	r3, r3
 8000f4c:	f003 031f 	and.w	r3, r3, #31
 8000f50:	fa06 f303 	lsl.w	r3, r6, r3
 8000f54:	4213      	tst	r3, r2
 8000f56:	d1d4      	bne.n	8000f02 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f58:	f7ff fdde 	bl	8000b18 <HAL_GetTick>
 8000f5c:	eba0 0008 	sub.w	r0, r0, r8
 8000f60:	2802      	cmp	r0, #2
 8000f62:	d9ec      	bls.n	8000f3e <HAL_RCC_OscConfig+0x19e>
 8000f64:	e781      	b.n	8000e6a <HAL_RCC_OscConfig+0xca>
 8000f66:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000f6a:	fab3 f383 	clz	r3, r3
 8000f6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	2702      	movs	r7, #2
 8000f7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fdcc 	bl	8000b18 <HAL_GetTick>
 8000f80:	4680      	mov	r8, r0
 8000f82:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f86:	6822      	ldr	r2, [r4, #0]
 8000f88:	fa97 f3a7 	rbit	r3, r7
 8000f8c:	fab3 f383 	clz	r3, r3
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	fa06 f303 	lsl.w	r3, r6, r3
 8000f98:	4213      	tst	r3, r2
 8000f9a:	f43f af0b 	beq.w	8000db4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f9e:	f7ff fdbb 	bl	8000b18 <HAL_GetTick>
 8000fa2:	eba0 0008 	sub.w	r0, r0, r8
 8000fa6:	2802      	cmp	r0, #2
 8000fa8:	d9eb      	bls.n	8000f82 <HAL_RCC_OscConfig+0x1e2>
 8000faa:	e75e      	b.n	8000e6a <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fac:	69aa      	ldr	r2, [r5, #24]
 8000fae:	4e43      	ldr	r6, [pc, #268]	; (80010bc <HAL_RCC_OscConfig+0x31c>)
 8000fb0:	4943      	ldr	r1, [pc, #268]	; (80010c0 <HAL_RCC_OscConfig+0x320>)
 8000fb2:	2401      	movs	r4, #1
 8000fb4:	b31a      	cbz	r2, 8000ffe <HAL_RCC_OscConfig+0x25e>
 8000fb6:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000fba:	fab3 f383 	clz	r3, r3
 8000fbe:	440b      	add	r3, r1
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	2702      	movs	r7, #2
 8000fc4:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fda7 	bl	8000b18 <HAL_GetTick>
 8000fca:	4680      	mov	r8, r0
 8000fcc:	fa97 f3a7 	rbit	r3, r7
 8000fd0:	fa97 f3a7 	rbit	r3, r7
 8000fd4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000fda:	fa97 f3a7 	rbit	r3, r7
 8000fde:	fab3 f383 	clz	r3, r3
 8000fe2:	f003 031f 	and.w	r3, r3, #31
 8000fe6:	fa04 f303 	lsl.w	r3, r4, r3
 8000fea:	4213      	tst	r3, r2
 8000fec:	f47f aee6 	bne.w	8000dbc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fd92 	bl	8000b18 <HAL_GetTick>
 8000ff4:	eba0 0008 	sub.w	r0, r0, r8
 8000ff8:	2802      	cmp	r0, #2
 8000ffa:	d9e7      	bls.n	8000fcc <HAL_RCC_OscConfig+0x22c>
 8000ffc:	e735      	b.n	8000e6a <HAL_RCC_OscConfig+0xca>
 8000ffe:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001002:	fab3 f383 	clz	r3, r3
 8001006:	440b      	add	r3, r1
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	2702      	movs	r7, #2
 800100c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800100e:	f7ff fd83 	bl	8000b18 <HAL_GetTick>
 8001012:	4680      	mov	r8, r0
 8001014:	fa97 f3a7 	rbit	r3, r7
 8001018:	fa97 f3a7 	rbit	r3, r7
 800101c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001020:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001022:	fa97 f3a7 	rbit	r3, r7
 8001026:	fab3 f383 	clz	r3, r3
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	fa04 f303 	lsl.w	r3, r4, r3
 8001032:	4213      	tst	r3, r2
 8001034:	f43f aec2 	beq.w	8000dbc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001038:	f7ff fd6e 	bl	8000b18 <HAL_GetTick>
 800103c:	eba0 0008 	sub.w	r0, r0, r8
 8001040:	2802      	cmp	r0, #2
 8001042:	d9e7      	bls.n	8001014 <HAL_RCC_OscConfig+0x274>
 8001044:	e711      	b.n	8000e6a <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001046:	4c1d      	ldr	r4, [pc, #116]	; (80010bc <HAL_RCC_OscConfig+0x31c>)
 8001048:	69e3      	ldr	r3, [r4, #28]
 800104a:	00d9      	lsls	r1, r3, #3
 800104c:	d434      	bmi.n	80010b8 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	69e3      	ldr	r3, [r4, #28]
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	61e3      	str	r3, [r4, #28]
 8001056:	69e3      	ldr	r3, [r4, #28]
 8001058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001060:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001062:	4f18      	ldr	r7, [pc, #96]	; (80010c4 <HAL_RCC_OscConfig+0x324>)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	05da      	lsls	r2, r3, #23
 8001068:	d52e      	bpl.n	80010c8 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800106a:	68eb      	ldr	r3, [r5, #12]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d13c      	bne.n	80010ea <HAL_RCC_OscConfig+0x34a>
 8001070:	6a23      	ldr	r3, [r4, #32]
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001078:	f7ff fd4e 	bl	8000b18 <HAL_GetTick>
 800107c:	2702      	movs	r7, #2
 800107e:	4682      	mov	sl, r0
 8001080:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001082:	f04f 0801 	mov.w	r8, #1
 8001086:	fa97 f3a7 	rbit	r3, r7
 800108a:	fa97 f3a7 	rbit	r3, r7
 800108e:	2b00      	cmp	r3, #0
 8001090:	d06b      	beq.n	800116a <HAL_RCC_OscConfig+0x3ca>
 8001092:	6a22      	ldr	r2, [r4, #32]
 8001094:	fa99 f3a9 	rbit	r3, r9
 8001098:	fab3 f383 	clz	r3, r3
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	fa08 f303 	lsl.w	r3, r8, r3
 80010a4:	4213      	tst	r3, r2
 80010a6:	d057      	beq.n	8001158 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 80010a8:	2e00      	cmp	r6, #0
 80010aa:	f43f ae8b 	beq.w	8000dc4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ae:	69e3      	ldr	r3, [r4, #28]
 80010b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010b4:	61e3      	str	r3, [r4, #28]
 80010b6:	e685      	b.n	8000dc4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80010b8:	2600      	movs	r6, #0
 80010ba:	e7d2      	b.n	8001062 <HAL_RCC_OscConfig+0x2c2>
 80010bc:	40021000 	.word	0x40021000
 80010c0:	10908120 	.word	0x10908120
 80010c4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80010d0:	f7ff fd22 	bl	8000b18 <HAL_GetTick>
 80010d4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	05db      	lsls	r3, r3, #23
 80010da:	d4c6      	bmi.n	800106a <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010dc:	f7ff fd1c 	bl	8000b18 <HAL_GetTick>
 80010e0:	eba0 0008 	sub.w	r0, r0, r8
 80010e4:	2864      	cmp	r0, #100	; 0x64
 80010e6:	d9f6      	bls.n	80010d6 <HAL_RCC_OscConfig+0x336>
 80010e8:	e6bf      	b.n	8000e6a <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ea:	bb3b      	cbnz	r3, 800113c <HAL_RCC_OscConfig+0x39c>
 80010ec:	6a23      	ldr	r3, [r4, #32]
 80010ee:	f023 0301 	bic.w	r3, r3, #1
 80010f2:	6223      	str	r3, [r4, #32]
 80010f4:	6a23      	ldr	r3, [r4, #32]
 80010f6:	f023 0304 	bic.w	r3, r3, #4
 80010fa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010fc:	f7ff fd0c 	bl	8000b18 <HAL_GetTick>
 8001100:	2702      	movs	r7, #2
 8001102:	4682      	mov	sl, r0
 8001104:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001106:	f04f 0801 	mov.w	r8, #1
 800110a:	fa97 f3a7 	rbit	r3, r7
 800110e:	fa97 f3a7 	rbit	r3, r7
 8001112:	b373      	cbz	r3, 8001172 <HAL_RCC_OscConfig+0x3d2>
 8001114:	6a22      	ldr	r2, [r4, #32]
 8001116:	fa99 f3a9 	rbit	r3, r9
 800111a:	fab3 f383 	clz	r3, r3
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	fa08 f303 	lsl.w	r3, r8, r3
 8001126:	4213      	tst	r3, r2
 8001128:	d0be      	beq.n	80010a8 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800112a:	f7ff fcf5 	bl	8000b18 <HAL_GetTick>
 800112e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001132:	eba0 000a 	sub.w	r0, r0, sl
 8001136:	4298      	cmp	r0, r3
 8001138:	d9e7      	bls.n	800110a <HAL_RCC_OscConfig+0x36a>
 800113a:	e696      	b.n	8000e6a <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113c:	2b05      	cmp	r3, #5
 800113e:	6a23      	ldr	r3, [r4, #32]
 8001140:	d103      	bne.n	800114a <HAL_RCC_OscConfig+0x3aa>
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6223      	str	r3, [r4, #32]
 8001148:	e792      	b.n	8001070 <HAL_RCC_OscConfig+0x2d0>
 800114a:	f023 0301 	bic.w	r3, r3, #1
 800114e:	6223      	str	r3, [r4, #32]
 8001150:	6a23      	ldr	r3, [r4, #32]
 8001152:	f023 0304 	bic.w	r3, r3, #4
 8001156:	e78e      	b.n	8001076 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001158:	f7ff fcde 	bl	8000b18 <HAL_GetTick>
 800115c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001160:	eba0 000a 	sub.w	r0, r0, sl
 8001164:	4298      	cmp	r0, r3
 8001166:	d98e      	bls.n	8001086 <HAL_RCC_OscConfig+0x2e6>
 8001168:	e67f      	b.n	8000e6a <HAL_RCC_OscConfig+0xca>
 800116a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800116e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001170:	e790      	b.n	8001094 <HAL_RCC_OscConfig+0x2f4>
 8001172:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001176:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001178:	e7cd      	b.n	8001116 <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800117a:	4c41      	ldr	r4, [pc, #260]	; (8001280 <HAL_RCC_OscConfig+0x4e0>)
 800117c:	6863      	ldr	r3, [r4, #4]
 800117e:	f003 030c 	and.w	r3, r3, #12
 8001182:	2b08      	cmp	r3, #8
 8001184:	f43f ae45 	beq.w	8000e12 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001188:	2a02      	cmp	r2, #2
 800118a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800118e:	d152      	bne.n	8001236 <HAL_RCC_OscConfig+0x496>
 8001190:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001194:	fab3 f383 	clz	r3, r3
 8001198:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800119c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011a6:	f7ff fcb7 	bl	8000b18 <HAL_GetTick>
 80011aa:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80011ae:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b0:	2601      	movs	r6, #1
 80011b2:	fa97 f3a7 	rbit	r3, r7
 80011b6:	6822      	ldr	r2, [r4, #0]
 80011b8:	fa97 f3a7 	rbit	r3, r7
 80011bc:	fab3 f383 	clz	r3, r3
 80011c0:	f003 031f 	and.w	r3, r3, #31
 80011c4:	fa06 f303 	lsl.w	r3, r6, r3
 80011c8:	4213      	tst	r3, r2
 80011ca:	d12d      	bne.n	8001228 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011cc:	6862      	ldr	r2, [r4, #4]
 80011ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80011d0:	6a29      	ldr	r1, [r5, #32]
 80011d2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80011d6:	430b      	orrs	r3, r1
 80011d8:	4313      	orrs	r3, r2
 80011da:	6063      	str	r3, [r4, #4]
 80011dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011e0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80011e4:	fab3 f383 	clz	r3, r3
 80011e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80011f6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc8e 	bl	8000b18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011fc:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80011fe:	4607      	mov	r7, r0
 8001200:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001204:	6822      	ldr	r2, [r4, #0]
 8001206:	fa95 f3a5 	rbit	r3, r5
 800120a:	fab3 f383 	clz	r3, r3
 800120e:	f003 031f 	and.w	r3, r3, #31
 8001212:	fa06 f303 	lsl.w	r3, r6, r3
 8001216:	4213      	tst	r3, r2
 8001218:	f47f add8 	bne.w	8000dcc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800121c:	f7ff fc7c 	bl	8000b18 <HAL_GetTick>
 8001220:	1bc0      	subs	r0, r0, r7
 8001222:	2802      	cmp	r0, #2
 8001224:	d9ec      	bls.n	8001200 <HAL_RCC_OscConfig+0x460>
 8001226:	e620      	b.n	8000e6a <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001228:	f7ff fc76 	bl	8000b18 <HAL_GetTick>
 800122c:	eba0 0008 	sub.w	r0, r0, r8
 8001230:	2802      	cmp	r0, #2
 8001232:	d9be      	bls.n	80011b2 <HAL_RCC_OscConfig+0x412>
 8001234:	e619      	b.n	8000e6a <HAL_RCC_OscConfig+0xca>
 8001236:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800123a:	fab3 f383 	clz	r3, r3
 800123e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001242:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800124c:	f7ff fc64 	bl	8000b18 <HAL_GetTick>
 8001250:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001254:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001256:	2601      	movs	r6, #1
 8001258:	fa95 f3a5 	rbit	r3, r5
 800125c:	6822      	ldr	r2, [r4, #0]
 800125e:	fa95 f3a5 	rbit	r3, r5
 8001262:	fab3 f383 	clz	r3, r3
 8001266:	f003 031f 	and.w	r3, r3, #31
 800126a:	fa06 f303 	lsl.w	r3, r6, r3
 800126e:	4213      	tst	r3, r2
 8001270:	f43f adac 	beq.w	8000dcc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff fc50 	bl	8000b18 <HAL_GetTick>
 8001278:	1bc0      	subs	r0, r0, r7
 800127a:	2802      	cmp	r0, #2
 800127c:	d9ec      	bls.n	8001258 <HAL_RCC_OscConfig+0x4b8>
 800127e:	e5f4      	b.n	8000e6a <HAL_RCC_OscConfig+0xca>
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001284:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001286:	4c13      	ldr	r4, [pc, #76]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x50>)
 8001288:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800128a:	f001 030c 	and.w	r3, r1, #12
 800128e:	2b08      	cmp	r3, #8
 8001290:	d11e      	bne.n	80012d0 <HAL_RCC_GetSysClockFreq+0x4c>
 8001292:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001296:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800129a:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800129e:	fab3 f383 	clz	r3, r3
 80012a2:	fa22 f303 	lsr.w	r3, r2, r3
 80012a6:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x54>)
 80012a8:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80012aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa92 f2a2 	rbit	r2, r2
 80012b2:	fab2 f282 	clz	r2, r2
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	40d3      	lsrs	r3, r2
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_RCC_GetSysClockFreq+0x58>)
 80012be:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80012c0:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80012c2:	bf4a      	itet	mi
 80012c4:	4b06      	ldrmi	r3, [pc, #24]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80012c6:	4b07      	ldrpl	r3, [pc, #28]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80012c8:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80012cc:	4358      	muls	r0, r3
 80012ce:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012d2:	bd10      	pop	{r4, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	080022f0 	.word	0x080022f0
 80012dc:	08002300 	.word	0x08002300
 80012e0:	007a1200 	.word	0x007a1200
 80012e4:	003d0900 	.word	0x003d0900

080012e8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012e8:	4a5c      	ldr	r2, [pc, #368]	; (800145c <HAL_RCC_ClockConfig+0x174>)
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	428b      	cmp	r3, r1
{
 80012f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f6:	4606      	mov	r6, r0
 80012f8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012fa:	d330      	bcc.n	800135e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012fc:	6832      	ldr	r2, [r6, #0]
 80012fe:	0791      	lsls	r1, r2, #30
 8001300:	d43a      	bmi.n	8001378 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001302:	07d2      	lsls	r2, r2, #31
 8001304:	d440      	bmi.n	8001388 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001306:	4a55      	ldr	r2, [pc, #340]	; (800145c <HAL_RCC_ClockConfig+0x174>)
 8001308:	6813      	ldr	r3, [r2, #0]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	429d      	cmp	r5, r3
 8001310:	f0c0 8092 	bcc.w	8001438 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001314:	6832      	ldr	r2, [r6, #0]
 8001316:	4c52      	ldr	r4, [pc, #328]	; (8001460 <HAL_RCC_ClockConfig+0x178>)
 8001318:	f012 0f04 	tst.w	r2, #4
 800131c:	f040 8097 	bne.w	800144e <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001320:	0713      	lsls	r3, r2, #28
 8001322:	d506      	bpl.n	8001332 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001324:	6863      	ldr	r3, [r4, #4]
 8001326:	6932      	ldr	r2, [r6, #16]
 8001328:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800132c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001330:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001332:	f7ff ffa7 	bl	8001284 <HAL_RCC_GetSysClockFreq>
 8001336:	6863      	ldr	r3, [r4, #4]
 8001338:	22f0      	movs	r2, #240	; 0xf0
 800133a:	fa92 f2a2 	rbit	r2, r2
 800133e:	fab2 f282 	clz	r2, r2
 8001342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001346:	40d3      	lsrs	r3, r2
 8001348:	4a46      	ldr	r2, [pc, #280]	; (8001464 <HAL_RCC_ClockConfig+0x17c>)
 800134a:	5cd3      	ldrb	r3, [r2, r3]
 800134c:	40d8      	lsrs	r0, r3
 800134e:	4b46      	ldr	r3, [pc, #280]	; (8001468 <HAL_RCC_ClockConfig+0x180>)
 8001350:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff fbb2 	bl	8000abc <HAL_InitTick>
  return HAL_OK;
 8001358:	2000      	movs	r0, #0
}
 800135a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135e:	6813      	ldr	r3, [r2, #0]
 8001360:	f023 0307 	bic.w	r3, r3, #7
 8001364:	430b      	orrs	r3, r1
 8001366:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	4299      	cmp	r1, r3
 8001370:	d0c4      	beq.n	80012fc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001372:	2001      	movs	r0, #1
 8001374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001378:	4939      	ldr	r1, [pc, #228]	; (8001460 <HAL_RCC_ClockConfig+0x178>)
 800137a:	68b0      	ldr	r0, [r6, #8]
 800137c:	684b      	ldr	r3, [r1, #4]
 800137e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001382:	4303      	orrs	r3, r0
 8001384:	604b      	str	r3, [r1, #4]
 8001386:	e7bc      	b.n	8001302 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001388:	6872      	ldr	r2, [r6, #4]
 800138a:	4c35      	ldr	r4, [pc, #212]	; (8001460 <HAL_RCC_ClockConfig+0x178>)
 800138c:	2a01      	cmp	r2, #1
 800138e:	d128      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xfa>
 8001390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001394:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001398:	6821      	ldr	r1, [r4, #0]
 800139a:	fa93 f3a3 	rbit	r3, r3
 800139e:	fab3 f383 	clz	r3, r3
 80013a2:	f003 031f 	and.w	r3, r3, #31
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	d0e1      	beq.n	8001372 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ae:	6863      	ldr	r3, [r4, #4]
 80013b0:	f023 0303 	bic.w	r3, r3, #3
 80013b4:	431a      	orrs	r2, r3
 80013b6:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 80013b8:	f7ff fbae 	bl	8000b18 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013bc:	6873      	ldr	r3, [r6, #4]
 80013be:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80013c0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c2:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c6:	d11f      	bne.n	8001408 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013c8:	6863      	ldr	r3, [r4, #4]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d099      	beq.n	8001306 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d2:	f7ff fba1 	bl	8000b18 <HAL_GetTick>
 80013d6:	1bc0      	subs	r0, r0, r7
 80013d8:	4540      	cmp	r0, r8
 80013da:	d9f5      	bls.n	80013c8 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 80013dc:	2003      	movs	r0, #3
 80013de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e2:	2a02      	cmp	r2, #2
 80013e4:	bf0c      	ite	eq
 80013e6:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80013ea:	2302      	movne	r3, #2
 80013ec:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	6820      	ldr	r0, [r4, #0]
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	fab3 f383 	clz	r3, r3
 80013fa:	f003 031f 	and.w	r3, r3, #31
 80013fe:	2101      	movs	r1, #1
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	4203      	tst	r3, r0
 8001406:	e7d1      	b.n	80013ac <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001408:	2b02      	cmp	r3, #2
 800140a:	d110      	bne.n	800142e <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800140c:	6863      	ldr	r3, [r4, #4]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b08      	cmp	r3, #8
 8001414:	f43f af77 	beq.w	8001306 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001418:	f7ff fb7e 	bl	8000b18 <HAL_GetTick>
 800141c:	1bc0      	subs	r0, r0, r7
 800141e:	4540      	cmp	r0, r8
 8001420:	d9f4      	bls.n	800140c <HAL_RCC_ClockConfig+0x124>
 8001422:	e7db      	b.n	80013dc <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001424:	f7ff fb78 	bl	8000b18 <HAL_GetTick>
 8001428:	1bc0      	subs	r0, r0, r7
 800142a:	4540      	cmp	r0, r8
 800142c:	d8d6      	bhi.n	80013dc <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800142e:	6863      	ldr	r3, [r4, #4]
 8001430:	f013 0f0c 	tst.w	r3, #12
 8001434:	d1f6      	bne.n	8001424 <HAL_RCC_ClockConfig+0x13c>
 8001436:	e766      	b.n	8001306 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001438:	6813      	ldr	r3, [r2, #0]
 800143a:	f023 0307 	bic.w	r3, r3, #7
 800143e:	432b      	orrs	r3, r5
 8001440:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001442:	6813      	ldr	r3, [r2, #0]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	429d      	cmp	r5, r3
 800144a:	d192      	bne.n	8001372 <HAL_RCC_ClockConfig+0x8a>
 800144c:	e762      	b.n	8001314 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800144e:	6863      	ldr	r3, [r4, #4]
 8001450:	68f1      	ldr	r1, [r6, #12]
 8001452:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001456:	430b      	orrs	r3, r1
 8001458:	6063      	str	r3, [r4, #4]
 800145a:	e761      	b.n	8001320 <HAL_RCC_ClockConfig+0x38>
 800145c:	40022000 	.word	0x40022000
 8001460:	40021000 	.word	0x40021000
 8001464:	08002310 	.word	0x08002310
 8001468:	20000000 	.word	0x20000000

0800146c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800146c:	4b01      	ldr	r3, [pc, #4]	; (8001474 <HAL_RCC_GetHCLKFreq+0x8>)
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000000 	.word	0x20000000

08001478 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001478:	6803      	ldr	r3, [r0, #0]
{
 800147a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800147e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001480:	03d8      	lsls	r0, r3, #15
 8001482:	d520      	bpl.n	80014c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001484:	4c50      	ldr	r4, [pc, #320]	; (80015c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001486:	69e3      	ldr	r3, [r4, #28]
 8001488:	00d9      	lsls	r1, r3, #3
 800148a:	d444      	bmi.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148c:	69e3      	ldr	r3, [r4, #28]
 800148e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001492:	61e3      	str	r3, [r4, #28]
 8001494:	69e3      	ldr	r3, [r4, #28]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800149e:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a0:	4f4a      	ldr	r7, [pc, #296]	; (80015cc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	05da      	lsls	r2, r3, #23
 80014a6:	d538      	bpl.n	800151a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014a8:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014aa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80014ae:	d148      	bne.n	8001542 <HAL_RCCEx_PeriphCLKConfig+0xca>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80014b0:	6a23      	ldr	r3, [r4, #32]
 80014b2:	686a      	ldr	r2, [r5, #4]
 80014b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014b8:	4313      	orrs	r3, r2
 80014ba:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014bc:	b11e      	cbz	r6, 80014c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014be:	69e3      	ldr	r3, [r4, #28]
 80014c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80014c6:	6828      	ldr	r0, [r5, #0]
 80014c8:	07c1      	lsls	r1, r0, #31
 80014ca:	d506      	bpl.n	80014da <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80014cc:	4a3e      	ldr	r2, [pc, #248]	; (80015c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80014ce:	68a9      	ldr	r1, [r5, #8]
 80014d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	430b      	orrs	r3, r1
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80014da:	0682      	lsls	r2, r0, #26
 80014dc:	d506      	bpl.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80014de:	4a3a      	ldr	r2, [pc, #232]	; (80015c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80014e0:	68e9      	ldr	r1, [r5, #12]
 80014e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014e4:	f023 0310 	bic.w	r3, r3, #16
 80014e8:	430b      	orrs	r3, r1
 80014ea:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80014ec:	0603      	lsls	r3, r0, #24
 80014ee:	d506      	bpl.n	80014fe <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80014f0:	4a35      	ldr	r2, [pc, #212]	; (80015c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80014f2:	6929      	ldr	r1, [r5, #16]
 80014f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80014f6:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80014fa:	430b      	orrs	r3, r1
 80014fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80014fe:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8001502:	d01b      	beq.n	800153c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001504:	4a30      	ldr	r2, [pc, #192]	; (80015c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001506:	6969      	ldr	r1, [r5, #20]
 8001508:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800150a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800150e:	430b      	orrs	r3, r1
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001512:	2000      	movs	r0, #0
 8001514:	e012      	b.n	800153c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;
 8001516:	2600      	movs	r6, #0
 8001518:	e7c2      	b.n	80014a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001520:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001522:	f7ff faf9 	bl	8000b18 <HAL_GetTick>
 8001526:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	05db      	lsls	r3, r3, #23
 800152c:	d4bc      	bmi.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7ff faf3 	bl	8000b18 <HAL_GetTick>
 8001532:	eba0 0008 	sub.w	r0, r0, r8
 8001536:	2864      	cmp	r0, #100	; 0x64
 8001538:	d9f6      	bls.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 800153a:	2003      	movs	r0, #3
}
 800153c:	b002      	add	sp, #8
 800153e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001542:	686a      	ldr	r2, [r5, #4]
 8001544:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001548:	4293      	cmp	r3, r2
 800154a:	d0b1      	beq.n	80014b0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800154c:	6a21      	ldr	r1, [r4, #32]
 800154e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001552:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001556:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800155a:	f8df e074 	ldr.w	lr, [pc, #116]	; 80015d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800155e:	fab2 f282 	clz	r2, r2
 8001562:	4472      	add	r2, lr
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	2701      	movs	r7, #1
 8001568:	6017      	str	r7, [r2, #0]
 800156a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800156e:	fab3 f383 	clz	r3, r3
 8001572:	4473      	add	r3, lr
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 800157a:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800157c:	07c8      	lsls	r0, r1, #31
 800157e:	d597      	bpl.n	80014b0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001580:	f7ff faca 	bl	8000b18 <HAL_GetTick>
 8001584:	f04f 0802 	mov.w	r8, #2
 8001588:	4682      	mov	sl, r0
 800158a:	46c1      	mov	r9, r8
 800158c:	fa98 f3a8 	rbit	r3, r8
 8001590:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	b19b      	cbz	r3, 80015be <HAL_RCCEx_PeriphCLKConfig+0x146>
 8001596:	6a22      	ldr	r2, [r4, #32]
 8001598:	fa99 f3a9 	rbit	r3, r9
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	fa07 f303 	lsl.w	r3, r7, r3
 80015a8:	4213      	tst	r3, r2
 80015aa:	d181      	bne.n	80014b0 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff fab4 	bl	8000b18 <HAL_GetTick>
 80015b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80015b4:	eba0 000a 	sub.w	r0, r0, sl
 80015b8:	4298      	cmp	r0, r3
 80015ba:	d9e7      	bls.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80015bc:	e7bd      	b.n	800153a <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80015be:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015c4:	e7e8      	b.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40007000 	.word	0x40007000
 80015d0:	10908100 	.word	0x10908100

080015d4 <HAL_TIM_PWM_MspInit>:
 80015d4:	4770      	bx	lr

080015d6 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80015d6:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 80015d8:	b189      	cbz	r1, 80015fe <HAL_TIM_Encoder_Start+0x28>
 80015da:	2904      	cmp	r1, #4
 80015dc:	d007      	beq.n	80015ee <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80015de:	6a1a      	ldr	r2, [r3, #32]
 80015e0:	f022 0201 	bic.w	r2, r2, #1
 80015e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80015e6:	6a1a      	ldr	r2, [r3, #32]
 80015e8:	f042 0201 	orr.w	r2, r2, #1
 80015ec:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 80015ee:	6a1a      	ldr	r2, [r3, #32]
 80015f0:	f022 0210 	bic.w	r2, r2, #16
 80015f4:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80015f6:	6a1a      	ldr	r2, [r3, #32]
 80015f8:	f042 0210 	orr.w	r2, r2, #16
 80015fc:	e006      	b.n	800160c <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	f022 0201 	bic.w	r2, r2, #1
 8001604:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001606:	6a1a      	ldr	r2, [r3, #32]
 8001608:	f042 0201 	orr.w	r2, r2, #1
 800160c:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	f042 0201 	orr.w	r2, r2, #1
 8001614:	601a      	str	r2, [r3, #0]
}
 8001616:	2000      	movs	r0, #0
 8001618:	4770      	bx	lr
	...

0800161c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800161c:	4a21      	ldr	r2, [pc, #132]	; (80016a4 <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 800161e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001620:	4290      	cmp	r0, r2
{
 8001622:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001624:	d005      	beq.n	8001632 <TIM_Base_SetConfig+0x16>
 8001626:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800162a:	d002      	beq.n	8001632 <TIM_Base_SetConfig+0x16>
 800162c:	4c1e      	ldr	r4, [pc, #120]	; (80016a8 <TIM_Base_SetConfig+0x8c>)
 800162e:	42a0      	cmp	r0, r4
 8001630:	d10c      	bne.n	800164c <TIM_Base_SetConfig+0x30>
    tmpcr1 |= Structure->CounterMode;
 8001632:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001638:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800163a:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800163e:	d010      	beq.n	8001662 <TIM_Base_SetConfig+0x46>
 8001640:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001644:	d00d      	beq.n	8001662 <TIM_Base_SetConfig+0x46>
 8001646:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <TIM_Base_SetConfig+0x8c>)
 8001648:	4290      	cmp	r0, r2
 800164a:	d00a      	beq.n	8001662 <TIM_Base_SetConfig+0x46>
 800164c:	4a17      	ldr	r2, [pc, #92]	; (80016ac <TIM_Base_SetConfig+0x90>)
 800164e:	4290      	cmp	r0, r2
 8001650:	d007      	beq.n	8001662 <TIM_Base_SetConfig+0x46>
 8001652:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001656:	4290      	cmp	r0, r2
 8001658:	d003      	beq.n	8001662 <TIM_Base_SetConfig+0x46>
 800165a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800165e:	4290      	cmp	r0, r2
 8001660:	d103      	bne.n	800166a <TIM_Base_SetConfig+0x4e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001662:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001668:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800166a:	694a      	ldr	r2, [r1, #20]
 800166c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001670:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001672:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001674:	688b      	ldr	r3, [r1, #8]
 8001676:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001678:	680b      	ldr	r3, [r1, #0]
 800167a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <TIM_Base_SetConfig+0x88>)
 800167e:	4298      	cmp	r0, r3
 8001680:	d00b      	beq.n	800169a <TIM_Base_SetConfig+0x7e>
 8001682:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001686:	4298      	cmp	r0, r3
 8001688:	d007      	beq.n	800169a <TIM_Base_SetConfig+0x7e>
 800168a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800168e:	4298      	cmp	r0, r3
 8001690:	d003      	beq.n	800169a <TIM_Base_SetConfig+0x7e>
 8001692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001696:	4298      	cmp	r0, r3
 8001698:	d101      	bne.n	800169e <TIM_Base_SetConfig+0x82>
    TIMx->RCR = Structure->RepetitionCounter;
 800169a:	690b      	ldr	r3, [r1, #16]
 800169c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800169e:	2301      	movs	r3, #1
 80016a0:	6143      	str	r3, [r0, #20]
 80016a2:	bd10      	pop	{r4, pc}
 80016a4:	40012c00 	.word	0x40012c00
 80016a8:	40000400 	.word	0x40000400
 80016ac:	40014000 	.word	0x40014000

080016b0 <HAL_TIM_Base_Init>:
{ 
 80016b0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80016b2:	4604      	mov	r4, r0
 80016b4:	b1a0      	cbz	r0, 80016e0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80016b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016be:	b91b      	cbnz	r3, 80016c8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016c4:	f000 fd3e 	bl	8002144 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80016c8:	2302      	movs	r3, #2
 80016ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80016ce:	6820      	ldr	r0, [r4, #0]
 80016d0:	1d21      	adds	r1, r4, #4
 80016d2:	f7ff ffa3 	bl	800161c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016dc:	2000      	movs	r0, #0
 80016de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016e0:	2001      	movs	r0, #1
}
 80016e2:	bd10      	pop	{r4, pc}

080016e4 <HAL_TIM_PWM_Init>:
{
 80016e4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80016e6:	4604      	mov	r4, r0
 80016e8:	b1a0      	cbz	r0, 8001714 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80016ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016f2:	b91b      	cbnz	r3, 80016fc <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016f4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80016f8:	f7ff ff6c 	bl	80015d4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80016fc:	2302      	movs	r3, #2
 80016fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001702:	6820      	ldr	r0, [r4, #0]
 8001704:	1d21      	adds	r1, r4, #4
 8001706:	f7ff ff89 	bl	800161c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800170a:	2301      	movs	r3, #1
 800170c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001710:	2000      	movs	r0, #0
 8001712:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001714:	2001      	movs	r0, #1
}
 8001716:	bd10      	pop	{r4, pc}

08001718 <HAL_TIM_Encoder_Init>:
{
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171a:	460c      	mov	r4, r1
  if(htim == NULL)
 800171c:	4605      	mov	r5, r0
 800171e:	2800      	cmp	r0, #0
 8001720:	d043      	beq.n	80017aa <HAL_TIM_Encoder_Init+0x92>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001722:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001726:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800172a:	b91b      	cbnz	r3, 8001734 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 800172c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001730:	f000 fce4 	bl	80020fc <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001734:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;
 8001736:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001738:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;
 800173c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001740:	6883      	ldr	r3, [r0, #8]
 8001742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001746:	f023 0307 	bic.w	r3, r3, #7
 800174a:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 800174c:	f7ff ff66 	bl	800161c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001750:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8001752:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001754:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001756:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001758:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 800175a:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800175c:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800175e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001760:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001764:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001768:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800176c:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800176e:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001772:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001774:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800177c:	68e1      	ldr	r1, [r4, #12]
 800177e:	430b      	orrs	r3, r1
 8001780:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001782:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001786:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800178a:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800178c:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800178e:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001792:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001794:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001796:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800179a:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800179c:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 800179e:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80017a0:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 80017a2:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 80017a6:	2000      	movs	r0, #0
 80017a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80017aa:	2001      	movs	r0, #1
}
 80017ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080017b0 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017b0:	6a03      	ldr	r3, [r0, #32]
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80017b8:	6a03      	ldr	r3, [r0, #32]
{
 80017ba:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2; 
 80017bc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80017be:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 80017c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80017c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017c6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80017ca:	432a      	orrs	r2, r5
  tmpccer |= OC_Config->OCPolarity;
 80017cc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80017ce:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80017d2:	432b      	orrs	r3, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80017d4:	4d17      	ldr	r5, [pc, #92]	; (8001834 <TIM_OC1_SetConfig+0x84>)
 80017d6:	42a8      	cmp	r0, r5
 80017d8:	d00b      	beq.n	80017f2 <TIM_OC1_SetConfig+0x42>
 80017da:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80017de:	42a8      	cmp	r0, r5
 80017e0:	d007      	beq.n	80017f2 <TIM_OC1_SetConfig+0x42>
 80017e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017e6:	42a8      	cmp	r0, r5
 80017e8:	d003      	beq.n	80017f2 <TIM_OC1_SetConfig+0x42>
 80017ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017ee:	42a8      	cmp	r0, r5
 80017f0:	d11a      	bne.n	8001828 <TIM_OC1_SetConfig+0x78>
    tmpccer |= OC_Config->OCNPolarity;
 80017f2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80017f4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80017f8:	432b      	orrs	r3, r5
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80017fa:	4d0e      	ldr	r5, [pc, #56]	; (8001834 <TIM_OC1_SetConfig+0x84>)
 80017fc:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80017fe:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001802:	d00b      	beq.n	800181c <TIM_OC1_SetConfig+0x6c>
 8001804:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001808:	42a8      	cmp	r0, r5
 800180a:	d007      	beq.n	800181c <TIM_OC1_SetConfig+0x6c>
 800180c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001810:	42a8      	cmp	r0, r5
 8001812:	d003      	beq.n	800181c <TIM_OC1_SetConfig+0x6c>
 8001814:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001818:	42a8      	cmp	r0, r5
 800181a:	d105      	bne.n	8001828 <TIM_OC1_SetConfig+0x78>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800181c:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001820:	698e      	ldr	r6, [r1, #24]
 8001822:	694c      	ldr	r4, [r1, #20]
 8001824:	4334      	orrs	r4, r6
 8001826:	432c      	orrs	r4, r5
  TIMx->CR2 = tmpcr2;
 8001828:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800182a:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800182c:	684a      	ldr	r2, [r1, #4]
 800182e:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8001830:	6203      	str	r3, [r0, #32]
 8001832:	bd70      	pop	{r4, r5, r6, pc}
 8001834:	40012c00 	.word	0x40012c00

08001838 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001838:	6a03      	ldr	r3, [r0, #32]
 800183a:	f023 0310 	bic.w	r3, r3, #16
 800183e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001840:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 8001842:	6842      	ldr	r2, [r0, #4]
{
 8001844:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8001846:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001848:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800184a:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800184e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001852:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001856:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001858:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800185c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001860:	4d10      	ldr	r5, [pc, #64]	; (80018a4 <TIM_OC2_SetConfig+0x6c>)
 8001862:	42a8      	cmp	r0, r5
 8001864:	d10e      	bne.n	8001884 <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001866:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800186c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001874:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001876:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001878:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800187c:	4335      	orrs	r5, r6
 800187e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8001882:	e009      	b.n	8001898 <TIM_OC2_SetConfig+0x60>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001884:	4d08      	ldr	r5, [pc, #32]	; (80018a8 <TIM_OC2_SetConfig+0x70>)
 8001886:	42a8      	cmp	r0, r5
 8001888:	d0f4      	beq.n	8001874 <TIM_OC2_SetConfig+0x3c>
 800188a:	4d08      	ldr	r5, [pc, #32]	; (80018ac <TIM_OC2_SetConfig+0x74>)
 800188c:	42a8      	cmp	r0, r5
 800188e:	d0f1      	beq.n	8001874 <TIM_OC2_SetConfig+0x3c>
 8001890:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001894:	42a8      	cmp	r0, r5
 8001896:	d0ed      	beq.n	8001874 <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 8001898:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800189a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800189c:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800189e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;  
 80018a0:	6203      	str	r3, [r0, #32]
}
 80018a2:	bd70      	pop	{r4, r5, r6, pc}
 80018a4:	40012c00 	.word	0x40012c00
 80018a8:	40014000 	.word	0x40014000
 80018ac:	40014400 	.word	0x40014400

080018b0 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80018b0:	6a03      	ldr	r3, [r0, #32]
 80018b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80018b8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 80018ba:	6842      	ldr	r2, [r0, #4]
{
 80018bc:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR2;
 80018be:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 80018c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80018c2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80018c6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80018ca:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80018cc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80018ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80018d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80018d6:	4d11      	ldr	r5, [pc, #68]	; (800191c <TIM_OC3_SetConfig+0x6c>)
 80018d8:	42a8      	cmp	r0, r5
 80018da:	d10e      	bne.n	80018fa <TIM_OC3_SetConfig+0x4a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80018dc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80018de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80018e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80018e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80018ea:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80018ec:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80018ee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80018f2:	4335      	orrs	r5, r6
 80018f4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80018f8:	e009      	b.n	800190e <TIM_OC3_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80018fa:	4d09      	ldr	r5, [pc, #36]	; (8001920 <TIM_OC3_SetConfig+0x70>)
 80018fc:	42a8      	cmp	r0, r5
 80018fe:	d0f4      	beq.n	80018ea <TIM_OC3_SetConfig+0x3a>
 8001900:	4d08      	ldr	r5, [pc, #32]	; (8001924 <TIM_OC3_SetConfig+0x74>)
 8001902:	42a8      	cmp	r0, r5
 8001904:	d0f1      	beq.n	80018ea <TIM_OC3_SetConfig+0x3a>
 8001906:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800190a:	42a8      	cmp	r0, r5
 800190c:	d0ed      	beq.n	80018ea <TIM_OC3_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 800190e:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8001910:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001912:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001914:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;  
 8001916:	6203      	str	r3, [r0, #32]
}
 8001918:	bd70      	pop	{r4, r5, r6, pc}
 800191a:	bf00      	nop
 800191c:	40012c00 	.word	0x40012c00
 8001920:	40014000 	.word	0x40014000
 8001924:	40014400 	.word	0x40014400

08001928 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001928:	6a03      	ldr	r3, [r0, #32]
 800192a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800192e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001930:	6a02      	ldr	r2, [r0, #32]
{
 8001932:	b530      	push	{r4, r5, lr}
  tmpcr2 =  TIMx->CR2; 
 8001934:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001936:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001938:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800193a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001942:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001946:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001948:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800194c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001950:	4d0c      	ldr	r5, [pc, #48]	; (8001984 <TIM_OC4_SetConfig+0x5c>)
 8001952:	42a8      	cmp	r0, r5
 8001954:	d00b      	beq.n	800196e <TIM_OC4_SetConfig+0x46>
 8001956:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800195a:	42a8      	cmp	r0, r5
 800195c:	d007      	beq.n	800196e <TIM_OC4_SetConfig+0x46>
 800195e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001962:	42a8      	cmp	r0, r5
 8001964:	d003      	beq.n	800196e <TIM_OC4_SetConfig+0x46>
 8001966:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800196a:	42a8      	cmp	r0, r5
 800196c:	d104      	bne.n	8001978 <TIM_OC4_SetConfig+0x50>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800196e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001970:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001974:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  TIMx->CR2 = tmpcr2;
 8001978:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800197a:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800197c:	684b      	ldr	r3, [r1, #4]
 800197e:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;  
 8001980:	6202      	str	r2, [r0, #32]
 8001982:	bd30      	pop	{r4, r5, pc}
 8001984:	40012c00 	.word	0x40012c00

08001988 <TIM_ETR_SetConfig>:
{
 8001988:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 800198a:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800198c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800198e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001992:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001996:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8001998:	6083      	str	r3, [r0, #8]
 800199a:	bd10      	pop	{r4, pc}

0800199c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800199c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80019a0:	2b01      	cmp	r3, #1
{
 80019a2:	b570      	push	{r4, r5, r6, lr}
 80019a4:	4604      	mov	r4, r0
 80019a6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80019aa:	d01a      	beq.n	80019e2 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 80019ac:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80019b0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80019b2:	2301      	movs	r3, #1
 80019b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80019b8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019ba:	4b52      	ldr	r3, [pc, #328]	; (8001b04 <HAL_TIM_ConfigClockSource+0x168>)
 80019bc:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80019be:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80019c0:	680b      	ldr	r3, [r1, #0]
 80019c2:	2b40      	cmp	r3, #64	; 0x40
 80019c4:	d075      	beq.n	8001ab2 <HAL_TIM_ConfigClockSource+0x116>
 80019c6:	d818      	bhi.n	80019fa <HAL_TIM_ConfigClockSource+0x5e>
 80019c8:	2b10      	cmp	r3, #16
 80019ca:	f000 808f 	beq.w	8001aec <HAL_TIM_ConfigClockSource+0x150>
 80019ce:	d809      	bhi.n	80019e4 <HAL_TIM_ConfigClockSource+0x48>
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 8085 	beq.w	8001ae0 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 80019d6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80019d8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80019da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80019de:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80019e2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80019e4:	2b20      	cmp	r3, #32
 80019e6:	f000 8087 	beq.w	8001af8 <HAL_TIM_ConfigClockSource+0x15c>
 80019ea:	2b30      	cmp	r3, #48	; 0x30
 80019ec:	d1f3      	bne.n	80019d6 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 80019ee:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019f4:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 80019f8:	e033      	b.n	8001a62 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80019fa:	2b70      	cmp	r3, #112	; 0x70
 80019fc:	d033      	beq.n	8001a66 <HAL_TIM_ConfigClockSource+0xca>
 80019fe:	d81b      	bhi.n	8001a38 <HAL_TIM_ConfigClockSource+0x9c>
 8001a00:	2b50      	cmp	r3, #80	; 0x50
 8001a02:	d03f      	beq.n	8001a84 <HAL_TIM_ConfigClockSource+0xe8>
 8001a04:	2b60      	cmp	r3, #96	; 0x60
 8001a06:	d1e6      	bne.n	80019d6 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001a08:	684d      	ldr	r5, [r1, #4]
 8001a0a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a0c:	6a01      	ldr	r1, [r0, #32]
 8001a0e:	f021 0110 	bic.w	r1, r1, #16
 8001a12:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a14:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001a16:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001a18:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001a1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001a20:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a24:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001a28:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a2a:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001a2c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a32:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001a36:	e014      	b.n	8001a62 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a3c:	d00c      	beq.n	8001a58 <HAL_TIM_ConfigClockSource+0xbc>
 8001a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a42:	d1c8      	bne.n	80019d6 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001a44:	68cb      	ldr	r3, [r1, #12]
 8001a46:	684a      	ldr	r2, [r1, #4]
 8001a48:	6889      	ldr	r1, [r1, #8]
 8001a4a:	f7ff ff9d 	bl	8001988 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a4e:	6822      	ldr	r2, [r4, #0]
 8001a50:	6893      	ldr	r3, [r2, #8]
 8001a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a56:	e013      	b.n	8001a80 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001a58:	6883      	ldr	r3, [r0, #8]
 8001a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5e:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001a62:	6083      	str	r3, [r0, #8]
 8001a64:	e7b7      	b.n	80019d6 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001a66:	68cb      	ldr	r3, [r1, #12]
 8001a68:	684a      	ldr	r2, [r1, #4]
 8001a6a:	6889      	ldr	r1, [r1, #8]
 8001a6c:	f7ff ff8c 	bl	8001988 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a70:	6822      	ldr	r2, [r4, #0]
 8001a72:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a80:	6093      	str	r3, [r2, #8]
    break;
 8001a82:	e7a8      	b.n	80019d6 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001a84:	684a      	ldr	r2, [r1, #4]
 8001a86:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a88:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a8a:	6a05      	ldr	r5, [r0, #32]
 8001a8c:	f025 0501 	bic.w	r5, r5, #1
 8001a90:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001a92:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a94:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a9c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001aa0:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001aa2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001aa4:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001aa6:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001aac:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001ab0:	e7d7      	b.n	8001a62 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001ab2:	684a      	ldr	r2, [r1, #4]
 8001ab4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001ab6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ab8:	6a05      	ldr	r5, [r0, #32]
 8001aba:	f025 0501 	bic.w	r5, r5, #1
 8001abe:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001ac0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ac2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001aca:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001ace:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001ad0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ad2:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001ad4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ada:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001ade:	e7c0      	b.n	8001a62 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001ae0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ae6:	f043 0307 	orr.w	r3, r3, #7
 8001aea:	e7ba      	b.n	8001a62 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001aec:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001af2:	f043 0317 	orr.w	r3, r3, #23
 8001af6:	e7b4      	b.n	8001a62 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001af8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001afe:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001b02:	e7ae      	b.n	8001a62 <HAL_TIM_ConfigClockSource+0xc6>
 8001b04:	fffe0088 	.word	0xfffe0088

08001b08 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001b08:	6a03      	ldr	r3, [r0, #32]
{
 8001b0a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001b0c:	2401      	movs	r4, #1
 8001b0e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001b10:	ea23 0304 	bic.w	r3, r3, r4
 8001b14:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001b16:	6a03      	ldr	r3, [r0, #32]
 8001b18:	408a      	lsls	r2, r1
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	6202      	str	r2, [r0, #32]
 8001b1e:	bd10      	pop	{r4, pc}

08001b20 <HAL_TIM_PWM_Start>:
{
 8001b20:	b510      	push	{r4, lr}
 8001b22:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b24:	2201      	movs	r2, #1
 8001b26:	6800      	ldr	r0, [r0, #0]
 8001b28:	f7ff ffee 	bl	8001b08 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <HAL_TIM_PWM_Start+0x40>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d00b      	beq.n	8001b4c <HAL_TIM_PWM_Start+0x2c>
 8001b34:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d007      	beq.n	8001b4c <HAL_TIM_PWM_Start+0x2c>
 8001b3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d003      	beq.n	8001b4c <HAL_TIM_PWM_Start+0x2c>
 8001b44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d103      	bne.n	8001b54 <HAL_TIM_PWM_Start+0x34>
    __HAL_TIM_MOE_ENABLE(htim);
 8001b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b52:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
} 
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	bd10      	pop	{r4, pc}
 8001b60:	40012c00 	.word	0x40012c00

08001b64 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001b64:	6a03      	ldr	r3, [r0, #32]
 8001b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b6c:	6a02      	ldr	r2, [r0, #32]
{
 8001b6e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001b70:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001b72:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b74:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001b7e:	432b      	orrs	r3, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001b80:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8001b82:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001b86:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b8a:	4d0d      	ldr	r5, [pc, #52]	; (8001bc0 <TIM_OC5_SetConfig+0x5c>)
 8001b8c:	42a8      	cmp	r0, r5
 8001b8e:	d00b      	beq.n	8001ba8 <TIM_OC5_SetConfig+0x44>
 8001b90:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001b94:	42a8      	cmp	r0, r5
 8001b96:	d007      	beq.n	8001ba8 <TIM_OC5_SetConfig+0x44>
 8001b98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b9c:	42a8      	cmp	r0, r5
 8001b9e:	d003      	beq.n	8001ba8 <TIM_OC5_SetConfig+0x44>
 8001ba0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ba4:	42a8      	cmp	r0, r5
 8001ba6:	d104      	bne.n	8001bb2 <TIM_OC5_SetConfig+0x4e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001ba8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001baa:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001bae:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bb2:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001bb4:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001bb6:	684b      	ldr	r3, [r1, #4]
 8001bb8:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001bba:	6202      	str	r2, [r0, #32]
 8001bbc:	bd30      	pop	{r4, r5, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40012c00 	.word	0x40012c00

08001bc4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001bc4:	6a03      	ldr	r3, [r0, #32]
 8001bc6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001bca:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bcc:	6a02      	ldr	r2, [r0, #32]
{
 8001bce:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001bd0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001bd2:	6d43      	ldr	r3, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bd4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bde:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001be2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001be4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001be8:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001bec:	4d0c      	ldr	r5, [pc, #48]	; (8001c20 <TIM_OC6_SetConfig+0x5c>)
 8001bee:	42a8      	cmp	r0, r5
 8001bf0:	d00b      	beq.n	8001c0a <TIM_OC6_SetConfig+0x46>
 8001bf2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001bf6:	42a8      	cmp	r0, r5
 8001bf8:	d007      	beq.n	8001c0a <TIM_OC6_SetConfig+0x46>
 8001bfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bfe:	42a8      	cmp	r0, r5
 8001c00:	d003      	beq.n	8001c0a <TIM_OC6_SetConfig+0x46>
 8001c02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c06:	42a8      	cmp	r0, r5
 8001c08:	d104      	bne.n	8001c14 <TIM_OC6_SetConfig+0x50>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001c0a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001c0c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001c10:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c14:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001c16:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001c18:	684b      	ldr	r3, [r1, #4]
 8001c1a:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001c1c:	6202      	str	r2, [r0, #32]
 8001c1e:	bd30      	pop	{r4, r5, pc}
 8001c20:	40012c00 	.word	0x40012c00

08001c24 <HAL_TIM_PWM_ConfigChannel>:
{
 8001c24:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001c26:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001c2a:	2b01      	cmp	r3, #1
{
 8001c2c:	4604      	mov	r4, r0
 8001c2e:	460d      	mov	r5, r1
 8001c30:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001c34:	d010      	beq.n	8001c58 <HAL_TIM_PWM_ConfigChannel+0x34>
 8001c36:	2301      	movs	r3, #1
  switch (Channel)
 8001c38:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001c3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001c42:	d043      	beq.n	8001ccc <HAL_TIM_PWM_ConfigChannel+0xa8>
 8001c44:	d809      	bhi.n	8001c5a <HAL_TIM_PWM_ConfigChannel+0x36>
 8001c46:	b1fa      	cbz	r2, 8001c88 <HAL_TIM_PWM_ConfigChannel+0x64>
 8001c48:	2a04      	cmp	r2, #4
 8001c4a:	d02e      	beq.n	8001caa <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8001c4c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001c4e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001c54:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001c58:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8001c5a:	2a10      	cmp	r2, #16
 8001c5c:	d047      	beq.n	8001cee <HAL_TIM_PWM_ConfigChannel+0xca>
 8001c5e:	2a14      	cmp	r2, #20
 8001c60:	d056      	beq.n	8001d10 <HAL_TIM_PWM_ConfigChannel+0xec>
 8001c62:	2a0c      	cmp	r2, #12
 8001c64:	d1f2      	bne.n	8001c4c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c66:	6820      	ldr	r0, [r4, #0]
 8001c68:	f7ff fe5e 	bl	8001928 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c6c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001c6e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001c80:	69da      	ldr	r2, [r3, #28]
 8001c82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c86:	e030      	b.n	8001cea <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c88:	6820      	ldr	r0, [r4, #0]
 8001c8a:	f7ff fd91 	bl	80017b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c8e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c90:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c92:	699a      	ldr	r2, [r3, #24]
 8001c94:	f042 0208 	orr.w	r2, r2, #8
 8001c98:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c9a:	699a      	ldr	r2, [r3, #24]
 8001c9c:	f022 0204 	bic.w	r2, r2, #4
 8001ca0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ca2:	699a      	ldr	r2, [r3, #24]
 8001ca4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ca6:	619a      	str	r2, [r3, #24]
    break;
 8001ca8:	e7d0      	b.n	8001c4c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001caa:	6820      	ldr	r0, [r4, #0]
 8001cac:	f7ff fdc4 	bl	8001838 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cb0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cb2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001cca:	e7ec      	b.n	8001ca6 <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ccc:	6820      	ldr	r0, [r4, #0]
 8001cce:	f7ff fdef 	bl	80018b0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cd2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001cd4:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cd6:	69da      	ldr	r2, [r3, #28]
 8001cd8:	f042 0208 	orr.w	r2, r2, #8
 8001cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cde:	69da      	ldr	r2, [r3, #28]
 8001ce0:	f022 0204 	bic.w	r2, r2, #4
 8001ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001ce6:	69da      	ldr	r2, [r3, #28]
 8001ce8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001cea:	61da      	str	r2, [r3, #28]
    break;
 8001cec:	e7ae      	b.n	8001c4c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001cee:	6820      	ldr	r0, [r4, #0]
 8001cf0:	f7ff ff38 	bl	8001b64 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001cf4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001cf6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001cf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cfa:	f042 0208 	orr.w	r2, r2, #8
 8001cfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d02:	f022 0204 	bic.w	r2, r2, #4
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001d08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d0a:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8001d0e:	e79d      	b.n	8001c4c <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001d10:	6820      	ldr	r0, [r4, #0]
 8001d12:	f7ff ff57 	bl	8001bc4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001d16:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001d18:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001d1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001d22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001d2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d2c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d30:	e7ec      	b.n	8001d0c <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

08001d34 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8001d34:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001d38:	2b01      	cmp	r3, #1
{
 8001d3a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001d3c:	d018      	beq.n	8001d70 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 = htim->Instance->CR2;
 8001d3e:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001d40:	4d0c      	ldr	r5, [pc, #48]	; (8001d74 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8001d42:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001d44:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001d46:	42aa      	cmp	r2, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001d48:	bf02      	ittt	eq
 8001d4a:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001d4c:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001d50:	432b      	orreq	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d52:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d54:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d5a:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001d5c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 8001d60:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d62:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 8001d64:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001d66:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001d68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001d70:	2002      	movs	r0, #2
} 
 8001d72:	bd30      	pop	{r4, r5, pc}
 8001d74:	40012c00 	.word	0x40012c00

08001d78 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <MX_GPIO_Init+0x64>)
{
 8001d7a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d82:	615a      	str	r2, [r3, #20]
 8001d84:	695a      	ldr	r2, [r3, #20]
{
 8001d86:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d88:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001d8c:	9201      	str	r2, [sp, #4]
 8001d8e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d96:	615a      	str	r2, [r3, #20]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da0:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001da2:	2101      	movs	r1, #1
 8001da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da8:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001daa:	2401      	movs	r4, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001dac:	f7fe fff2 	bl	8000d94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	a903      	add	r1, sp, #12
 8001db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001db8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dba:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f7fe ff2e 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dc4:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	a903      	add	r1, sp, #12
 8001dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dcc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dce:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f7fe ff25 	bl	8000c20 <HAL_GPIO_Init>

}
 8001dd6:	b009      	add	sp, #36	; 0x24
 8001dd8:	bd30      	pop	{r4, r5, pc}
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000

08001de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de0:	b510      	push	{r4, lr}
 8001de2:	b096      	sub	sp, #88	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001de4:	2301      	movs	r3, #1
 8001de6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001de8:	2310      	movs	r3, #16
 8001dea:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dec:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dee:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001df0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df2:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001df4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001df8:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dfa:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001dfc:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dfe:	f7fe ffcf 	bl	8000da0 <HAL_RCC_OscConfig>
 8001e02:	b100      	cbz	r0, 8001e06 <SystemClock_Config+0x26>
 8001e04:	e7fe      	b.n	8001e04 <SystemClock_Config+0x24>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e06:	230f      	movs	r3, #15
 8001e08:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e0a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e10:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e12:	4621      	mov	r1, r4
 8001e14:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e16:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e18:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e1a:	f7ff fa65 	bl	80012e8 <HAL_RCC_ClockConfig>
 8001e1e:	b100      	cbz	r0, 8001e22 <SystemClock_Config+0x42>
 8001e20:	e7fe      	b.n	8001e20 <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001e26:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e28:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001e2a:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e2c:	f7ff fb24 	bl	8001478 <HAL_RCCEx_PeriphCLKConfig>
 8001e30:	4604      	mov	r4, r0
 8001e32:	b100      	cbz	r0, 8001e36 <SystemClock_Config+0x56>
 8001e34:	e7fe      	b.n	8001e34 <SystemClock_Config+0x54>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001e36:	f7ff fb19 	bl	800146c <HAL_RCC_GetHCLKFreq>
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e42:	f7fe fec5 	bl	8000bd0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e46:	2004      	movs	r0, #4
 8001e48:	f7fe fed8 	bl	8000bfc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e4c:	4622      	mov	r2, r4
 8001e4e:	4621      	mov	r1, r4
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f7fe fe88 	bl	8000b68 <HAL_NVIC_SetPriority>
}
 8001e58:	b016      	add	sp, #88	; 0x58
 8001e5a:	bd10      	pop	{r4, pc}

08001e5c <ticks_diff>:
			 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,i);
		old_e=e;
		HAL_Delay(10);
}
int ticks_diff(int old, int new)
{
 8001e5c:	b510      	push	{r4, lr}
	int temp_diff = new - old;
 8001e5e:	1a0c      	subs	r4, r1, r0

	if((fabs(temp_diff)) < DIRECTION_THRESHOLD){
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7fe fb03 	bl	800046c <__aeabi_i2d>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8001e70:	2200      	movs	r2, #0
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <ticks_diff+0x38>)
 8001e74:	f7fe fdd2 	bl	8000a1c <__aeabi_dcmplt>
 8001e78:	b948      	cbnz	r0, 8001e8e <ticks_diff+0x32>
		return temp_diff;
	}else{
		if(temp_diff > 0){
 8001e7a:	2c00      	cmp	r4, #0
			return PPR - temp_diff;
		}else{
			return -PPR - temp_diff;
 8001e7c:	bfdb      	ittet	le
 8001e7e:	f1c4 447f 	rsble	r4, r4, #4278190080	; 0xff000000
 8001e82:	f504 047f 	addle.w	r4, r4, #16711680	; 0xff0000
			return PPR - temp_diff;
 8001e86:	f5c4 5400 	rsbgt	r4, r4, #8192	; 0x2000
			return -PPR - temp_diff;
 8001e8a:	f504 4460 	addle.w	r4, r4, #57344	; 0xe000
		}

	}

}
 8001e8e:	4620      	mov	r0, r4
 8001e90:	bd10      	pop	{r4, pc}
 8001e92:	bf00      	nop
 8001e94:	40e40000 	.word	0x40e40000

08001e98 <moveMotor>:
{
 8001e98:	b538      	push	{r3, r4, r5, lr}
	  temp=ticks_diff(temp,__HAL_TIM_GET_COUNTER(&htim1));
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <moveMotor+0xb0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
{
 8001e9e:	ed2d 8b02 	vpush	{d8}
	  temp=ticks_diff(temp,__HAL_TIM_GET_COUNTER(&htim1));
 8001ea2:	6a59      	ldr	r1, [r3, #36]	; 0x24
{
 8001ea4:	4604      	mov	r4, r0
	  temp=ticks_diff(temp,__HAL_TIM_GET_COUNTER(&htim1));
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff ffd8 	bl	8001e5c <ticks_diff>
		  e=ref-temp;
 8001eac:	1a20      	subs	r0, r4, r0
		  i=Kp*e+ sum_e*Ki+ Kd*(e-old_e);
 8001eae:	ee07 0a90 	vmov	s15, r0
 8001eb2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001eb6:	f7fe fad9 	bl	800046c <__aeabi_i2d>
 8001eba:	a321      	add	r3, pc, #132	; (adr r3, 8001f40 <moveMotor+0xa8>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe fb3a 	bl	8000538 <__aeabi_dmul>
 8001ec4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8001ec8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001ecc:	4604      	mov	r4, r0
 8001ece:	ee17 0a90 	vmov	r0, s15
 8001ed2:	460d      	mov	r5, r1
 8001ed4:	f7fe fadc 	bl	8000490 <__aeabi_f2d>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4620      	mov	r0, r4
 8001ede:	4629      	mov	r1, r5
 8001ee0:	f7fe f978 	bl	80001d4 <__adddf3>
 8001ee4:	ee78 7a08 	vadd.f32	s15, s16, s16
 8001ee8:	4604      	mov	r4, r0
 8001eea:	ee17 0a90 	vmov	r0, s15
 8001eee:	460d      	mov	r5, r1
 8001ef0:	f7fe face 	bl	8000490 <__aeabi_f2d>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4620      	mov	r0, r4
 8001efa:	4629      	mov	r1, r5
 8001efc:	f7fe f96a 	bl	80001d4 <__adddf3>
 8001f00:	f7fe fdb4 	bl	8000a6c <__aeabi_d2iz>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8001f04:	2200      	movs	r2, #0
		  i=Kp*e+ sum_e*Ki+ Kd*(e-old_e);
 8001f06:	4604      	mov	r4, r0
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8001f08:	2101      	movs	r1, #1
 8001f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0e:	f7fe ff41 	bl	8000d94 <HAL_GPIO_WritePin>
		  if(i<0)
 8001f12:	2c00      	cmp	r4, #0
 8001f14:	da06      	bge.n	8001f24 <moveMotor+0x8c>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8001f16:	2201      	movs	r2, #1
 8001f18:	4611      	mov	r1, r2
 8001f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1e:	f7fe ff39 	bl	8000d94 <HAL_GPIO_WritePin>
			  i=-i;
 8001f22:	4264      	negs	r4, r4
}
 8001f24:	ecbd 8b02 	vpop	{d8}
			 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,i);
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <moveMotor+0xb4>)
 8001f2a:	2c64      	cmp	r4, #100	; 0x64
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	bfa8      	it	ge
 8001f30:	2464      	movge	r4, #100	; 0x64
 8001f32:	639c      	str	r4, [r3, #56]	; 0x38
		HAL_Delay(10);
 8001f34:	200a      	movs	r0, #10
}
 8001f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_Delay(10);
 8001f3a:	f7fe bdf3 	b.w	8000b24 <HAL_Delay>
 8001f3e:	bf00      	nop
 8001f40:	a0b5ed8d 	.word	0xa0b5ed8d
 8001f44:	3eb0c6f7 	.word	0x3eb0c6f7
 8001f48:	20000024 	.word	0x20000024
 8001f4c:	20000064 	.word	0x20000064

08001f50 <main>:
{
 8001f50:	b508      	push	{r3, lr}
  HAL_Init();
 8001f52:	f7fe fdc7 	bl	8000ae4 <HAL_Init>
  SystemClock_Config();
 8001f56:	f7ff ff43 	bl	8001de0 <SystemClock_Config>
  MX_GPIO_Init();
 8001f5a:	f7ff ff0d 	bl	8001d78 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001f5e:	f000 f91b 	bl	8002198 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001f62:	f000 f895 	bl	8002090 <MX_TIM1_Init>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001f66:	213c      	movs	r1, #60	; 0x3c
 8001f68:	4805      	ldr	r0, [pc, #20]	; (8001f80 <main+0x30>)
 8001f6a:	f7ff fb34 	bl	80015d6 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8001f6e:	2104      	movs	r1, #4
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <main+0x34>)
 8001f72:	f7ff fdd5 	bl	8001b20 <HAL_TIM_PWM_Start>
  moveMotor(8192);
 8001f76:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f7a:	f7ff ff8d 	bl	8001e98 <moveMotor>
 8001f7e:	e7fe      	b.n	8001f7e <main+0x2e>
 8001f80:	20000024 	.word	0x20000024
 8001f84:	20000064 	.word	0x20000064

08001f88 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001f88:	e7fe      	b.n	8001f88 <_Error_Handler>
	...

08001f8c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_MspInit+0x78>)
{
 8001f8e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	619a      	str	r2, [r3, #24]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa0:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa4:	f7fe fdce 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4611      	mov	r1, r2
 8001fac:	f06f 000b 	mvn.w	r0, #11
 8001fb0:	f7fe fdda 	bl	8000b68 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	f06f 000a 	mvn.w	r0, #10
 8001fbc:	f7fe fdd4 	bl	8000b68 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	f06f 0009 	mvn.w	r0, #9
 8001fc8:	f7fe fdce 	bl	8000b68 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	4611      	mov	r1, r2
 8001fd0:	f06f 0004 	mvn.w	r0, #4
 8001fd4:	f7fe fdc8 	bl	8000b68 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	4611      	mov	r1, r2
 8001fdc:	f06f 0003 	mvn.w	r0, #3
 8001fe0:	f7fe fdc2 	bl	8000b68 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	f06f 0001 	mvn.w	r0, #1
 8001fec:	f7fe fdbc 	bl	8000b68 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f7fe fdb6 	bl	8000b68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffc:	b003      	add	sp, #12
 8001ffe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000

08002008 <NMI_Handler>:
 8002008:	4770      	bx	lr

0800200a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800200a:	e7fe      	b.n	800200a <HardFault_Handler>

0800200c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800200c:	e7fe      	b.n	800200c <MemManage_Handler>

0800200e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800200e:	e7fe      	b.n	800200e <BusFault_Handler>

08002010 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002010:	e7fe      	b.n	8002010 <UsageFault_Handler>

08002012 <SVC_Handler>:
 8002012:	4770      	bx	lr

08002014 <DebugMon_Handler>:
 8002014:	4770      	bx	lr

08002016 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002016:	4770      	bx	lr

08002018 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002018:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800201a:	f7fe fd75 	bl	8000b08 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002022:	f7fe bdf8 	b.w	8000c16 <HAL_SYSTICK_IRQHandler>
	...

08002028 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002028:	4915      	ldr	r1, [pc, #84]	; (8002080 <SystemInit+0x58>)
 800202a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800202e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <SystemInit+0x5c>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002040:	6858      	ldr	r0, [r3, #4]
 8002042:	4a11      	ldr	r2, [pc, #68]	; (8002088 <SystemInit+0x60>)
 8002044:	4002      	ands	r2, r0
 8002046:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800204e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002052:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800205a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002062:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002066:	f022 020f 	bic.w	r2, r2, #15
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800206c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800206e:	4a07      	ldr	r2, [pc, #28]	; (800208c <SystemInit+0x64>)
 8002070:	4002      	ands	r2, r0
 8002072:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002078:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800207c:	608b      	str	r3, [r1, #8]
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00
 8002084:	40021000 	.word	0x40021000
 8002088:	f87fc00c 	.word	0xf87fc00c
 800208c:	ff00fccc 	.word	0xff00fccc

08002090 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002090:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 8002092:	4817      	ldr	r0, [pc, #92]	; (80020f0 <MX_TIM1_Init+0x60>)
  htim1.Init.Prescaler = 0;
 8002094:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <MX_TIM1_Init+0x64>)
 8002096:	2400      	movs	r4, #0
{
 8002098:	b08c      	sub	sp, #48	; 0x30
  htim1.Init.Prescaler = 0;
 800209a:	e880 0018 	stmia.w	r0, {r3, r4}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 60000;
 800209e:	f64e 2360 	movw	r3, #60000	; 0xea60
 80020a2:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020a4:	2303      	movs	r3, #3
 80020a6:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80020a8:	a903      	add	r1, sp, #12
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020aa:	2301      	movs	r3, #1
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	6084      	str	r4, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ae:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80020b0:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b2:	6184      	str	r4, [r0, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020b4:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020b6:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020b8:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 80020ba:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020bc:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020be:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020c0:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020c2:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80020c4:	f7ff fb28 	bl	8001718 <HAL_TIM_Encoder_Init>
 80020c8:	b118      	cbz	r0, 80020d2 <MX_TIM1_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 80020ca:	214c      	movs	r1, #76	; 0x4c
 80020cc:	480a      	ldr	r0, [pc, #40]	; (80020f8 <MX_TIM1_Init+0x68>)
 80020ce:	f7ff ff5b 	bl	8001f88 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020d2:	4669      	mov	r1, sp
 80020d4:	4806      	ldr	r0, [pc, #24]	; (80020f0 <MX_TIM1_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d6:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020d8:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020dc:	f7ff fe2a 	bl	8001d34 <HAL_TIMEx_MasterConfigSynchronization>
 80020e0:	b118      	cbz	r0, 80020ea <MX_TIM1_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80020e2:	2154      	movs	r1, #84	; 0x54
 80020e4:	4804      	ldr	r0, [pc, #16]	; (80020f8 <MX_TIM1_Init+0x68>)
 80020e6:	f7ff ff4f 	bl	8001f88 <_Error_Handler>
  }

}
 80020ea:	b00c      	add	sp, #48	; 0x30
 80020ec:	bd10      	pop	{r4, pc}
 80020ee:	bf00      	nop
 80020f0:	20000024 	.word	0x20000024
 80020f4:	40012c00 	.word	0x40012c00
 80020f8:	08002320 	.word	0x08002320

080020fc <HAL_TIM_Encoder_MspInit>:
  HAL_TIM_MspPostInit(&htim2);

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80020fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM1)
 80020fe:	6802      	ldr	r2, [r0, #0]
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_TIM_Encoder_MspInit+0x44>)
 8002102:	429a      	cmp	r2, r3
 8002104:	d119      	bne.n	800213a <HAL_TIM_Encoder_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002106:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	a901      	add	r1, sp, #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002112:	619a      	str	r2, [r3, #24]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800211e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002122:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002132:	2306      	movs	r3, #6
 8002134:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	f7fe fd73 	bl	8000c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800213a:	b007      	add	sp, #28
 800213c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002140:	40012c00 	.word	0x40012c00

08002144 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8002144:	6803      	ldr	r3, [r0, #0]
 8002146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800214a:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 800214c:	d10a      	bne.n	8002164 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800214e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002152:	69da      	ldr	r2, [r3, #28]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	61da      	str	r2, [r3, #28]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002164:	b002      	add	sp, #8
 8002166:	4770      	bx	lr

08002168 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002168:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 800216a:	6803      	ldr	r3, [r0, #0]
 800216c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002170:	d10c      	bne.n	800218c <HAL_TIM_MspPostInit+0x24>
  /* USER CODE END TIM2_MspPostInit 0 */
  
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002172:	2308      	movs	r3, #8
 8002174:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002182:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	4803      	ldr	r0, [pc, #12]	; (8002194 <HAL_TIM_MspPostInit+0x2c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002186:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002188:	f7fe fd4a 	bl	8000c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800218c:	b007      	add	sp, #28
 800218e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002192:	bf00      	nop
 8002194:	48000400 	.word	0x48000400

08002198 <MX_TIM2_Init>:
{
 8002198:	b500      	push	{lr}
  htim2.Instance = TIM2;
 800219a:	4826      	ldr	r0, [pc, #152]	; (8002234 <MX_TIM2_Init+0x9c>)
  htim2.Init.Prescaler = 640;
 800219c:	f44f 7320 	mov.w	r3, #640	; 0x280
 80021a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
{
 80021a4:	b08f      	sub	sp, #60	; 0x3c
  htim2.Init.Prescaler = 640;
 80021a6:	e880 000a 	stmia.w	r0, {r1, r3}
  htim2.Init.Period = 100;
 80021aa:	2264      	movs	r2, #100	; 0x64
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ac:	2300      	movs	r3, #0
 80021ae:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 100;
 80021b0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021b6:	f7ff fa7b 	bl	80016b0 <HAL_TIM_Base_Init>
 80021ba:	b118      	cbz	r0, 80021c4 <MX_TIM2_Init+0x2c>
    _Error_Handler(__FILE__, __LINE__);
 80021bc:	2167      	movs	r1, #103	; 0x67
 80021be:	481e      	ldr	r0, [pc, #120]	; (8002238 <MX_TIM2_Init+0xa0>)
 80021c0:	f7ff fee2 	bl	8001f88 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c4:	a90e      	add	r1, sp, #56	; 0x38
 80021c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ca:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ce:	4819      	ldr	r0, [pc, #100]	; (8002234 <MX_TIM2_Init+0x9c>)
 80021d0:	f7ff fbe4 	bl	800199c <HAL_TIM_ConfigClockSource>
 80021d4:	b118      	cbz	r0, 80021de <MX_TIM2_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 80021d6:	216d      	movs	r1, #109	; 0x6d
 80021d8:	4817      	ldr	r0, [pc, #92]	; (8002238 <MX_TIM2_Init+0xa0>)
 80021da:	f7ff fed5 	bl	8001f88 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021de:	4815      	ldr	r0, [pc, #84]	; (8002234 <MX_TIM2_Init+0x9c>)
 80021e0:	f7ff fa80 	bl	80016e4 <HAL_TIM_PWM_Init>
 80021e4:	b118      	cbz	r0, 80021ee <MX_TIM2_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
 80021e6:	2172      	movs	r1, #114	; 0x72
 80021e8:	4813      	ldr	r0, [pc, #76]	; (8002238 <MX_TIM2_Init+0xa0>)
 80021ea:	f7ff fecd 	bl	8001f88 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ee:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f0:	4669      	mov	r1, sp
 80021f2:	4810      	ldr	r0, [pc, #64]	; (8002234 <MX_TIM2_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f6:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f8:	f7ff fd9c 	bl	8001d34 <HAL_TIMEx_MasterConfigSynchronization>
 80021fc:	b118      	cbz	r0, 8002206 <MX_TIM2_Init+0x6e>
    _Error_Handler(__FILE__, __LINE__);
 80021fe:	2179      	movs	r1, #121	; 0x79
 8002200:	480d      	ldr	r0, [pc, #52]	; (8002238 <MX_TIM2_Init+0xa0>)
 8002202:	f7ff fec1 	bl	8001f88 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002206:	2360      	movs	r3, #96	; 0x60
 8002208:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800220a:	2204      	movs	r2, #4
  sConfigOC.Pulse = 0;
 800220c:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800220e:	a907      	add	r1, sp, #28
 8002210:	4808      	ldr	r0, [pc, #32]	; (8002234 <MX_TIM2_Init+0x9c>)
  sConfigOC.Pulse = 0;
 8002212:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002214:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002216:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002218:	f7ff fd04 	bl	8001c24 <HAL_TIM_PWM_ConfigChannel>
 800221c:	b118      	cbz	r0, 8002226 <MX_TIM2_Init+0x8e>
    _Error_Handler(__FILE__, __LINE__);
 800221e:	2182      	movs	r1, #130	; 0x82
 8002220:	4805      	ldr	r0, [pc, #20]	; (8002238 <MX_TIM2_Init+0xa0>)
 8002222:	f7ff feb1 	bl	8001f88 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8002226:	4803      	ldr	r0, [pc, #12]	; (8002234 <MX_TIM2_Init+0x9c>)
 8002228:	f7ff ff9e 	bl	8002168 <HAL_TIM_MspPostInit>
}
 800222c:	b00f      	add	sp, #60	; 0x3c
 800222e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002232:	bf00      	nop
 8002234:	20000064 	.word	0x20000064
 8002238:	08002320 	.word	0x08002320

0800223c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800223c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002274 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002240:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002242:	e003      	b.n	800224c <LoopCopyDataInit>

08002244 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002246:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002248:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800224a:	3104      	adds	r1, #4

0800224c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800224c:	480b      	ldr	r0, [pc, #44]	; (800227c <LoopForever+0xa>)
	ldr	r3, =_edata
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002250:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002252:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002254:	d3f6      	bcc.n	8002244 <CopyDataInit>
	ldr	r2, =_sbss
 8002256:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002258:	e002      	b.n	8002260 <LoopFillZerobss>

0800225a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800225a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800225c:	f842 3b04 	str.w	r3, [r2], #4

08002260 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <LoopForever+0x16>)
	cmp	r2, r3
 8002262:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002264:	d3f9      	bcc.n	800225a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002266:	f7ff fedf 	bl	8002028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800226a:	f000 f811 	bl	8002290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800226e:	f7ff fe6f 	bl	8001f50 <main>

08002272 <LoopForever>:

LoopForever:
    b LoopForever
 8002272:	e7fe      	b.n	8002272 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002274:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002278:	08002338 	.word	0x08002338
	ldr	r0, =_sdata
 800227c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002280:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8002284:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8002288:	200000a4 	.word	0x200000a4

0800228c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800228c:	e7fe      	b.n	800228c <ADC1_2_IRQHandler>
	...

08002290 <__libc_init_array>:
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	4e0d      	ldr	r6, [pc, #52]	; (80022c8 <__libc_init_array+0x38>)
 8002294:	4c0d      	ldr	r4, [pc, #52]	; (80022cc <__libc_init_array+0x3c>)
 8002296:	1ba4      	subs	r4, r4, r6
 8002298:	10a4      	asrs	r4, r4, #2
 800229a:	2500      	movs	r5, #0
 800229c:	42a5      	cmp	r5, r4
 800229e:	d109      	bne.n	80022b4 <__libc_init_array+0x24>
 80022a0:	4e0b      	ldr	r6, [pc, #44]	; (80022d0 <__libc_init_array+0x40>)
 80022a2:	4c0c      	ldr	r4, [pc, #48]	; (80022d4 <__libc_init_array+0x44>)
 80022a4:	f000 f818 	bl	80022d8 <_init>
 80022a8:	1ba4      	subs	r4, r4, r6
 80022aa:	10a4      	asrs	r4, r4, #2
 80022ac:	2500      	movs	r5, #0
 80022ae:	42a5      	cmp	r5, r4
 80022b0:	d105      	bne.n	80022be <__libc_init_array+0x2e>
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
 80022b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022b8:	4798      	blx	r3
 80022ba:	3501      	adds	r5, #1
 80022bc:	e7ee      	b.n	800229c <__libc_init_array+0xc>
 80022be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022c2:	4798      	blx	r3
 80022c4:	3501      	adds	r5, #1
 80022c6:	e7f2      	b.n	80022ae <__libc_init_array+0x1e>
 80022c8:	08002330 	.word	0x08002330
 80022cc:	08002330 	.word	0x08002330
 80022d0:	08002330 	.word	0x08002330
 80022d4:	08002334 	.word	0x08002334

080022d8 <_init>:
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	bf00      	nop
 80022dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022de:	bc08      	pop	{r3}
 80022e0:	469e      	mov	lr, r3
 80022e2:	4770      	bx	lr

080022e4 <_fini>:
 80022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e6:	bf00      	nop
 80022e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ea:	bc08      	pop	{r3}
 80022ec:	469e      	mov	lr, r3
 80022ee:	4770      	bx	lr
