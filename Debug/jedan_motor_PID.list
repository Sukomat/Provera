
jedan_motor_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000309c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800322c  0800322c  0001322c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080032cc  080032cc  000132cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  080032d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
  7 .bss          00000128  20000068  20000068  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000190  20000190  00020068  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   000149dc  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000299c  00000000  00000000  00034a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006e1e  00000000  00000000  00037410  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000958  00000000  00000000  0003e230  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c68  00000000  00000000  0003eb88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000057e3  00000000  00000000  0003f7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000384e  00000000  00000000  00044fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00048821  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000207c  00000000  00000000  000488a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003214 	.word	0x08003214

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003214 	.word	0x08003214

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_InitTick+0x24>)
{
 8000b78:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000b7a:	6818      	ldr	r0, [r3, #0]
 8000b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b80:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b84:	f000 f880 	bl	8000c88 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4621      	mov	r1, r4
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f000 f846 	bl	8000c20 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000b94:	2000      	movs	r0, #0
 8000b96:	bd10      	pop	{r4, pc}
 8000b98:	20000000 	.word	0x20000000

08000b9c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_Init+0x20>)
{
 8000b9e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba0:	6813      	ldr	r3, [r2, #0]
 8000ba2:	f043 0310 	orr.w	r3, r3, #16
 8000ba6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f827 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff ffe0 	bl	8000b74 <HAL_InitTick>
  HAL_MspInit();
 8000bb4:	f001 fd00 	bl	80025b8 <HAL_MspInit>
}
 8000bb8:	2000      	movs	r0, #0
 8000bba:	bd08      	pop	{r3, pc}
 8000bbc:	40022000 	.word	0x40022000

08000bc0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000bc0:	4a02      	ldr	r2, [pc, #8]	; (8000bcc <HAL_IncTick+0xc>)
 8000bc2:	6813      	ldr	r3, [r2, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000098 	.word	0x20000098

08000bd0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000bd0:	4b01      	ldr	r3, [pc, #4]	; (8000bd8 <HAL_GetTick+0x8>)
 8000bd2:	6818      	ldr	r0, [r3, #0]
}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000098 	.word	0x20000098

08000bdc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000bde:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be0:	f7ff fff6 	bl	8000bd0 <HAL_GetTick>
  uint32_t wait = Delay;
 8000be4:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be6:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000be8:	4605      	mov	r5, r0
  {
     wait++;
 8000bea:	bf18      	it	ne
 8000bec:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bee:	f7ff ffef 	bl	8000bd0 <HAL_GetTick>
 8000bf2:	1b40      	subs	r0, r0, r5
 8000bf4:	42a0      	cmp	r0, r4
 8000bf6:	d3fa      	bcc.n	8000bee <HAL_Delay+0x12>
  {
  }
}
 8000bf8:	b003      	add	sp, #12
 8000bfa:	bd30      	pop	{r4, r5, pc}

08000bfc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bfe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c04:	041b      	lsls	r3, r3, #16
 8000c06:	0c1b      	lsrs	r3, r3, #16
 8000c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c0c:	0200      	lsls	r0, r0, #8
 8000c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c12:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000c16:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c18:	60d3      	str	r3, [r2, #12]
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c22:	b530      	push	{r4, r5, lr}
 8000c24:	68dc      	ldr	r4, [r3, #12]
 8000c26:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	bf28      	it	cs
 8000c34:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 0501 	mov.w	r5, #1
 8000c3c:	fa05 f303 	lsl.w	r3, r5, r3
 8000c40:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c44:	bf8c      	ite	hi
 8000c46:	3c03      	subhi	r4, #3
 8000c48:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4a:	4019      	ands	r1, r3
 8000c4c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4e:	fa05 f404 	lsl.w	r4, r5, r4
 8000c52:	3c01      	subs	r4, #1
 8000c54:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000c56:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	ea42 0201 	orr.w	r2, r2, r1
 8000c5c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	bfaf      	iteee	ge
 8000c62:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	f000 000f 	andlt.w	r0, r0, #15
 8000c6a:	4b06      	ldrlt	r3, [pc, #24]	; (8000c84 <HAL_NVIC_SetPriority+0x64>)
 8000c6c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	bfa5      	ittet	ge
 8000c70:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000c74:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c7c:	bd30      	pop	{r4, r5, pc}
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00
 8000c84:	e000ed14 	.word	0xe000ed14

08000c88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	3801      	subs	r0, #1
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d20a      	bcs.n	8000ca6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c94:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	21f0      	movs	r1, #240	; 0xf0
 8000c98:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ca6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cb6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000cb8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cba:	bf0c      	ite	eq
 8000cbc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cc0:	f022 0204 	bicne.w	r2, r2, #4
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ccc:	4770      	bx	lr

08000cce <HAL_SYSTICK_IRQHandler>:
{
 8000cce:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000cd0:	f7ff fffc 	bl	8000ccc <HAL_SYSTICK_Callback>
 8000cd4:	bd08      	pop	{r3, pc}
	...

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cdc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cde:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000e48 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ce4:	4a56      	ldr	r2, [pc, #344]	; (8000e40 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ce6:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000ce8:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000cec:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cee:	9c01      	ldr	r4, [sp, #4]
 8000cf0:	40dc      	lsrs	r4, r3
 8000cf2:	d102      	bne.n	8000cfa <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000cf4:	b005      	add	sp, #20
 8000cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cfa:	2401      	movs	r4, #1
 8000cfc:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000d00:	9c01      	ldr	r4, [sp, #4]
 8000d02:	ea14 050a 	ands.w	r5, r4, sl
 8000d06:	f000 8093 	beq.w	8000e30 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0a:	684c      	ldr	r4, [r1, #4]
 8000d0c:	f024 0b10 	bic.w	fp, r4, #16
 8000d10:	f1bb 0f02 	cmp.w	fp, #2
 8000d14:	d111      	bne.n	8000d3a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000d16:	08df      	lsrs	r7, r3, #3
 8000d18:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d1c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000d20:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d22:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000d26:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000d2a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d2e:	690e      	ldr	r6, [r1, #16]
 8000d30:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d34:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000d38:	623e      	str	r6, [r7, #32]
 8000d3a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d3e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000d40:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d42:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d46:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d48:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d4c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d4e:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d52:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d56:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d5a:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000d5e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d60:	d811      	bhi.n	8000d86 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000d62:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d64:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d68:	68ce      	ldr	r6, [r1, #12]
 8000d6a:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000d6e:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000d72:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d74:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d76:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d7a:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000d7e:	409e      	lsls	r6, r3
 8000d80:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000d84:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d86:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d88:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8a:	688e      	ldr	r6, [r1, #8]
 8000d8c:	fa06 f60c 	lsl.w	r6, r6, ip
 8000d90:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d92:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000d94:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d96:	d54b      	bpl.n	8000e30 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d98:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000d9c:	f046 0601 	orr.w	r6, r6, #1
 8000da0:	f8c8 6018 	str.w	r6, [r8, #24]
 8000da4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000da8:	f023 0703 	bic.w	r7, r3, #3
 8000dac:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000db0:	f006 0601 	and.w	r6, r6, #1
 8000db4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000db8:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000dba:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000dc0:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000dc2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000dc6:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dca:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000dce:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dd2:	d02f      	beq.n	8000e34 <HAL_GPIO_Init+0x15c>
 8000dd4:	4e1b      	ldr	r6, [pc, #108]	; (8000e44 <HAL_GPIO_Init+0x16c>)
 8000dd6:	42b0      	cmp	r0, r6
 8000dd8:	d02e      	beq.n	8000e38 <HAL_GPIO_Init+0x160>
 8000dda:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000dde:	42b0      	cmp	r0, r6
 8000de0:	d02c      	beq.n	8000e3c <HAL_GPIO_Init+0x164>
 8000de2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000de6:	42b0      	cmp	r0, r6
 8000de8:	bf14      	ite	ne
 8000dea:	2605      	movne	r6, #5
 8000dec:	2603      	moveq	r6, #3
 8000dee:	fa06 f60e 	lsl.w	r6, r6, lr
 8000df2:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000df6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000df8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e00:	bf0c      	ite	eq
 8000e02:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e04:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000e06:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000e08:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e0a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e0e:	bf0c      	ite	eq
 8000e10:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e12:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000e14:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000e16:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e18:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e1c:	bf0c      	ite	eq
 8000e1e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e20:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000e22:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000e24:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e26:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000e28:	bf54      	ite	pl
 8000e2a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000e2c:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000e2e:	60d6      	str	r6, [r2, #12]
    position++;
 8000e30:	3301      	adds	r3, #1
 8000e32:	e75c      	b.n	8000cee <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e34:	2600      	movs	r6, #0
 8000e36:	e7da      	b.n	8000dee <HAL_GPIO_Init+0x116>
 8000e38:	2601      	movs	r6, #1
 8000e3a:	e7d8      	b.n	8000dee <HAL_GPIO_Init+0x116>
 8000e3c:	2602      	movs	r6, #2
 8000e3e:	e7d6      	b.n	8000dee <HAL_GPIO_Init+0x116>
 8000e40:	40010400 	.word	0x40010400
 8000e44:	48000400 	.word	0x48000400
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e4c:	b10a      	cbz	r2, 8000e52 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e4e:	6181      	str	r1, [r0, #24]
 8000e50:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e52:	6281      	str	r1, [r0, #40]	; 0x28
 8000e54:	4770      	bx	lr
	...

08000e58 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e58:	6803      	ldr	r3, [r0, #0]
 8000e5a:	07da      	lsls	r2, r3, #31
{
 8000e5c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e60:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e62:	d411      	bmi.n	8000e88 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e64:	682b      	ldr	r3, [r5, #0]
 8000e66:	079b      	lsls	r3, r3, #30
 8000e68:	f100 8088 	bmi.w	8000f7c <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e6c:	682b      	ldr	r3, [r5, #0]
 8000e6e:	071c      	lsls	r4, r3, #28
 8000e70:	f100 80f8 	bmi.w	8001064 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	0758      	lsls	r0, r3, #29
 8000e78:	f100 8141 	bmi.w	80010fe <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e7c:	69ea      	ldr	r2, [r5, #28]
 8000e7e:	2a00      	cmp	r2, #0
 8000e80:	f040 81d7 	bne.w	8001232 <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000e84:	2000      	movs	r0, #0
 8000e86:	e021      	b.n	8000ecc <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e88:	4cba      	ldr	r4, [pc, #744]	; (8001174 <HAL_RCC_OscConfig+0x31c>)
 8000e8a:	6863      	ldr	r3, [r4, #4]
 8000e8c:	f003 030c 	and.w	r3, r3, #12
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d007      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e94:	6863      	ldr	r3, [r4, #4]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d119      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x7a>
 8000e9e:	6863      	ldr	r3, [r4, #4]
 8000ea0:	03df      	lsls	r7, r3, #15
 8000ea2:	d516      	bpl.n	8000ed2 <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eac:	6821      	ldr	r1, [r4, #0]
 8000eae:	fa93 f3a3 	rbit	r3, r3
 8000eb2:	fab3 f383 	clz	r3, r3
 8000eb6:	f003 031f 	and.w	r3, r3, #31
 8000eba:	2201      	movs	r2, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	420b      	tst	r3, r1
 8000ec2:	d0cf      	beq.n	8000e64 <HAL_RCC_OscConfig+0xc>
 8000ec4:	686b      	ldr	r3, [r5, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1cc      	bne.n	8000e64 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000eca:	2001      	movs	r0, #1
}
 8000ecc:	b002      	add	sp, #8
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed2:	686a      	ldr	r2, [r5, #4]
 8000ed4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000ed8:	d125      	bne.n	8000f26 <HAL_RCC_OscConfig+0xce>
 8000eda:	6823      	ldr	r3, [r4, #0]
 8000edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee0:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ee2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ee4:	68a9      	ldr	r1, [r5, #8]
 8000ee6:	f023 030f 	bic.w	r3, r3, #15
 8000eea:	430b      	orrs	r3, r1
 8000eec:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eee:	b352      	cbz	r2, 8000f46 <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fe6e 	bl	8000bd0 <HAL_GetTick>
 8000ef4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ef8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efa:	2701      	movs	r7, #1
 8000efc:	fa96 f3a6 	rbit	r3, r6
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	fa96 f3a6 	rbit	r3, r6
 8000f06:	fab3 f383 	clz	r3, r3
 8000f0a:	f003 031f 	and.w	r3, r3, #31
 8000f0e:	fa07 f303 	lsl.w	r3, r7, r3
 8000f12:	4213      	tst	r3, r2
 8000f14:	d1a6      	bne.n	8000e64 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f16:	f7ff fe5b 	bl	8000bd0 <HAL_GetTick>
 8000f1a:	eba0 0008 	sub.w	r0, r0, r8
 8000f1e:	2864      	cmp	r0, #100	; 0x64
 8000f20:	d9ec      	bls.n	8000efc <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000f22:	2003      	movs	r0, #3
 8000f24:	e7d2      	b.n	8000ecc <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	b932      	cbnz	r2, 8000f38 <HAL_RCC_OscConfig+0xe0>
 8000f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2e:	6023      	str	r3, [r4, #0]
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f36:	e7d3      	b.n	8000ee0 <HAL_RCC_OscConfig+0x88>
 8000f38:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000f3c:	d1f5      	bne.n	8000f2a <HAL_RCC_OscConfig+0xd2>
 8000f3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f42:	6023      	str	r3, [r4, #0]
 8000f44:	e7c9      	b.n	8000eda <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000f46:	f7ff fe43 	bl	8000bd0 <HAL_GetTick>
 8000f4a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000f4e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f50:	2701      	movs	r7, #1
 8000f52:	fa96 f3a6 	rbit	r3, r6
 8000f56:	6822      	ldr	r2, [r4, #0]
 8000f58:	fa96 f3a6 	rbit	r3, r6
 8000f5c:	fab3 f383 	clz	r3, r3
 8000f60:	f003 031f 	and.w	r3, r3, #31
 8000f64:	fa07 f303 	lsl.w	r3, r7, r3
 8000f68:	4213      	tst	r3, r2
 8000f6a:	f43f af7b 	beq.w	8000e64 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f6e:	f7ff fe2f 	bl	8000bd0 <HAL_GetTick>
 8000f72:	eba0 0008 	sub.w	r0, r0, r8
 8000f76:	2864      	cmp	r0, #100	; 0x64
 8000f78:	d9eb      	bls.n	8000f52 <HAL_RCC_OscConfig+0xfa>
 8000f7a:	e7d2      	b.n	8000f22 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f7c:	4c7d      	ldr	r4, [pc, #500]	; (8001174 <HAL_RCC_OscConfig+0x31c>)
 8000f7e:	6863      	ldr	r3, [r4, #4]
 8000f80:	f013 0f0c 	tst.w	r3, #12
 8000f84:	d007      	beq.n	8000f96 <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f86:	6863      	ldr	r3, [r4, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d121      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x17c>
 8000f90:	6863      	ldr	r3, [r4, #4]
 8000f92:	03de      	lsls	r6, r3, #15
 8000f94:	d41e      	bmi.n	8000fd4 <HAL_RCC_OscConfig+0x17c>
 8000f96:	2302      	movs	r3, #2
 8000f98:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9c:	6821      	ldr	r1, [r4, #0]
 8000f9e:	fa93 f3a3 	rbit	r3, r3
 8000fa2:	fab3 f383 	clz	r3, r3
 8000fa6:	f003 031f 	and.w	r3, r3, #31
 8000faa:	2201      	movs	r2, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	420b      	tst	r3, r1
 8000fb2:	d002      	beq.n	8000fba <HAL_RCC_OscConfig+0x162>
 8000fb4:	692b      	ldr	r3, [r5, #16]
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d187      	bne.n	8000eca <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fba:	6821      	ldr	r1, [r4, #0]
 8000fbc:	23f8      	movs	r3, #248	; 0xf8
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	fab3 f283 	clz	r2, r3
 8000fc6:	696b      	ldr	r3, [r5, #20]
 8000fc8:	4093      	lsls	r3, r2
 8000fca:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	6023      	str	r3, [r4, #0]
 8000fd2:	e74b      	b.n	8000e6c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fd4:	692a      	ldr	r2, [r5, #16]
 8000fd6:	2601      	movs	r6, #1
 8000fd8:	b30a      	cbz	r2, 800101e <HAL_RCC_OscConfig+0x1c6>
 8000fda:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000fde:	fab3 f383 	clz	r3, r3
 8000fe2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fe6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	2702      	movs	r7, #2
 8000fee:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fdee 	bl	8000bd0 <HAL_GetTick>
 8000ff4:	4680      	mov	r8, r0
 8000ff6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffa:	6822      	ldr	r2, [r4, #0]
 8000ffc:	fa97 f3a7 	rbit	r3, r7
 8001000:	fab3 f383 	clz	r3, r3
 8001004:	f003 031f 	and.w	r3, r3, #31
 8001008:	fa06 f303 	lsl.w	r3, r6, r3
 800100c:	4213      	tst	r3, r2
 800100e:	d1d4      	bne.n	8000fba <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001010:	f7ff fdde 	bl	8000bd0 <HAL_GetTick>
 8001014:	eba0 0008 	sub.w	r0, r0, r8
 8001018:	2802      	cmp	r0, #2
 800101a:	d9ec      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x19e>
 800101c:	e781      	b.n	8000f22 <HAL_RCC_OscConfig+0xca>
 800101e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001022:	fab3 f383 	clz	r3, r3
 8001026:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800102a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	2702      	movs	r7, #2
 8001032:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001034:	f7ff fdcc 	bl	8000bd0 <HAL_GetTick>
 8001038:	4680      	mov	r8, r0
 800103a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103e:	6822      	ldr	r2, [r4, #0]
 8001040:	fa97 f3a7 	rbit	r3, r7
 8001044:	fab3 f383 	clz	r3, r3
 8001048:	f003 031f 	and.w	r3, r3, #31
 800104c:	fa06 f303 	lsl.w	r3, r6, r3
 8001050:	4213      	tst	r3, r2
 8001052:	f43f af0b 	beq.w	8000e6c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001056:	f7ff fdbb 	bl	8000bd0 <HAL_GetTick>
 800105a:	eba0 0008 	sub.w	r0, r0, r8
 800105e:	2802      	cmp	r0, #2
 8001060:	d9eb      	bls.n	800103a <HAL_RCC_OscConfig+0x1e2>
 8001062:	e75e      	b.n	8000f22 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001064:	69aa      	ldr	r2, [r5, #24]
 8001066:	4e43      	ldr	r6, [pc, #268]	; (8001174 <HAL_RCC_OscConfig+0x31c>)
 8001068:	4943      	ldr	r1, [pc, #268]	; (8001178 <HAL_RCC_OscConfig+0x320>)
 800106a:	2401      	movs	r4, #1
 800106c:	b31a      	cbz	r2, 80010b6 <HAL_RCC_OscConfig+0x25e>
 800106e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001072:	fab3 f383 	clz	r3, r3
 8001076:	440b      	add	r3, r1
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	2702      	movs	r7, #2
 800107c:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800107e:	f7ff fda7 	bl	8000bd0 <HAL_GetTick>
 8001082:	4680      	mov	r8, r0
 8001084:	fa97 f3a7 	rbit	r3, r7
 8001088:	fa97 f3a7 	rbit	r3, r7
 800108c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001090:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001092:	fa97 f3a7 	rbit	r3, r7
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	fa04 f303 	lsl.w	r3, r4, r3
 80010a2:	4213      	tst	r3, r2
 80010a4:	f47f aee6 	bne.w	8000e74 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010a8:	f7ff fd92 	bl	8000bd0 <HAL_GetTick>
 80010ac:	eba0 0008 	sub.w	r0, r0, r8
 80010b0:	2802      	cmp	r0, #2
 80010b2:	d9e7      	bls.n	8001084 <HAL_RCC_OscConfig+0x22c>
 80010b4:	e735      	b.n	8000f22 <HAL_RCC_OscConfig+0xca>
 80010b6:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80010ba:	fab3 f383 	clz	r3, r3
 80010be:	440b      	add	r3, r1
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	2702      	movs	r7, #2
 80010c4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80010c6:	f7ff fd83 	bl	8000bd0 <HAL_GetTick>
 80010ca:	4680      	mov	r8, r0
 80010cc:	fa97 f3a7 	rbit	r3, r7
 80010d0:	fa97 f3a7 	rbit	r3, r7
 80010d4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80010da:	fa97 f3a7 	rbit	r3, r7
 80010de:	fab3 f383 	clz	r3, r3
 80010e2:	f003 031f 	and.w	r3, r3, #31
 80010e6:	fa04 f303 	lsl.w	r3, r4, r3
 80010ea:	4213      	tst	r3, r2
 80010ec:	f43f aec2 	beq.w	8000e74 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010f0:	f7ff fd6e 	bl	8000bd0 <HAL_GetTick>
 80010f4:	eba0 0008 	sub.w	r0, r0, r8
 80010f8:	2802      	cmp	r0, #2
 80010fa:	d9e7      	bls.n	80010cc <HAL_RCC_OscConfig+0x274>
 80010fc:	e711      	b.n	8000f22 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010fe:	4c1d      	ldr	r4, [pc, #116]	; (8001174 <HAL_RCC_OscConfig+0x31c>)
 8001100:	69e3      	ldr	r3, [r4, #28]
 8001102:	00d9      	lsls	r1, r3, #3
 8001104:	d434      	bmi.n	8001170 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	69e3      	ldr	r3, [r4, #28]
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	61e3      	str	r3, [r4, #28]
 800110e:	69e3      	ldr	r3, [r4, #28]
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001118:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111a:	4f18      	ldr	r7, [pc, #96]	; (800117c <HAL_RCC_OscConfig+0x324>)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	05da      	lsls	r2, r3, #23
 8001120:	d52e      	bpl.n	8001180 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001122:	68eb      	ldr	r3, [r5, #12]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d13c      	bne.n	80011a2 <HAL_RCC_OscConfig+0x34a>
 8001128:	6a23      	ldr	r3, [r4, #32]
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001130:	f7ff fd4e 	bl	8000bd0 <HAL_GetTick>
 8001134:	2702      	movs	r7, #2
 8001136:	4682      	mov	sl, r0
 8001138:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800113a:	f04f 0801 	mov.w	r8, #1
 800113e:	fa97 f3a7 	rbit	r3, r7
 8001142:	fa97 f3a7 	rbit	r3, r7
 8001146:	2b00      	cmp	r3, #0
 8001148:	d06b      	beq.n	8001222 <HAL_RCC_OscConfig+0x3ca>
 800114a:	6a22      	ldr	r2, [r4, #32]
 800114c:	fa99 f3a9 	rbit	r3, r9
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	f003 031f 	and.w	r3, r3, #31
 8001158:	fa08 f303 	lsl.w	r3, r8, r3
 800115c:	4213      	tst	r3, r2
 800115e:	d057      	beq.n	8001210 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8001160:	2e00      	cmp	r6, #0
 8001162:	f43f ae8b 	beq.w	8000e7c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001166:	69e3      	ldr	r3, [r4, #28]
 8001168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800116c:	61e3      	str	r3, [r4, #28]
 800116e:	e685      	b.n	8000e7c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001170:	2600      	movs	r6, #0
 8001172:	e7d2      	b.n	800111a <HAL_RCC_OscConfig+0x2c2>
 8001174:	40021000 	.word	0x40021000
 8001178:	10908120 	.word	0x10908120
 800117c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001186:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001188:	f7ff fd22 	bl	8000bd0 <HAL_GetTick>
 800118c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	05db      	lsls	r3, r3, #23
 8001192:	d4c6      	bmi.n	8001122 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001194:	f7ff fd1c 	bl	8000bd0 <HAL_GetTick>
 8001198:	eba0 0008 	sub.w	r0, r0, r8
 800119c:	2864      	cmp	r0, #100	; 0x64
 800119e:	d9f6      	bls.n	800118e <HAL_RCC_OscConfig+0x336>
 80011a0:	e6bf      	b.n	8000f22 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a2:	bb3b      	cbnz	r3, 80011f4 <HAL_RCC_OscConfig+0x39c>
 80011a4:	6a23      	ldr	r3, [r4, #32]
 80011a6:	f023 0301 	bic.w	r3, r3, #1
 80011aa:	6223      	str	r3, [r4, #32]
 80011ac:	6a23      	ldr	r3, [r4, #32]
 80011ae:	f023 0304 	bic.w	r3, r3, #4
 80011b2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80011b4:	f7ff fd0c 	bl	8000bd0 <HAL_GetTick>
 80011b8:	2702      	movs	r7, #2
 80011ba:	4682      	mov	sl, r0
 80011bc:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011be:	f04f 0801 	mov.w	r8, #1
 80011c2:	fa97 f3a7 	rbit	r3, r7
 80011c6:	fa97 f3a7 	rbit	r3, r7
 80011ca:	b373      	cbz	r3, 800122a <HAL_RCC_OscConfig+0x3d2>
 80011cc:	6a22      	ldr	r2, [r4, #32]
 80011ce:	fa99 f3a9 	rbit	r3, r9
 80011d2:	fab3 f383 	clz	r3, r3
 80011d6:	f003 031f 	and.w	r3, r3, #31
 80011da:	fa08 f303 	lsl.w	r3, r8, r3
 80011de:	4213      	tst	r3, r2
 80011e0:	d0be      	beq.n	8001160 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e2:	f7ff fcf5 	bl	8000bd0 <HAL_GetTick>
 80011e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80011ea:	eba0 000a 	sub.w	r0, r0, sl
 80011ee:	4298      	cmp	r0, r3
 80011f0:	d9e7      	bls.n	80011c2 <HAL_RCC_OscConfig+0x36a>
 80011f2:	e696      	b.n	8000f22 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	6a23      	ldr	r3, [r4, #32]
 80011f8:	d103      	bne.n	8001202 <HAL_RCC_OscConfig+0x3aa>
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	6223      	str	r3, [r4, #32]
 8001200:	e792      	b.n	8001128 <HAL_RCC_OscConfig+0x2d0>
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	6223      	str	r3, [r4, #32]
 8001208:	6a23      	ldr	r3, [r4, #32]
 800120a:	f023 0304 	bic.w	r3, r3, #4
 800120e:	e78e      	b.n	800112e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001210:	f7ff fcde 	bl	8000bd0 <HAL_GetTick>
 8001214:	f241 3388 	movw	r3, #5000	; 0x1388
 8001218:	eba0 000a 	sub.w	r0, r0, sl
 800121c:	4298      	cmp	r0, r3
 800121e:	d98e      	bls.n	800113e <HAL_RCC_OscConfig+0x2e6>
 8001220:	e67f      	b.n	8000f22 <HAL_RCC_OscConfig+0xca>
 8001222:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001226:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001228:	e790      	b.n	800114c <HAL_RCC_OscConfig+0x2f4>
 800122a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800122e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001230:	e7cd      	b.n	80011ce <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001232:	4c41      	ldr	r4, [pc, #260]	; (8001338 <HAL_RCC_OscConfig+0x4e0>)
 8001234:	6863      	ldr	r3, [r4, #4]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b08      	cmp	r3, #8
 800123c:	f43f ae45 	beq.w	8000eca <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001240:	2a02      	cmp	r2, #2
 8001242:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001246:	d152      	bne.n	80012ee <HAL_RCC_OscConfig+0x496>
 8001248:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800124c:	fab3 f383 	clz	r3, r3
 8001250:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001254:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800125e:	f7ff fcb7 	bl	8000bd0 <HAL_GetTick>
 8001262:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001266:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001268:	2601      	movs	r6, #1
 800126a:	fa97 f3a7 	rbit	r3, r7
 800126e:	6822      	ldr	r2, [r4, #0]
 8001270:	fa97 f3a7 	rbit	r3, r7
 8001274:	fab3 f383 	clz	r3, r3
 8001278:	f003 031f 	and.w	r3, r3, #31
 800127c:	fa06 f303 	lsl.w	r3, r6, r3
 8001280:	4213      	tst	r3, r2
 8001282:	d12d      	bne.n	80012e0 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001284:	6862      	ldr	r2, [r4, #4]
 8001286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001288:	6a29      	ldr	r1, [r5, #32]
 800128a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800128e:	430b      	orrs	r3, r1
 8001290:	4313      	orrs	r3, r2
 8001292:	6063      	str	r3, [r4, #4]
 8001294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001298:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800129c:	fab3 f383 	clz	r3, r3
 80012a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80012ae:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80012b0:	f7ff fc8e 	bl	8000bd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b4:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80012b6:	4607      	mov	r7, r0
 80012b8:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012bc:	6822      	ldr	r2, [r4, #0]
 80012be:	fa95 f3a5 	rbit	r3, r5
 80012c2:	fab3 f383 	clz	r3, r3
 80012c6:	f003 031f 	and.w	r3, r3, #31
 80012ca:	fa06 f303 	lsl.w	r3, r6, r3
 80012ce:	4213      	tst	r3, r2
 80012d0:	f47f add8 	bne.w	8000e84 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d4:	f7ff fc7c 	bl	8000bd0 <HAL_GetTick>
 80012d8:	1bc0      	subs	r0, r0, r7
 80012da:	2802      	cmp	r0, #2
 80012dc:	d9ec      	bls.n	80012b8 <HAL_RCC_OscConfig+0x460>
 80012de:	e620      	b.n	8000f22 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e0:	f7ff fc76 	bl	8000bd0 <HAL_GetTick>
 80012e4:	eba0 0008 	sub.w	r0, r0, r8
 80012e8:	2802      	cmp	r0, #2
 80012ea:	d9be      	bls.n	800126a <HAL_RCC_OscConfig+0x412>
 80012ec:	e619      	b.n	8000f22 <HAL_RCC_OscConfig+0xca>
 80012ee:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001304:	f7ff fc64 	bl	8000bd0 <HAL_GetTick>
 8001308:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800130c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130e:	2601      	movs	r6, #1
 8001310:	fa95 f3a5 	rbit	r3, r5
 8001314:	6822      	ldr	r2, [r4, #0]
 8001316:	fa95 f3a5 	rbit	r3, r5
 800131a:	fab3 f383 	clz	r3, r3
 800131e:	f003 031f 	and.w	r3, r3, #31
 8001322:	fa06 f303 	lsl.w	r3, r6, r3
 8001326:	4213      	tst	r3, r2
 8001328:	f43f adac 	beq.w	8000e84 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800132c:	f7ff fc50 	bl	8000bd0 <HAL_GetTick>
 8001330:	1bc0      	subs	r0, r0, r7
 8001332:	2802      	cmp	r0, #2
 8001334:	d9ec      	bls.n	8001310 <HAL_RCC_OscConfig+0x4b8>
 8001336:	e5f4      	b.n	8000f22 <HAL_RCC_OscConfig+0xca>
 8001338:	40021000 	.word	0x40021000

0800133c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800133c:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800133e:	4c13      	ldr	r4, [pc, #76]	; (800138c <HAL_RCC_GetSysClockFreq+0x50>)
 8001340:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001342:	f001 030c 	and.w	r3, r1, #12
 8001346:	2b08      	cmp	r3, #8
 8001348:	d11e      	bne.n	8001388 <HAL_RCC_GetSysClockFreq+0x4c>
 800134a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800134e:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001352:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <HAL_RCC_GetSysClockFreq+0x54>)
 8001360:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001362:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001364:	220f      	movs	r2, #15
 8001366:	fa92 f2a2 	rbit	r2, r2
 800136a:	fab2 f282 	clz	r2, r2
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	40d3      	lsrs	r3, r2
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_RCC_GetSysClockFreq+0x58>)
 8001376:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001378:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800137a:	bf4a      	itet	mi
 800137c:	4b06      	ldrmi	r3, [pc, #24]	; (8001398 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800137e:	4b07      	ldrpl	r3, [pc, #28]	; (800139c <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001380:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001384:	4358      	muls	r0, r3
 8001386:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800138a:	bd10      	pop	{r4, pc}
 800138c:	40021000 	.word	0x40021000
 8001390:	0800322c 	.word	0x0800322c
 8001394:	0800323c 	.word	0x0800323c
 8001398:	007a1200 	.word	0x007a1200
 800139c:	003d0900 	.word	0x003d0900

080013a0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013a0:	4a5c      	ldr	r2, [pc, #368]	; (8001514 <HAL_RCC_ClockConfig+0x174>)
 80013a2:	6813      	ldr	r3, [r2, #0]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	428b      	cmp	r3, r1
{
 80013aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ae:	4606      	mov	r6, r0
 80013b0:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013b2:	d330      	bcc.n	8001416 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b4:	6832      	ldr	r2, [r6, #0]
 80013b6:	0791      	lsls	r1, r2, #30
 80013b8:	d43a      	bmi.n	8001430 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ba:	07d2      	lsls	r2, r2, #31
 80013bc:	d440      	bmi.n	8001440 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80013be:	4a55      	ldr	r2, [pc, #340]	; (8001514 <HAL_RCC_ClockConfig+0x174>)
 80013c0:	6813      	ldr	r3, [r2, #0]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	429d      	cmp	r5, r3
 80013c8:	f0c0 8092 	bcc.w	80014f0 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	6832      	ldr	r2, [r6, #0]
 80013ce:	4c52      	ldr	r4, [pc, #328]	; (8001518 <HAL_RCC_ClockConfig+0x178>)
 80013d0:	f012 0f04 	tst.w	r2, #4
 80013d4:	f040 8097 	bne.w	8001506 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d8:	0713      	lsls	r3, r2, #28
 80013da:	d506      	bpl.n	80013ea <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013dc:	6863      	ldr	r3, [r4, #4]
 80013de:	6932      	ldr	r2, [r6, #16]
 80013e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80013e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013e8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013ea:	f7ff ffa7 	bl	800133c <HAL_RCC_GetSysClockFreq>
 80013ee:	6863      	ldr	r3, [r4, #4]
 80013f0:	22f0      	movs	r2, #240	; 0xf0
 80013f2:	fa92 f2a2 	rbit	r2, r2
 80013f6:	fab2 f282 	clz	r2, r2
 80013fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013fe:	40d3      	lsrs	r3, r2
 8001400:	4a46      	ldr	r2, [pc, #280]	; (800151c <HAL_RCC_ClockConfig+0x17c>)
 8001402:	5cd3      	ldrb	r3, [r2, r3]
 8001404:	40d8      	lsrs	r0, r3
 8001406:	4b46      	ldr	r3, [pc, #280]	; (8001520 <HAL_RCC_ClockConfig+0x180>)
 8001408:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff fbb2 	bl	8000b74 <HAL_InitTick>
  return HAL_OK;
 8001410:	2000      	movs	r0, #0
}
 8001412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001416:	6813      	ldr	r3, [r2, #0]
 8001418:	f023 0307 	bic.w	r3, r3, #7
 800141c:	430b      	orrs	r3, r1
 800141e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001420:	6813      	ldr	r3, [r2, #0]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	4299      	cmp	r1, r3
 8001428:	d0c4      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800142a:	2001      	movs	r0, #1
 800142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001430:	4939      	ldr	r1, [pc, #228]	; (8001518 <HAL_RCC_ClockConfig+0x178>)
 8001432:	68b0      	ldr	r0, [r6, #8]
 8001434:	684b      	ldr	r3, [r1, #4]
 8001436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800143a:	4303      	orrs	r3, r0
 800143c:	604b      	str	r3, [r1, #4]
 800143e:	e7bc      	b.n	80013ba <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001440:	6872      	ldr	r2, [r6, #4]
 8001442:	4c35      	ldr	r4, [pc, #212]	; (8001518 <HAL_RCC_ClockConfig+0x178>)
 8001444:	2a01      	cmp	r2, #1
 8001446:	d128      	bne.n	800149a <HAL_RCC_ClockConfig+0xfa>
 8001448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800144c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001450:	6821      	ldr	r1, [r4, #0]
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	d0e1      	beq.n	800142a <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001466:	6863      	ldr	r3, [r4, #4]
 8001468:	f023 0303 	bic.w	r3, r3, #3
 800146c:	431a      	orrs	r2, r3
 800146e:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001470:	f7ff fbae 	bl	8000bd0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001474:	6873      	ldr	r3, [r6, #4]
 8001476:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001478:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147e:	d11f      	bne.n	80014c0 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001480:	6863      	ldr	r3, [r4, #4]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b04      	cmp	r3, #4
 8001488:	d099      	beq.n	80013be <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800148a:	f7ff fba1 	bl	8000bd0 <HAL_GetTick>
 800148e:	1bc0      	subs	r0, r0, r7
 8001490:	4540      	cmp	r0, r8
 8001492:	d9f5      	bls.n	8001480 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8001494:	2003      	movs	r0, #3
 8001496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800149a:	2a02      	cmp	r2, #2
 800149c:	bf0c      	ite	eq
 800149e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80014a2:	2302      	movne	r3, #2
 80014a4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	6820      	ldr	r0, [r4, #0]
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	fab3 f383 	clz	r3, r3
 80014b2:	f003 031f 	and.w	r3, r3, #31
 80014b6:	2101      	movs	r1, #1
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	4203      	tst	r3, r0
 80014be:	e7d1      	b.n	8001464 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d110      	bne.n	80014e6 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c4:	6863      	ldr	r3, [r4, #4]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	f43f af77 	beq.w	80013be <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d0:	f7ff fb7e 	bl	8000bd0 <HAL_GetTick>
 80014d4:	1bc0      	subs	r0, r0, r7
 80014d6:	4540      	cmp	r0, r8
 80014d8:	d9f4      	bls.n	80014c4 <HAL_RCC_ClockConfig+0x124>
 80014da:	e7db      	b.n	8001494 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014dc:	f7ff fb78 	bl	8000bd0 <HAL_GetTick>
 80014e0:	1bc0      	subs	r0, r0, r7
 80014e2:	4540      	cmp	r0, r8
 80014e4:	d8d6      	bhi.n	8001494 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e6:	6863      	ldr	r3, [r4, #4]
 80014e8:	f013 0f0c 	tst.w	r3, #12
 80014ec:	d1f6      	bne.n	80014dc <HAL_RCC_ClockConfig+0x13c>
 80014ee:	e766      	b.n	80013be <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f0:	6813      	ldr	r3, [r2, #0]
 80014f2:	f023 0307 	bic.w	r3, r3, #7
 80014f6:	432b      	orrs	r3, r5
 80014f8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014fa:	6813      	ldr	r3, [r2, #0]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	429d      	cmp	r5, r3
 8001502:	d192      	bne.n	800142a <HAL_RCC_ClockConfig+0x8a>
 8001504:	e762      	b.n	80013cc <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001506:	6863      	ldr	r3, [r4, #4]
 8001508:	68f1      	ldr	r1, [r6, #12]
 800150a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800150e:	430b      	orrs	r3, r1
 8001510:	6063      	str	r3, [r4, #4]
 8001512:	e761      	b.n	80013d8 <HAL_RCC_ClockConfig+0x38>
 8001514:	40022000 	.word	0x40022000
 8001518:	40021000 	.word	0x40021000
 800151c:	0800325e 	.word	0x0800325e
 8001520:	20000000 	.word	0x20000000

08001524 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001524:	4b01      	ldr	r3, [pc, #4]	; (800152c <HAL_RCC_GetHCLKFreq+0x8>)
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000000 	.word	0x20000000

08001530 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001532:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	fa92 f2a2 	rbit	r2, r2
 800153c:	fab2 f282 	clz	r2, r2
 8001540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001544:	40d3      	lsrs	r3, r2
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001548:	5cd3      	ldrb	r3, [r2, r3]
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800154c:	6810      	ldr	r0, [r2, #0]
}    
 800154e:	40d8      	lsrs	r0, r3
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	0800326e 	.word	0x0800326e
 800155c:	20000000 	.word	0x20000000

08001560 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001562:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	fa92 f2a2 	rbit	r2, r2
 800156c:	fab2 f282 	clz	r2, r2
 8001570:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001574:	40d3      	lsrs	r3, r2
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800157c:	6810      	ldr	r0, [r2, #0]
} 
 800157e:	40d8      	lsrs	r0, r3
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	0800326e 	.word	0x0800326e
 800158c:	20000000 	.word	0x20000000

08001590 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001590:	6803      	ldr	r3, [r0, #0]
{
 8001592:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001596:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001598:	03d8      	lsls	r0, r3, #15
 800159a:	d520      	bpl.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159c:	4c50      	ldr	r4, [pc, #320]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800159e:	69e3      	ldr	r3, [r4, #28]
 80015a0:	00d9      	lsls	r1, r3, #3
 80015a2:	d444      	bmi.n	800162e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a4:	69e3      	ldr	r3, [r4, #28]
 80015a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015aa:	61e3      	str	r3, [r4, #28]
 80015ac:	69e3      	ldr	r3, [r4, #28]
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015b6:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b8:	4f4a      	ldr	r7, [pc, #296]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	05da      	lsls	r2, r3, #23
 80015be:	d538      	bpl.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015c0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015c2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80015c6:	d148      	bne.n	800165a <HAL_RCCEx_PeriphCLKConfig+0xca>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80015c8:	6a23      	ldr	r3, [r4, #32]
 80015ca:	686a      	ldr	r2, [r5, #4]
 80015cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015d0:	4313      	orrs	r3, r2
 80015d2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015d4:	b11e      	cbz	r6, 80015de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d6:	69e3      	ldr	r3, [r4, #28]
 80015d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015dc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80015de:	6828      	ldr	r0, [r5, #0]
 80015e0:	07c1      	lsls	r1, r0, #31
 80015e2:	d506      	bpl.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015e4:	4a3e      	ldr	r2, [pc, #248]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80015e6:	68a9      	ldr	r1, [r5, #8]
 80015e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015ea:	f023 0303 	bic.w	r3, r3, #3
 80015ee:	430b      	orrs	r3, r1
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015f2:	0682      	lsls	r2, r0, #26
 80015f4:	d506      	bpl.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015f6:	4a3a      	ldr	r2, [pc, #232]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80015f8:	68e9      	ldr	r1, [r5, #12]
 80015fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015fc:	f023 0310 	bic.w	r3, r3, #16
 8001600:	430b      	orrs	r3, r1
 8001602:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001604:	0603      	lsls	r3, r0, #24
 8001606:	d506      	bpl.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001608:	4a35      	ldr	r2, [pc, #212]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800160a:	6929      	ldr	r1, [r5, #16]
 800160c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800160e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001612:	430b      	orrs	r3, r1
 8001614:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001616:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800161a:	d01b      	beq.n	8001654 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800161c:	4a30      	ldr	r2, [pc, #192]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800161e:	6969      	ldr	r1, [r5, #20]
 8001620:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001622:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001626:	430b      	orrs	r3, r1
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800162a:	2000      	movs	r0, #0
 800162c:	e012      	b.n	8001654 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;
 800162e:	2600      	movs	r6, #0
 8001630:	e7c2      	b.n	80015b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800163a:	f7ff fac9 	bl	8000bd0 <HAL_GetTick>
 800163e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	05db      	lsls	r3, r3, #23
 8001644:	d4bc      	bmi.n	80015c0 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001646:	f7ff fac3 	bl	8000bd0 <HAL_GetTick>
 800164a:	eba0 0008 	sub.w	r0, r0, r8
 800164e:	2864      	cmp	r0, #100	; 0x64
 8001650:	d9f6      	bls.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 8001652:	2003      	movs	r0, #3
}
 8001654:	b002      	add	sp, #8
 8001656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800165a:	686a      	ldr	r2, [r5, #4]
 800165c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001660:	4293      	cmp	r3, r2
 8001662:	d0b1      	beq.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001664:	6a21      	ldr	r1, [r4, #32]
 8001666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166a:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800166e:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001672:	f8df e074 	ldr.w	lr, [pc, #116]	; 80016e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8001676:	fab2 f282 	clz	r2, r2
 800167a:	4472      	add	r2, lr
 800167c:	0092      	lsls	r2, r2, #2
 800167e:	2701      	movs	r7, #1
 8001680:	6017      	str	r7, [r2, #0]
 8001682:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	4473      	add	r3, lr
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8001692:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001694:	07c8      	lsls	r0, r1, #31
 8001696:	d597      	bpl.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001698:	f7ff fa9a 	bl	8000bd0 <HAL_GetTick>
 800169c:	f04f 0802 	mov.w	r8, #2
 80016a0:	4682      	mov	sl, r0
 80016a2:	46c1      	mov	r9, r8
 80016a4:	fa98 f3a8 	rbit	r3, r8
 80016a8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ac:	b19b      	cbz	r3, 80016d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
 80016ae:	6a22      	ldr	r2, [r4, #32]
 80016b0:	fa99 f3a9 	rbit	r3, r9
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	fa07 f303 	lsl.w	r3, r7, r3
 80016c0:	4213      	tst	r3, r2
 80016c2:	d181      	bne.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c4:	f7ff fa84 	bl	8000bd0 <HAL_GetTick>
 80016c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80016cc:	eba0 000a 	sub.w	r0, r0, sl
 80016d0:	4298      	cmp	r0, r3
 80016d2:	d9e7      	bls.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80016d4:	e7bd      	b.n	8001652 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80016d6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016dc:	e7e8      	b.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40007000 	.word	0x40007000
 80016e8:	10908100 	.word	0x10908100

080016ec <HAL_TIM_PWM_MspInit>:
 80016ec:	4770      	bx	lr

080016ee <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016ee:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 80016f0:	b189      	cbz	r1, 8001716 <HAL_TIM_Encoder_Start+0x28>
 80016f2:	2904      	cmp	r1, #4
 80016f4:	d007      	beq.n	8001706 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	f022 0201 	bic.w	r2, r2, #1
 80016fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80016fe:	6a1a      	ldr	r2, [r3, #32]
 8001700:	f042 0201 	orr.w	r2, r2, #1
 8001704:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8001706:	6a1a      	ldr	r2, [r3, #32]
 8001708:	f022 0210 	bic.w	r2, r2, #16
 800170c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800170e:	6a1a      	ldr	r2, [r3, #32]
 8001710:	f042 0210 	orr.w	r2, r2, #16
 8001714:	e006      	b.n	8001724 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8001716:	6a1a      	ldr	r2, [r3, #32]
 8001718:	f022 0201 	bic.w	r2, r2, #1
 800171c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800171e:	6a1a      	ldr	r2, [r3, #32]
 8001720:	f042 0201 	orr.w	r2, r2, #1
 8001724:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	f042 0201 	orr.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]
}
 800172e:	2000      	movs	r0, #0
 8001730:	4770      	bx	lr
	...

08001734 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001734:	4a21      	ldr	r2, [pc, #132]	; (80017bc <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8001736:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001738:	4290      	cmp	r0, r2
{
 800173a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800173c:	d005      	beq.n	800174a <TIM_Base_SetConfig+0x16>
 800173e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001742:	d002      	beq.n	800174a <TIM_Base_SetConfig+0x16>
 8001744:	4c1e      	ldr	r4, [pc, #120]	; (80017c0 <TIM_Base_SetConfig+0x8c>)
 8001746:	42a0      	cmp	r0, r4
 8001748:	d10c      	bne.n	8001764 <TIM_Base_SetConfig+0x30>
    tmpcr1 |= Structure->CounterMode;
 800174a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800174c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001750:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001752:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001756:	d010      	beq.n	800177a <TIM_Base_SetConfig+0x46>
 8001758:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800175c:	d00d      	beq.n	800177a <TIM_Base_SetConfig+0x46>
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <TIM_Base_SetConfig+0x8c>)
 8001760:	4290      	cmp	r0, r2
 8001762:	d00a      	beq.n	800177a <TIM_Base_SetConfig+0x46>
 8001764:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <TIM_Base_SetConfig+0x90>)
 8001766:	4290      	cmp	r0, r2
 8001768:	d007      	beq.n	800177a <TIM_Base_SetConfig+0x46>
 800176a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800176e:	4290      	cmp	r0, r2
 8001770:	d003      	beq.n	800177a <TIM_Base_SetConfig+0x46>
 8001772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001776:	4290      	cmp	r0, r2
 8001778:	d103      	bne.n	8001782 <TIM_Base_SetConfig+0x4e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800177a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800177c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001780:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001782:	694a      	ldr	r2, [r1, #20]
 8001784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001788:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800178a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800178c:	688b      	ldr	r3, [r1, #8]
 800178e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001790:	680b      	ldr	r3, [r1, #0]
 8001792:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <TIM_Base_SetConfig+0x88>)
 8001796:	4298      	cmp	r0, r3
 8001798:	d00b      	beq.n	80017b2 <TIM_Base_SetConfig+0x7e>
 800179a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800179e:	4298      	cmp	r0, r3
 80017a0:	d007      	beq.n	80017b2 <TIM_Base_SetConfig+0x7e>
 80017a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017a6:	4298      	cmp	r0, r3
 80017a8:	d003      	beq.n	80017b2 <TIM_Base_SetConfig+0x7e>
 80017aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017ae:	4298      	cmp	r0, r3
 80017b0:	d101      	bne.n	80017b6 <TIM_Base_SetConfig+0x82>
    TIMx->RCR = Structure->RepetitionCounter;
 80017b2:	690b      	ldr	r3, [r1, #16]
 80017b4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80017b6:	2301      	movs	r3, #1
 80017b8:	6143      	str	r3, [r0, #20]
 80017ba:	bd10      	pop	{r4, pc}
 80017bc:	40012c00 	.word	0x40012c00
 80017c0:	40000400 	.word	0x40000400
 80017c4:	40014000 	.word	0x40014000

080017c8 <HAL_TIM_Base_Init>:
{ 
 80017c8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80017ca:	4604      	mov	r4, r0
 80017cc:	b1a0      	cbz	r0, 80017f8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80017ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80017d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017d6:	b91b      	cbnz	r3, 80017e0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80017dc:	f000 ffc8 	bl	8002770 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80017e0:	2302      	movs	r3, #2
 80017e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80017e6:	6820      	ldr	r0, [r4, #0]
 80017e8:	1d21      	adds	r1, r4, #4
 80017ea:	f7ff ffa3 	bl	8001734 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80017f4:	2000      	movs	r0, #0
 80017f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017f8:	2001      	movs	r0, #1
}
 80017fa:	bd10      	pop	{r4, pc}

080017fc <HAL_TIM_PWM_Init>:
{
 80017fc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80017fe:	4604      	mov	r4, r0
 8001800:	b1a0      	cbz	r0, 800182c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001802:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001806:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800180a:	b91b      	cbnz	r3, 8001814 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800180c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001810:	f7ff ff6c 	bl	80016ec <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001814:	2302      	movs	r3, #2
 8001816:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800181a:	6820      	ldr	r0, [r4, #0]
 800181c:	1d21      	adds	r1, r4, #4
 800181e:	f7ff ff89 	bl	8001734 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001822:	2301      	movs	r3, #1
 8001824:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001828:	2000      	movs	r0, #0
 800182a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800182c:	2001      	movs	r0, #1
}
 800182e:	bd10      	pop	{r4, pc}

08001830 <HAL_TIM_Encoder_Init>:
{
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001832:	460c      	mov	r4, r1
  if(htim == NULL)
 8001834:	4605      	mov	r5, r0
 8001836:	2800      	cmp	r0, #0
 8001838:	d043      	beq.n	80018c2 <HAL_TIM_Encoder_Init+0x92>
  if(htim->State == HAL_TIM_STATE_RESET)
 800183a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800183e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001842:	b91b      	cbnz	r3, 800184c <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8001844:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001848:	f000 ff6e 	bl	8002728 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800184c:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;
 800184e:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001850:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;
 8001854:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001858:	6883      	ldr	r3, [r0, #8]
 800185a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185e:	f023 0307 	bic.w	r3, r3, #7
 8001862:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8001864:	f7ff ff66 	bl	8001734 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001868:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800186a:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 800186c:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800186e:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001870:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8001872:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8001874:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001876:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001878:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800187c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001880:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001884:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001886:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800188a:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800188c:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001894:	68e1      	ldr	r1, [r4, #12]
 8001896:	430b      	orrs	r3, r1
 8001898:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800189a:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800189e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80018a2:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80018a4:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80018a6:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80018aa:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 80018ac:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80018ae:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 80018b2:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80018b4:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 80018b6:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80018b8:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 80018ba:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 80018be:	2000      	movs	r0, #0
 80018c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80018c2:	2001      	movs	r0, #1
}
 80018c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018c8 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018c8:	6a03      	ldr	r3, [r0, #32]
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80018d0:	6a03      	ldr	r3, [r0, #32]
{
 80018d2:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2; 
 80018d4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80018d6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 80018d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80018da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018de:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80018e2:	432a      	orrs	r2, r5
  tmpccer |= OC_Config->OCPolarity;
 80018e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80018e6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80018ea:	432b      	orrs	r3, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80018ec:	4d17      	ldr	r5, [pc, #92]	; (800194c <TIM_OC1_SetConfig+0x84>)
 80018ee:	42a8      	cmp	r0, r5
 80018f0:	d00b      	beq.n	800190a <TIM_OC1_SetConfig+0x42>
 80018f2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80018f6:	42a8      	cmp	r0, r5
 80018f8:	d007      	beq.n	800190a <TIM_OC1_SetConfig+0x42>
 80018fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018fe:	42a8      	cmp	r0, r5
 8001900:	d003      	beq.n	800190a <TIM_OC1_SetConfig+0x42>
 8001902:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001906:	42a8      	cmp	r0, r5
 8001908:	d11a      	bne.n	8001940 <TIM_OC1_SetConfig+0x78>
    tmpccer |= OC_Config->OCNPolarity;
 800190a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800190c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001910:	432b      	orrs	r3, r5
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001912:	4d0e      	ldr	r5, [pc, #56]	; (800194c <TIM_OC1_SetConfig+0x84>)
 8001914:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001916:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800191a:	d00b      	beq.n	8001934 <TIM_OC1_SetConfig+0x6c>
 800191c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001920:	42a8      	cmp	r0, r5
 8001922:	d007      	beq.n	8001934 <TIM_OC1_SetConfig+0x6c>
 8001924:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001928:	42a8      	cmp	r0, r5
 800192a:	d003      	beq.n	8001934 <TIM_OC1_SetConfig+0x6c>
 800192c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001930:	42a8      	cmp	r0, r5
 8001932:	d105      	bne.n	8001940 <TIM_OC1_SetConfig+0x78>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001934:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001938:	698e      	ldr	r6, [r1, #24]
 800193a:	694c      	ldr	r4, [r1, #20]
 800193c:	4334      	orrs	r4, r6
 800193e:	432c      	orrs	r4, r5
  TIMx->CR2 = tmpcr2;
 8001940:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001942:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001944:	684a      	ldr	r2, [r1, #4]
 8001946:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8001948:	6203      	str	r3, [r0, #32]
 800194a:	bd70      	pop	{r4, r5, r6, pc}
 800194c:	40012c00 	.word	0x40012c00

08001950 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001950:	6a03      	ldr	r3, [r0, #32]
 8001952:	f023 0310 	bic.w	r3, r3, #16
 8001956:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001958:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 800195a:	6842      	ldr	r2, [r0, #4]
{
 800195c:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800195e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001960:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001962:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8001966:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800196a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800196e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001970:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001974:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001978:	4d10      	ldr	r5, [pc, #64]	; (80019bc <TIM_OC2_SetConfig+0x6c>)
 800197a:	42a8      	cmp	r0, r5
 800197c:	d10e      	bne.n	800199c <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800197e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001984:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800198c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800198e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001990:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001994:	4335      	orrs	r5, r6
 8001996:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800199a:	e009      	b.n	80019b0 <TIM_OC2_SetConfig+0x60>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800199c:	4d08      	ldr	r5, [pc, #32]	; (80019c0 <TIM_OC2_SetConfig+0x70>)
 800199e:	42a8      	cmp	r0, r5
 80019a0:	d0f4      	beq.n	800198c <TIM_OC2_SetConfig+0x3c>
 80019a2:	4d08      	ldr	r5, [pc, #32]	; (80019c4 <TIM_OC2_SetConfig+0x74>)
 80019a4:	42a8      	cmp	r0, r5
 80019a6:	d0f1      	beq.n	800198c <TIM_OC2_SetConfig+0x3c>
 80019a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019ac:	42a8      	cmp	r0, r5
 80019ae:	d0ed      	beq.n	800198c <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 80019b0:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80019b2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80019b4:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80019b6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;  
 80019b8:	6203      	str	r3, [r0, #32]
}
 80019ba:	bd70      	pop	{r4, r5, r6, pc}
 80019bc:	40012c00 	.word	0x40012c00
 80019c0:	40014000 	.word	0x40014000
 80019c4:	40014400 	.word	0x40014400

080019c8 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80019c8:	6a03      	ldr	r3, [r0, #32]
 80019ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ce:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80019d0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 80019d2:	6842      	ldr	r2, [r0, #4]
{
 80019d4:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR2;
 80019d6:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 80019d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80019da:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80019de:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80019e2:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80019e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80019e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80019ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80019ee:	4d11      	ldr	r5, [pc, #68]	; (8001a34 <TIM_OC3_SetConfig+0x6c>)
 80019f0:	42a8      	cmp	r0, r5
 80019f2:	d10e      	bne.n	8001a12 <TIM_OC3_SetConfig+0x4a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80019f4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80019f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80019fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80019fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001a02:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a04:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a06:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a0a:	4335      	orrs	r5, r6
 8001a0c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001a10:	e009      	b.n	8001a26 <TIM_OC3_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a12:	4d09      	ldr	r5, [pc, #36]	; (8001a38 <TIM_OC3_SetConfig+0x70>)
 8001a14:	42a8      	cmp	r0, r5
 8001a16:	d0f4      	beq.n	8001a02 <TIM_OC3_SetConfig+0x3a>
 8001a18:	4d08      	ldr	r5, [pc, #32]	; (8001a3c <TIM_OC3_SetConfig+0x74>)
 8001a1a:	42a8      	cmp	r0, r5
 8001a1c:	d0f1      	beq.n	8001a02 <TIM_OC3_SetConfig+0x3a>
 8001a1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a22:	42a8      	cmp	r0, r5
 8001a24:	d0ed      	beq.n	8001a02 <TIM_OC3_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8001a26:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8001a28:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001a2a:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001a2c:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;  
 8001a2e:	6203      	str	r3, [r0, #32]
}
 8001a30:	bd70      	pop	{r4, r5, r6, pc}
 8001a32:	bf00      	nop
 8001a34:	40012c00 	.word	0x40012c00
 8001a38:	40014000 	.word	0x40014000
 8001a3c:	40014400 	.word	0x40014400

08001a40 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a40:	6a03      	ldr	r3, [r0, #32]
 8001a42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a46:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001a48:	6a02      	ldr	r2, [r0, #32]
{
 8001a4a:	b530      	push	{r4, r5, lr}
  tmpcr2 =  TIMx->CR2; 
 8001a4c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001a4e:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a56:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a5a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a5e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001a60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a64:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a68:	4d0c      	ldr	r5, [pc, #48]	; (8001a9c <TIM_OC4_SetConfig+0x5c>)
 8001a6a:	42a8      	cmp	r0, r5
 8001a6c:	d00b      	beq.n	8001a86 <TIM_OC4_SetConfig+0x46>
 8001a6e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001a72:	42a8      	cmp	r0, r5
 8001a74:	d007      	beq.n	8001a86 <TIM_OC4_SetConfig+0x46>
 8001a76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a7a:	42a8      	cmp	r0, r5
 8001a7c:	d003      	beq.n	8001a86 <TIM_OC4_SetConfig+0x46>
 8001a7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a82:	42a8      	cmp	r0, r5
 8001a84:	d104      	bne.n	8001a90 <TIM_OC4_SetConfig+0x50>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a86:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001a88:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a8c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  TIMx->CR2 = tmpcr2;
 8001a90:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001a92:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001a94:	684b      	ldr	r3, [r1, #4]
 8001a96:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;  
 8001a98:	6202      	str	r2, [r0, #32]
 8001a9a:	bd30      	pop	{r4, r5, pc}
 8001a9c:	40012c00 	.word	0x40012c00

08001aa0 <TIM_ETR_SetConfig>:
{
 8001aa0:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8001aa2:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001aa4:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001aa6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001aaa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001aae:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8001ab0:	6083      	str	r3, [r0, #8]
 8001ab2:	bd10      	pop	{r4, pc}

08001ab4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001ab4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ab8:	2b01      	cmp	r3, #1
{
 8001aba:	b570      	push	{r4, r5, r6, lr}
 8001abc:	4604      	mov	r4, r0
 8001abe:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001ac2:	d01a      	beq.n	8001afa <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001ac8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001aca:	2301      	movs	r3, #1
 8001acc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001ad0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ad2:	4b52      	ldr	r3, [pc, #328]	; (8001c1c <HAL_TIM_ConfigClockSource+0x168>)
 8001ad4:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001ad6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001ad8:	680b      	ldr	r3, [r1, #0]
 8001ada:	2b40      	cmp	r3, #64	; 0x40
 8001adc:	d075      	beq.n	8001bca <HAL_TIM_ConfigClockSource+0x116>
 8001ade:	d818      	bhi.n	8001b12 <HAL_TIM_ConfigClockSource+0x5e>
 8001ae0:	2b10      	cmp	r3, #16
 8001ae2:	f000 808f 	beq.w	8001c04 <HAL_TIM_ConfigClockSource+0x150>
 8001ae6:	d809      	bhi.n	8001afc <HAL_TIM_ConfigClockSource+0x48>
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 8085 	beq.w	8001bf8 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8001aee:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001af0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001af2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001af6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001afa:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	f000 8087 	beq.w	8001c10 <HAL_TIM_ConfigClockSource+0x15c>
 8001b02:	2b30      	cmp	r3, #48	; 0x30
 8001b04:	d1f3      	bne.n	8001aee <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8001b06:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001b0c:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001b10:	e033      	b.n	8001b7a <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001b12:	2b70      	cmp	r3, #112	; 0x70
 8001b14:	d033      	beq.n	8001b7e <HAL_TIM_ConfigClockSource+0xca>
 8001b16:	d81b      	bhi.n	8001b50 <HAL_TIM_ConfigClockSource+0x9c>
 8001b18:	2b50      	cmp	r3, #80	; 0x50
 8001b1a:	d03f      	beq.n	8001b9c <HAL_TIM_ConfigClockSource+0xe8>
 8001b1c:	2b60      	cmp	r3, #96	; 0x60
 8001b1e:	d1e6      	bne.n	8001aee <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001b20:	684d      	ldr	r5, [r1, #4]
 8001b22:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b24:	6a01      	ldr	r1, [r0, #32]
 8001b26:	f021 0110 	bic.w	r1, r1, #16
 8001b2a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b2c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001b2e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b30:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b3c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001b40:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001b42:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001b44:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001b4a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001b4e:	e014      	b.n	8001b7a <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b54:	d00c      	beq.n	8001b70 <HAL_TIM_ConfigClockSource+0xbc>
 8001b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b5a:	d1c8      	bne.n	8001aee <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001b5c:	68cb      	ldr	r3, [r1, #12]
 8001b5e:	684a      	ldr	r2, [r1, #4]
 8001b60:	6889      	ldr	r1, [r1, #8]
 8001b62:	f7ff ff9d 	bl	8001aa0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b66:	6822      	ldr	r2, [r4, #0]
 8001b68:	6893      	ldr	r3, [r2, #8]
 8001b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6e:	e013      	b.n	8001b98 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001b70:	6883      	ldr	r3, [r0, #8]
 8001b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b76:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001b7a:	6083      	str	r3, [r0, #8]
 8001b7c:	e7b7      	b.n	8001aee <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001b7e:	68cb      	ldr	r3, [r1, #12]
 8001b80:	684a      	ldr	r2, [r1, #4]
 8001b82:	6889      	ldr	r1, [r1, #8]
 8001b84:	f7ff ff8c 	bl	8001aa0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001b88:	6822      	ldr	r2, [r4, #0]
 8001b8a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b98:	6093      	str	r3, [r2, #8]
    break;
 8001b9a:	e7a8      	b.n	8001aee <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001b9c:	684a      	ldr	r2, [r1, #4]
 8001b9e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001ba0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ba2:	6a05      	ldr	r5, [r0, #32]
 8001ba4:	f025 0501 	bic.w	r5, r5, #1
 8001ba8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001baa:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bac:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bb4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001bb8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001bba:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001bbc:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001bbe:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001bc4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001bc8:	e7d7      	b.n	8001b7a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001bca:	684a      	ldr	r2, [r1, #4]
 8001bcc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001bce:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bd0:	6a05      	ldr	r5, [r0, #32]
 8001bd2:	f025 0501 	bic.w	r5, r5, #1
 8001bd6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001bd8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bda:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001be2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001be6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001be8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001bea:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001bec:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001bf2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001bf6:	e7c0      	b.n	8001b7a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001bf8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001bfe:	f043 0307 	orr.w	r3, r3, #7
 8001c02:	e7ba      	b.n	8001b7a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001c04:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c0a:	f043 0317 	orr.w	r3, r3, #23
 8001c0e:	e7b4      	b.n	8001b7a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001c10:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c16:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001c1a:	e7ae      	b.n	8001b7a <HAL_TIM_ConfigClockSource+0xc6>
 8001c1c:	fffe0088 	.word	0xfffe0088

08001c20 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001c20:	6a03      	ldr	r3, [r0, #32]
{
 8001c22:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001c24:	2401      	movs	r4, #1
 8001c26:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001c28:	ea23 0304 	bic.w	r3, r3, r4
 8001c2c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001c2e:	6a03      	ldr	r3, [r0, #32]
 8001c30:	408a      	lsls	r2, r1
 8001c32:	431a      	orrs	r2, r3
 8001c34:	6202      	str	r2, [r0, #32]
 8001c36:	bd10      	pop	{r4, pc}

08001c38 <HAL_TIM_PWM_Start>:
{
 8001c38:	b510      	push	{r4, lr}
 8001c3a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	6800      	ldr	r0, [r0, #0]
 8001c40:	f7ff ffee 	bl	8001c20 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <HAL_TIM_PWM_Start+0x40>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00b      	beq.n	8001c64 <HAL_TIM_PWM_Start+0x2c>
 8001c4c:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d007      	beq.n	8001c64 <HAL_TIM_PWM_Start+0x2c>
 8001c54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d003      	beq.n	8001c64 <HAL_TIM_PWM_Start+0x2c>
 8001c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d103      	bne.n	8001c6c <HAL_TIM_PWM_Start+0x34>
    __HAL_TIM_MOE_ENABLE(htim);
 8001c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c6a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
} 
 8001c74:	2000      	movs	r0, #0
 8001c76:	bd10      	pop	{r4, pc}
 8001c78:	40012c00 	.word	0x40012c00

08001c7c <HAL_TIM_PWM_Stop>:
{   
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001c80:	2200      	movs	r2, #0
 8001c82:	6800      	ldr	r0, [r0, #0]
 8001c84:	f7ff ffcc 	bl	8001c20 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	4a18      	ldr	r2, [pc, #96]	; (8001cec <HAL_TIM_PWM_Stop+0x70>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d00b      	beq.n	8001ca8 <HAL_TIM_PWM_Stop+0x2c>
 8001c90:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d007      	beq.n	8001ca8 <HAL_TIM_PWM_Stop+0x2c>
 8001c98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d003      	beq.n	8001ca8 <HAL_TIM_PWM_Stop+0x2c>
 8001ca0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d10d      	bne.n	8001cc4 <HAL_TIM_PWM_Stop+0x48>
    __HAL_TIM_MOE_DISABLE(htim);
 8001ca8:	6a19      	ldr	r1, [r3, #32]
 8001caa:	f241 1211 	movw	r2, #4369	; 0x1111
 8001cae:	4211      	tst	r1, r2
 8001cb0:	d108      	bne.n	8001cc4 <HAL_TIM_PWM_Stop+0x48>
 8001cb2:	6a19      	ldr	r1, [r3, #32]
 8001cb4:	f240 4244 	movw	r2, #1092	; 0x444
 8001cb8:	4211      	tst	r1, r2
 8001cba:	bf02      	ittt	eq
 8001cbc:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001cbe:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8001cc2:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8001cc4:	6a19      	ldr	r1, [r3, #32]
 8001cc6:	f241 1211 	movw	r2, #4369	; 0x1111
 8001cca:	4211      	tst	r1, r2
 8001ccc:	d108      	bne.n	8001ce0 <HAL_TIM_PWM_Stop+0x64>
 8001cce:	6a19      	ldr	r1, [r3, #32]
 8001cd0:	f240 4244 	movw	r2, #1092	; 0x444
 8001cd4:	4211      	tst	r1, r2
 8001cd6:	d103      	bne.n	8001ce0 <HAL_TIM_PWM_Stop+0x64>
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
} 
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	bd10      	pop	{r4, pc}
 8001cea:	bf00      	nop
 8001cec:	40012c00 	.word	0x40012c00

08001cf0 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001cf0:	6a03      	ldr	r3, [r0, #32]
 8001cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cf8:	6a02      	ldr	r2, [r0, #32]
{
 8001cfa:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001cfc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001cfe:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d00:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001d0a:	432b      	orrs	r3, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001d0c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8001d0e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001d12:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001d16:	4d0d      	ldr	r5, [pc, #52]	; (8001d4c <TIM_OC5_SetConfig+0x5c>)
 8001d18:	42a8      	cmp	r0, r5
 8001d1a:	d00b      	beq.n	8001d34 <TIM_OC5_SetConfig+0x44>
 8001d1c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001d20:	42a8      	cmp	r0, r5
 8001d22:	d007      	beq.n	8001d34 <TIM_OC5_SetConfig+0x44>
 8001d24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d28:	42a8      	cmp	r0, r5
 8001d2a:	d003      	beq.n	8001d34 <TIM_OC5_SetConfig+0x44>
 8001d2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d30:	42a8      	cmp	r0, r5
 8001d32:	d104      	bne.n	8001d3e <TIM_OC5_SetConfig+0x4e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001d34:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001d36:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001d3a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d3e:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001d40:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001d42:	684b      	ldr	r3, [r1, #4]
 8001d44:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001d46:	6202      	str	r2, [r0, #32]
 8001d48:	bd30      	pop	{r4, r5, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40012c00 	.word	0x40012c00

08001d50 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001d50:	6a03      	ldr	r3, [r0, #32]
 8001d52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d56:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d58:	6a02      	ldr	r2, [r0, #32]
{
 8001d5a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001d5c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001d5e:	6d43      	ldr	r3, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d60:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001d6e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001d70:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001d74:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001d78:	4d0c      	ldr	r5, [pc, #48]	; (8001dac <TIM_OC6_SetConfig+0x5c>)
 8001d7a:	42a8      	cmp	r0, r5
 8001d7c:	d00b      	beq.n	8001d96 <TIM_OC6_SetConfig+0x46>
 8001d7e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001d82:	42a8      	cmp	r0, r5
 8001d84:	d007      	beq.n	8001d96 <TIM_OC6_SetConfig+0x46>
 8001d86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d8a:	42a8      	cmp	r0, r5
 8001d8c:	d003      	beq.n	8001d96 <TIM_OC6_SetConfig+0x46>
 8001d8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d92:	42a8      	cmp	r0, r5
 8001d94:	d104      	bne.n	8001da0 <TIM_OC6_SetConfig+0x50>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001d96:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001d98:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001d9c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001da0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001da2:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001da4:	684b      	ldr	r3, [r1, #4]
 8001da6:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001da8:	6202      	str	r2, [r0, #32]
 8001daa:	bd30      	pop	{r4, r5, pc}
 8001dac:	40012c00 	.word	0x40012c00

08001db0 <HAL_TIM_PWM_ConfigChannel>:
{
 8001db0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001db2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001db6:	2b01      	cmp	r3, #1
{
 8001db8:	4604      	mov	r4, r0
 8001dba:	460d      	mov	r5, r1
 8001dbc:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001dc0:	d010      	beq.n	8001de4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8001dc2:	2301      	movs	r3, #1
  switch (Channel)
 8001dc4:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001dc6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001dca:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001dce:	d043      	beq.n	8001e58 <HAL_TIM_PWM_ConfigChannel+0xa8>
 8001dd0:	d809      	bhi.n	8001de6 <HAL_TIM_PWM_ConfigChannel+0x36>
 8001dd2:	b1fa      	cbz	r2, 8001e14 <HAL_TIM_PWM_ConfigChannel+0x64>
 8001dd4:	2a04      	cmp	r2, #4
 8001dd6:	d02e      	beq.n	8001e36 <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8001dd8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001dda:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001ddc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001de0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001de4:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8001de6:	2a10      	cmp	r2, #16
 8001de8:	d047      	beq.n	8001e7a <HAL_TIM_PWM_ConfigChannel+0xca>
 8001dea:	2a14      	cmp	r2, #20
 8001dec:	d056      	beq.n	8001e9c <HAL_TIM_PWM_ConfigChannel+0xec>
 8001dee:	2a0c      	cmp	r2, #12
 8001df0:	d1f2      	bne.n	8001dd8 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001df2:	6820      	ldr	r0, [r4, #0]
 8001df4:	f7ff fe24 	bl	8001a40 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001df8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001dfa:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001e0c:	69da      	ldr	r2, [r3, #28]
 8001e0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e12:	e030      	b.n	8001e76 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e14:	6820      	ldr	r0, [r4, #0]
 8001e16:	f7ff fd57 	bl	80018c8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e1a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e1c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e1e:	699a      	ldr	r2, [r3, #24]
 8001e20:	f042 0208 	orr.w	r2, r2, #8
 8001e24:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e26:	699a      	ldr	r2, [r3, #24]
 8001e28:	f022 0204 	bic.w	r2, r2, #4
 8001e2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e2e:	699a      	ldr	r2, [r3, #24]
 8001e30:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e32:	619a      	str	r2, [r3, #24]
    break;
 8001e34:	e7d0      	b.n	8001dd8 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e36:	6820      	ldr	r0, [r4, #0]
 8001e38:	f7ff fd8a 	bl	8001950 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e3c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e3e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e48:	699a      	ldr	r2, [r3, #24]
 8001e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e56:	e7ec      	b.n	8001e32 <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e58:	6820      	ldr	r0, [r4, #0]
 8001e5a:	f7ff fdb5 	bl	80019c8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e5e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001e60:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e62:	69da      	ldr	r2, [r3, #28]
 8001e64:	f042 0208 	orr.w	r2, r2, #8
 8001e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e6a:	69da      	ldr	r2, [r3, #28]
 8001e6c:	f022 0204 	bic.w	r2, r2, #4
 8001e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001e76:	61da      	str	r2, [r3, #28]
    break;
 8001e78:	e7ae      	b.n	8001dd8 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001e7a:	6820      	ldr	r0, [r4, #0]
 8001e7c:	f7ff ff38 	bl	8001cf0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001e80:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001e82:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e86:	f042 0208 	orr.w	r2, r2, #8
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e8e:	f022 0204 	bic.w	r2, r2, #4
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e96:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8001e9a:	e79d      	b.n	8001dd8 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001e9c:	6820      	ldr	r0, [r4, #0]
 8001e9e:	f7ff ff57 	bl	8001d50 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001ea2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001ea4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001ea6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001eae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001eb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001eb8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ebc:	e7ec      	b.n	8001e98 <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

08001ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8001ec0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ec4:	2b01      	cmp	r3, #1
{
 8001ec6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001ec8:	d018      	beq.n	8001efc <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 = htim->Instance->CR2;
 8001eca:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001ecc:	4d0c      	ldr	r5, [pc, #48]	; (8001f00 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8001ece:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001ed0:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001ed2:	42aa      	cmp	r2, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001ed4:	bf02      	ittt	eq
 8001ed6:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001ed8:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001edc:	432b      	orreq	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ede:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ee0:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ee6:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001ee8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 8001eec:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001eee:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 8001ef0:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001ef2:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001ef4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001efc:	2002      	movs	r0, #2
} 
 8001efe:	bd30      	pop	{r4, r5, pc}
 8001f00:	40012c00 	.word	0x40012c00

08001f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f04:	b538      	push	{r3, r4, r5, lr}
 8001f06:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f08:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f0a:	6921      	ldr	r1, [r4, #16]
 8001f0c:	68a3      	ldr	r3, [r4, #8]
 8001f0e:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f10:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f12:	430b      	orrs	r3, r1
 8001f14:	6961      	ldr	r1, [r4, #20]
 8001f16:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f18:	4949      	ldr	r1, [pc, #292]	; (8002040 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f1a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f1c:	4001      	ands	r1, r0
 8001f1e:	430b      	orrs	r3, r1
 8001f20:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f22:	686b      	ldr	r3, [r5, #4]
 8001f24:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001f26:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001f30:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001f32:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001f34:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001f38:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001f3a:	430b      	orrs	r3, r1
 8001f3c:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f3e:	4b41      	ldr	r3, [pc, #260]	; (8002044 <UART_SetConfig+0x140>)
 8001f40:	429d      	cmp	r5, r3
 8001f42:	d112      	bne.n	8001f6a <UART_SetConfig+0x66>
 8001f44:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001f48:	493f      	ldr	r1, [pc, #252]	; (8002048 <UART_SetConfig+0x144>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f50:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001f54:	5ccb      	ldrb	r3, [r1, r3]
 8001f56:	d13b      	bne.n	8001fd0 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d836      	bhi.n	8001fca <UART_SetConfig+0xc6>
 8001f5c:	e8df f003 	tbb	[pc, r3]
 8001f60:	3524210f 	.word	0x3524210f
 8001f64:	3535352d 	.word	0x3535352d
 8001f68:	30          	.byte	0x30
 8001f69:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f6a:	4b38      	ldr	r3, [pc, #224]	; (800204c <UART_SetConfig+0x148>)
 8001f6c:	429d      	cmp	r5, r3
 8001f6e:	d003      	beq.n	8001f78 <UART_SetConfig+0x74>
 8001f70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f74:	429d      	cmp	r5, r3
 8001f76:	d15e      	bne.n	8002036 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f78:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001f7c:	d131      	bne.n	8001fe2 <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f7e:	f7ff fad7 	bl	8001530 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f82:	6861      	ldr	r1, [r4, #4]
 8001f84:	084a      	lsrs	r2, r1, #1
 8001f86:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001f8a:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f8e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f90:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001f92:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 8001f96:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f98:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
 8001fa0:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001fa2:	f7ff fadd 	bl	8001560 <HAL_RCC_GetPCLK2Freq>
 8001fa6:	e7ec      	b.n	8001f82 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001fa8:	6860      	ldr	r0, [r4, #4]
 8001faa:	0843      	lsrs	r3, r0, #1
 8001fac:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001fb0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001fb4:	fbb3 f3f0 	udiv	r3, r3, r0
 8001fb8:	e7e9      	b.n	8001f8e <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fba:	f7ff f9bf 	bl	800133c <HAL_RCC_GetSysClockFreq>
 8001fbe:	e7e0      	b.n	8001f82 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001fc0:	6860      	ldr	r0, [r4, #4]
 8001fc2:	0843      	lsrs	r3, r0, #1
 8001fc4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001fc8:	e7f4      	b.n	8001fb4 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8001fca:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e7e0      	b.n	8001f92 <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d833      	bhi.n	800203c <UART_SetConfig+0x138>
 8001fd4:	e8df f003 	tbb	[pc, r3]
 8001fd8:	321b1005 	.word	0x321b1005
 8001fdc:	32323227 	.word	0x32323227
 8001fe0:	2a          	.byte	0x2a
 8001fe1:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001fe2:	f7ff faa5 	bl	8001530 <HAL_RCC_GetPCLK1Freq>
 8001fe6:	6863      	ldr	r3, [r4, #4]
 8001fe8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001fec:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ff0:	b280      	uxth	r0, r0
 8001ff2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ff4:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 8001ff6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001ff8:	f7ff fab2 	bl	8001560 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ffc:	6863      	ldr	r3, [r4, #4]
 8001ffe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002002:	fbb0 f0f3 	udiv	r0, r0, r3
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <UART_SetConfig+0x140>)
 8002008:	b280      	uxth	r0, r0
 800200a:	60d8      	str	r0, [r3, #12]
 800200c:	e7f2      	b.n	8001ff4 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800200e:	6862      	ldr	r2, [r4, #4]
 8002010:	0853      	lsrs	r3, r2, #1
 8002012:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002016:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800201a:	fbb3 f3f2 	udiv	r3, r3, r2
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <UART_SetConfig+0x140>)
 8002020:	b29b      	uxth	r3, r3
 8002022:	60d3      	str	r3, [r2, #12]
 8002024:	e7e6      	b.n	8001ff4 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002026:	f7ff f989 	bl	800133c <HAL_RCC_GetSysClockFreq>
 800202a:	e7e7      	b.n	8001ffc <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800202c:	6862      	ldr	r2, [r4, #4]
 800202e:	0853      	lsrs	r3, r2, #1
 8002030:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002034:	e7f1      	b.n	800201a <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002036:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800203a:	d0c6      	beq.n	8001fca <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800203c:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800203e:	bd38      	pop	{r3, r4, r5, pc}
 8002040:	efff69f3 	.word	0xefff69f3
 8002044:	40013800 	.word	0x40013800
 8002048:	0800324c 	.word	0x0800324c
 800204c:	40004400 	.word	0x40004400

08002050 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002050:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002052:	07da      	lsls	r2, r3, #31
{
 8002054:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002056:	d506      	bpl.n	8002066 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002058:	6801      	ldr	r1, [r0, #0]
 800205a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800205c:	684a      	ldr	r2, [r1, #4]
 800205e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002062:	4322      	orrs	r2, r4
 8002064:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002066:	079c      	lsls	r4, r3, #30
 8002068:	d506      	bpl.n	8002078 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800206a:	6801      	ldr	r1, [r0, #0]
 800206c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800206e:	684a      	ldr	r2, [r1, #4]
 8002070:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002074:	4322      	orrs	r2, r4
 8002076:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002078:	0759      	lsls	r1, r3, #29
 800207a:	d506      	bpl.n	800208a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800207c:	6801      	ldr	r1, [r0, #0]
 800207e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002080:	684a      	ldr	r2, [r1, #4]
 8002082:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002086:	4322      	orrs	r2, r4
 8002088:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800208a:	071a      	lsls	r2, r3, #28
 800208c:	d506      	bpl.n	800209c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800208e:	6801      	ldr	r1, [r0, #0]
 8002090:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002092:	684a      	ldr	r2, [r1, #4]
 8002094:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002098:	4322      	orrs	r2, r4
 800209a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800209c:	06dc      	lsls	r4, r3, #27
 800209e:	d506      	bpl.n	80020ae <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020a0:	6801      	ldr	r1, [r0, #0]
 80020a2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80020a4:	688a      	ldr	r2, [r1, #8]
 80020a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020aa:	4322      	orrs	r2, r4
 80020ac:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020ae:	0699      	lsls	r1, r3, #26
 80020b0:	d506      	bpl.n	80020c0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020b2:	6801      	ldr	r1, [r0, #0]
 80020b4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80020b6:	688a      	ldr	r2, [r1, #8]
 80020b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020bc:	4322      	orrs	r2, r4
 80020be:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020c0:	065a      	lsls	r2, r3, #25
 80020c2:	d50f      	bpl.n	80020e4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020c4:	6801      	ldr	r1, [r0, #0]
 80020c6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80020c8:	684a      	ldr	r2, [r1, #4]
 80020ca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80020ce:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020d0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020d4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020d6:	d105      	bne.n	80020e4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020d8:	684a      	ldr	r2, [r1, #4]
 80020da:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80020dc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80020e0:	4322      	orrs	r2, r4
 80020e2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020e4:	061b      	lsls	r3, r3, #24
 80020e6:	d506      	bpl.n	80020f6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020e8:	6802      	ldr	r2, [r0, #0]
 80020ea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80020ec:	6853      	ldr	r3, [r2, #4]
 80020ee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80020f2:	430b      	orrs	r3, r1
 80020f4:	6053      	str	r3, [r2, #4]
 80020f6:	bd10      	pop	{r4, pc}

080020f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020fc:	9d06      	ldr	r5, [sp, #24]
 80020fe:	4604      	mov	r4, r0
 8002100:	460f      	mov	r7, r1
 8002102:	4616      	mov	r6, r2
 8002104:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002106:	6821      	ldr	r1, [r4, #0]
 8002108:	69ca      	ldr	r2, [r1, #28]
 800210a:	ea37 0302 	bics.w	r3, r7, r2
 800210e:	bf0c      	ite	eq
 8002110:	2201      	moveq	r2, #1
 8002112:	2200      	movne	r2, #0
 8002114:	42b2      	cmp	r2, r6
 8002116:	d002      	beq.n	800211e <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002118:	2000      	movs	r0, #0
}
 800211a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800211e:	1c6b      	adds	r3, r5, #1
 8002120:	d0f2      	beq.n	8002108 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002122:	b99d      	cbnz	r5, 800214c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800212c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002136:	2320      	movs	r3, #32
 8002138:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800213c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002140:	2300      	movs	r3, #0
 8002142:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002146:	2003      	movs	r0, #3
 8002148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800214c:	f7fe fd40 	bl	8000bd0 <HAL_GetTick>
 8002150:	eba0 0008 	sub.w	r0, r0, r8
 8002154:	4285      	cmp	r5, r0
 8002156:	d2d6      	bcs.n	8002106 <UART_WaitOnFlagUntilTimeout+0xe>
 8002158:	e7e4      	b.n	8002124 <UART_WaitOnFlagUntilTimeout+0x2c>

0800215a <HAL_UART_Transmit>:
{
 800215a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800215e:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002160:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002164:	2b20      	cmp	r3, #32
{
 8002166:	4604      	mov	r4, r0
 8002168:	460d      	mov	r5, r1
 800216a:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800216c:	d14c      	bne.n	8002208 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 800216e:	2900      	cmp	r1, #0
 8002170:	d048      	beq.n	8002204 <HAL_UART_Transmit+0xaa>
 8002172:	2a00      	cmp	r2, #0
 8002174:	d046      	beq.n	8002204 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8002176:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800217a:	2b01      	cmp	r3, #1
 800217c:	d044      	beq.n	8002208 <HAL_UART_Transmit+0xae>
 800217e:	2301      	movs	r3, #1
 8002180:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002184:	2300      	movs	r3, #0
 8002186:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002188:	2321      	movs	r3, #33	; 0x21
 800218a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 800218e:	f7fe fd1f 	bl	8000bd0 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002192:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002196:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002198:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800219c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80021a0:	b292      	uxth	r2, r2
 80021a2:	b962      	cbnz	r2, 80021be <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021a4:	9700      	str	r7, [sp, #0]
 80021a6:	4633      	mov	r3, r6
 80021a8:	2140      	movs	r1, #64	; 0x40
 80021aa:	4620      	mov	r0, r4
 80021ac:	f7ff ffa4 	bl	80020f8 <UART_WaitOnFlagUntilTimeout>
 80021b0:	b998      	cbnz	r0, 80021da <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80021b2:	2320      	movs	r3, #32
 80021b4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80021b8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 80021bc:	e00e      	b.n	80021dc <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80021be:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021c2:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021cc:	2200      	movs	r2, #0
 80021ce:	4633      	mov	r3, r6
 80021d0:	2180      	movs	r1, #128	; 0x80
 80021d2:	4620      	mov	r0, r4
 80021d4:	f7ff ff90 	bl	80020f8 <UART_WaitOnFlagUntilTimeout>
 80021d8:	b118      	cbz	r0, 80021e2 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 80021da:	2003      	movs	r0, #3
}
 80021dc:	b002      	add	sp, #8
 80021de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e2:	68a3      	ldr	r3, [r4, #8]
 80021e4:	6822      	ldr	r2, [r4, #0]
 80021e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ea:	d107      	bne.n	80021fc <HAL_UART_Transmit+0xa2>
 80021ec:	6923      	ldr	r3, [r4, #16]
 80021ee:	b92b      	cbnz	r3, 80021fc <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80021f0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80021f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f8:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80021fa:	e7cf      	b.n	800219c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80021fc:	782b      	ldrb	r3, [r5, #0]
 80021fe:	8513      	strh	r3, [r2, #40]	; 0x28
 8002200:	3501      	adds	r5, #1
 8002202:	e7cb      	b.n	800219c <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002204:	2001      	movs	r0, #1
 8002206:	e7e9      	b.n	80021dc <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002208:	2002      	movs	r0, #2
 800220a:	e7e7      	b.n	80021dc <HAL_UART_Transmit+0x82>

0800220c <UART_CheckIdleState>:
{
 800220c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800220e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002210:	2600      	movs	r6, #0
 8002212:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002214:	f7fe fcdc 	bl	8000bd0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800221e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002220:	d417      	bmi.n	8002252 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	075b      	lsls	r3, r3, #29
 8002228:	d50a      	bpl.n	8002240 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800222a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2200      	movs	r2, #0
 8002232:	462b      	mov	r3, r5
 8002234:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002238:	4620      	mov	r0, r4
 800223a:	f7ff ff5d 	bl	80020f8 <UART_WaitOnFlagUntilTimeout>
 800223e:	b9a0      	cbnz	r0, 800226a <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002240:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002242:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002244:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002248:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800224c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002250:	e00c      	b.n	800226c <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002252:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	4632      	mov	r2, r6
 800225a:	4603      	mov	r3, r0
 800225c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002260:	4620      	mov	r0, r4
 8002262:	f7ff ff49 	bl	80020f8 <UART_WaitOnFlagUntilTimeout>
 8002266:	2800      	cmp	r0, #0
 8002268:	d0db      	beq.n	8002222 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800226a:	2003      	movs	r0, #3
}
 800226c:	b002      	add	sp, #8
 800226e:	bd70      	pop	{r4, r5, r6, pc}

08002270 <HAL_UART_Init>:
{
 8002270:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002272:	4604      	mov	r4, r0
 8002274:	b360      	cbz	r0, 80022d0 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002276:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800227a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800227e:	b91b      	cbnz	r3, 8002288 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002280:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002284:	f000 fb10 	bl	80028a8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002288:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800228a:	2324      	movs	r3, #36	; 0x24
 800228c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002290:	6813      	ldr	r3, [r2, #0]
 8002292:	f023 0301 	bic.w	r3, r3, #1
 8002296:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002298:	4620      	mov	r0, r4
 800229a:	f7ff fe33 	bl	8001f04 <UART_SetConfig>
 800229e:	2801      	cmp	r0, #1
 80022a0:	d016      	beq.n	80022d0 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022a4:	b113      	cbz	r3, 80022ac <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80022a6:	4620      	mov	r0, r4
 80022a8:	f7ff fed2 	bl	8002050 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022bc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80022c4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80022c6:	601a      	str	r2, [r3, #0]
}
 80022c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80022cc:	f7ff bf9e 	b.w	800220c <UART_CheckIdleState>
}
 80022d0:	2001      	movs	r0, #1
 80022d2:	bd10      	pop	{r4, pc}

080022d4 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d4:	4b18      	ldr	r3, [pc, #96]	; (8002338 <MX_GPIO_Init+0x64>)
{
 80022d6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80022de:	615a      	str	r2, [r3, #20]
 80022e0:	695a      	ldr	r2, [r3, #20]
{
 80022e2:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80022e8:	9201      	str	r2, [sp, #4]
 80022ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022f2:	615a      	str	r2, [r3, #20]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fc:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80022fe:	2101      	movs	r1, #1
 8002300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002304:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002306:	2401      	movs	r4, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8002308:	f7fe fda0 	bl	8000e4c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	a903      	add	r1, sp, #12
 8002310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002314:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002316:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	f7fe fcdc 	bl	8000cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002320:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002322:	a903      	add	r1, sp, #12
 8002324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002328:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800232c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232e:	f7fe fcd3 	bl	8000cd8 <HAL_GPIO_Init>

}
 8002332:	b009      	add	sp, #36	; 0x24
 8002334:	bd30      	pop	{r4, r5, pc}
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000

0800233c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800233c:	b510      	push	{r4, lr}
 800233e:	b096      	sub	sp, #88	; 0x58
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002340:	2301      	movs	r3, #1
 8002342:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8002344:	2310      	movs	r3, #16
 8002346:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002348:	2300      	movs	r3, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800234a:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800234c:	9314      	str	r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800234e:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002350:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002354:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002356:	9413      	str	r4, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002358:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800235a:	f7fe fd7d 	bl	8000e58 <HAL_RCC_OscConfig>
 800235e:	b100      	cbz	r0, 8002362 <SystemClock_Config+0x26>
 8002360:	e7fe      	b.n	8002360 <SystemClock_Config+0x24>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002362:	230f      	movs	r3, #15
 8002364:	9301      	str	r3, [sp, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002366:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002368:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800236c:	9005      	str	r0, [sp, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800236e:	4621      	mov	r1, r4
 8002370:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002372:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002374:	9304      	str	r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002376:	f7ff f813 	bl	80013a0 <HAL_RCC_ClockConfig>
 800237a:	b100      	cbz	r0, 800237e <SystemClock_Config+0x42>
 800237c:	e7fe      	b.n	800237c <SystemClock_Config+0x40>
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800237e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002382:	900b      	str	r0, [sp, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002384:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002386:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002388:	f7ff f902 	bl	8001590 <HAL_RCCEx_PeriphCLKConfig>
 800238c:	4604      	mov	r4, r0
 800238e:	b100      	cbz	r0, 8002392 <SystemClock_Config+0x56>
 8002390:	e7fe      	b.n	8002390 <SystemClock_Config+0x54>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002392:	f7ff f8c7 	bl	8001524 <HAL_RCC_GetHCLKFreq>
 8002396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239a:	fbb0 f0f3 	udiv	r0, r0, r3
 800239e:	f7fe fc73 	bl	8000c88 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80023a2:	2004      	movs	r0, #4
 80023a4:	f7fe fc86 	bl	8000cb4 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80023a8:	4622      	mov	r2, r4
 80023aa:	4621      	mov	r1, r4
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	f7fe fc36 	bl	8000c20 <HAL_NVIC_SetPriority>
}
 80023b4:	b016      	add	sp, #88	; 0x58
 80023b6:	bd10      	pop	{r4, pc}

080023b8 <ticks_diff>:
}



int ticks_diff(int old, int new)
{
 80023b8:	b510      	push	{r4, lr}
	int temp_diff = new - old;
 80023ba:	1a0c      	subs	r4, r1, r0

	if((fabs(temp_diff)) < DIRECTION_THRESHOLD)
 80023bc:	4620      	mov	r0, r4
 80023be:	f7fe f8b1 	bl	8000524 <__aeabi_i2d>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4610      	mov	r0, r2
 80023c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80023cc:	2200      	movs	r2, #0
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <ticks_diff+0x3c>)
 80023d0:	f7fe fb80 	bl	8000ad4 <__aeabi_dcmplt>
 80023d4:	b958      	cbnz	r0, 80023ee <ticks_diff+0x36>
	{
		return temp_diff;
	}
	else
	{
		if(temp_diff > 0){
 80023d6:	2c00      	cmp	r4, #0
			return PPR - temp_diff;
		}else{
			return -PPR - temp_diff;
 80023d8:	bfd5      	itete	le
 80023da:	f1c4 447f 	rsble	r4, r4, #4278190080	; 0xff000000
			return PPR - temp_diff;
 80023de:	f5c4 446a 	rsbgt	r4, r4, #59904	; 0xea00
			return -PPR - temp_diff;
 80023e2:	f504 047f 	addle.w	r4, r4, #16711680	; 0xff0000
			return PPR - temp_diff;
 80023e6:	3460      	addgt	r4, #96	; 0x60
			return -PPR - temp_diff;
 80023e8:	bfd8      	it	le
 80023ea:	f504 54ad 	addle.w	r4, r4, #5536	; 0x15a0
		}

	}

}
 80023ee:	4620      	mov	r0, r4
 80023f0:	bd10      	pop	{r4, pc}
 80023f2:	bf00      	nop
 80023f4:	40e40000 	.word	0x40e40000

080023f8 <transmit_int>:
void transmit_int(char letter, int number, int nlflag)
{
 80023f8:	b570      	push	{r4, r5, r6, lr}
 80023fa:	b092      	sub	sp, #72	; 0x48
 80023fc:	4604      	mov	r4, r0
 80023fe:	460d      	mov	r5, r1
 8002400:	4616      	mov	r6, r2
	uint8_t buf[BUFF_64]="";
 8002402:	2100      	movs	r1, #0
 8002404:	223c      	movs	r2, #60	; 0x3c
 8002406:	a803      	add	r0, sp, #12
 8002408:	9102      	str	r1, [sp, #8]
 800240a:	f000 fabf 	bl	800298c <memset>

	if(nlflag){
		snprintf((char*)buf, BUFF_64+1,"%c:%d\n",letter,number);
 800240e:	9500      	str	r5, [sp, #0]
 8002410:	4623      	mov	r3, r4
	if(nlflag){
 8002412:	b17e      	cbz	r6, 8002434 <transmit_int+0x3c>
		snprintf((char*)buf, BUFF_64+1,"%c:%d\n",letter,number);
 8002414:	4a08      	ldr	r2, [pc, #32]	; (8002438 <transmit_int+0x40>)
	}else{
		snprintf((char*)buf, BUFF_64+1,"%c:%d|",letter,number);
 8002416:	2141      	movs	r1, #65	; 0x41
 8002418:	a802      	add	r0, sp, #8
 800241a:	f000 fabf 	bl	800299c <sniprintf>
	}
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen((char *)buf), 100);
 800241e:	a802      	add	r0, sp, #8
 8002420:	f7fd fed6 	bl	80001d0 <strlen>
 8002424:	2364      	movs	r3, #100	; 0x64
 8002426:	b282      	uxth	r2, r0
 8002428:	a902      	add	r1, sp, #8
 800242a:	4804      	ldr	r0, [pc, #16]	; (800243c <transmit_int+0x44>)
 800242c:	f7ff fe95 	bl	800215a <HAL_UART_Transmit>
}
 8002430:	b012      	add	sp, #72	; 0x48
 8002432:	bd70      	pop	{r4, r5, r6, pc}
		snprintf((char*)buf, BUFF_64+1,"%c:%d|",letter,number);
 8002434:	4a02      	ldr	r2, [pc, #8]	; (8002440 <transmit_int+0x48>)
 8002436:	e7ee      	b.n	8002416 <transmit_int+0x1e>
 8002438:	08003250 	.word	0x08003250
 800243c:	2000011c 	.word	0x2000011c
 8002440:	08003257 	.word	0x08003257

08002444 <moveMotor>:
{
 8002444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8002448:	2104      	movs	r1, #4
{
 800244a:	9001      	str	r0, [sp, #4]
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 800244c:	483f      	ldr	r0, [pc, #252]	; (800254c <moveMotor+0x108>)
 800244e:	f7ff fbf3 	bl	8001c38 <HAL_TIM_PWM_Start>
	int sum_e=0;
 8002452:	2600      	movs	r6, #0
	int old_e=0;
 8002454:	4635      	mov	r5, r6
		temp+=ticks_diff(old_temp,__HAL_TIM_GET_COUNTER(&htim1));
 8002456:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <moveMotor+0x10c>)
 8002458:	4c3e      	ldr	r4, [pc, #248]	; (8002554 <moveMotor+0x110>)
 800245a:	f8d3 8000 	ldr.w	r8, [r3]
 800245e:	6820      	ldr	r0, [r4, #0]
 8002460:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 8002464:	4f3c      	ldr	r7, [pc, #240]	; (8002558 <moveMotor+0x114>)
 8002466:	f7ff ffa7 	bl	80023b8 <ticks_diff>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	4418      	add	r0, r3
		old_temp=__HAL_TIM_GET_COUNTER(&htim1);
 800246e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8002472:	6023      	str	r3, [r4, #0]
		e=ref-temp;
 8002474:	9b01      	ldr	r3, [sp, #4]
		temp+=ticks_diff(old_temp,__HAL_TIM_GET_COUNTER(&htim1));
 8002476:	6038      	str	r0, [r7, #0]
		e=ref-temp;
 8002478:	1a1c      	subs	r4, r3, r0
		sum_e+=e;
 800247a:	4426      	add	r6, r4
		i=Kp*e+ sum_e*Ki+ Kd*(e-old_e);
 800247c:	4630      	mov	r0, r6
 800247e:	f7fe f851 	bl	8000524 <__aeabi_i2d>
 8002482:	2200      	movs	r2, #0
 8002484:	2300      	movs	r3, #0
 8002486:	f7fe f8b3 	bl	80005f0 <__aeabi_dmul>
 800248a:	ee07 4a90 	vmov	s15, r4
 800248e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002492:	4680      	mov	r8, r0
 8002494:	ee17 0a90 	vmov	r0, s15
 8002498:	4689      	mov	r9, r1
 800249a:	f7fe f855 	bl	8000548 <__aeabi_f2d>
 800249e:	1b65      	subs	r5, r4, r5
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4640      	mov	r0, r8
 80024a6:	4649      	mov	r1, r9
 80024a8:	f7fd fef0 	bl	800028c <__adddf3>
 80024ac:	ee07 5a90 	vmov	s15, r5
 80024b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800255c <moveMotor+0x118>
 80024b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b8:	4680      	mov	r8, r0
 80024ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024be:	4689      	mov	r9, r1
 80024c0:	ee17 0a90 	vmov	r0, s15
 80024c4:	f7fe f840 	bl	8000548 <__aeabi_f2d>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4640      	mov	r0, r8
 80024ce:	4649      	mov	r1, r9
 80024d0:	f7fd fedc 	bl	800028c <__adddf3>
 80024d4:	f7fe fb26 	bl	8000b24 <__aeabi_d2iz>
		if(i<0)
 80024d8:	1e05      	subs	r5, r0, #0
 80024da:	da2f      	bge.n	800253c <moveMotor+0xf8>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 80024dc:	2201      	movs	r2, #1
 80024de:	4611      	mov	r1, r2
 80024e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e4:	f7fe fcb2 	bl	8000e4c <HAL_GPIO_WritePin>
			i=-i;
 80024e8:	426d      	negs	r5, r5
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,i);
 80024ea:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800254c <moveMotor+0x108>
 80024ee:	2d64      	cmp	r5, #100	; 0x64
 80024f0:	f8d8 3000 	ldr.w	r3, [r8]
 80024f4:	bfa8      	it	ge
 80024f6:	2564      	movge	r5, #100	; 0x64
 80024f8:	639d      	str	r5, [r3, #56]	; 0x38
		HAL_Delay(10);
 80024fa:	200a      	movs	r0, #10
 80024fc:	f7fe fb6e 	bl	8000bdc <HAL_Delay>
	 transmit_int('e',e,1);
 8002500:	2201      	movs	r2, #1
 8002502:	4621      	mov	r1, r4
 8002504:	2065      	movs	r0, #101	; 0x65
 8002506:	f7ff ff77 	bl	80023f8 <transmit_int>
	 transmit_int('t',temp,1);
 800250a:	2201      	movs	r2, #1
 800250c:	6839      	ldr	r1, [r7, #0]
 800250e:	2074      	movs	r0, #116	; 0x74
 8002510:	f7ff ff72 	bl	80023f8 <transmit_int>
	}while(fabs(e)>20);
 8002514:	4620      	mov	r0, r4
 8002516:	f7fe f805 	bl	8000524 <__aeabi_i2d>
 800251a:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
 800251e:	2200      	movs	r2, #0
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <moveMotor+0x11c>)
 8002522:	4659      	mov	r1, fp
		old_e=e;
 8002524:	4625      	mov	r5, r4
	}while(fabs(e)>20);
 8002526:	f7fe faf3 	bl	8000b10 <__aeabi_dcmpgt>
 800252a:	2800      	cmp	r0, #0
 800252c:	d193      	bne.n	8002456 <moveMotor+0x12>
	HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_2);
 800252e:	2104      	movs	r1, #4
 8002530:	4640      	mov	r0, r8
}
 8002532:	b003      	add	sp, #12
 8002534:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_2);
 8002538:	f7ff bba0 	b.w	8001c7c <HAL_TIM_PWM_Stop>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 800253c:	2200      	movs	r2, #0
 800253e:	2101      	movs	r1, #1
 8002540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002544:	f7fe fc82 	bl	8000e4c <HAL_GPIO_WritePin>
 8002548:	e7cf      	b.n	80024ea <moveMotor+0xa6>
 800254a:	bf00      	nop
 800254c:	200000dc 	.word	0x200000dc
 8002550:	2000009c 	.word	0x2000009c
 8002554:	20000084 	.word	0x20000084
 8002558:	20000088 	.word	0x20000088
 800255c:	40266666 	.word	0x40266666
 8002560:	40340000 	.word	0x40340000

08002564 <main>:
{
 8002564:	b508      	push	{r3, lr}
	HAL_Init();
 8002566:	f7fe fb19 	bl	8000b9c <HAL_Init>
	SystemClock_Config();
 800256a:	f7ff fee7 	bl	800233c <SystemClock_Config>
	MX_GPIO_Init();
 800256e:	f7ff feb1 	bl	80022d4 <MX_GPIO_Init>
	MX_TIM2_Init();
 8002572:	f000 f927 	bl	80027c4 <MX_TIM2_Init>
	MX_TIM1_Init();
 8002576:	f000 f8a1 	bl	80026bc <MX_TIM1_Init>
	MX_USART2_UART_Init();
 800257a:	f000 f975 	bl	8002868 <MX_USART2_UART_Init>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800257e:	213c      	movs	r1, #60	; 0x3c
 8002580:	4809      	ldr	r0, [pc, #36]	; (80025a8 <main+0x44>)
 8002582:	f7ff f8b4 	bl	80016ee <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8002586:	2104      	movs	r1, #4
 8002588:	4808      	ldr	r0, [pc, #32]	; (80025ac <main+0x48>)
 800258a:	f7ff fb55 	bl	8001c38 <HAL_TIM_PWM_Start>
	moveMotor(10000);
 800258e:	f242 7010 	movw	r0, #10000	; 0x2710
 8002592:	f7ff ff57 	bl	8002444 <moveMotor>
			HAL_Delay(3000);
 8002596:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800259a:	f7fe fb1f 	bl	8000bdc <HAL_Delay>
			moveMotor(-10000);
 800259e:	4804      	ldr	r0, [pc, #16]	; (80025b0 <main+0x4c>)
 80025a0:	f7ff ff50 	bl	8002444 <moveMotor>
 80025a4:	e7fe      	b.n	80025a4 <main+0x40>
 80025a6:	bf00      	nop
 80025a8:	2000009c 	.word	0x2000009c
 80025ac:	200000dc 	.word	0x200000dc
 80025b0:	ffffd8f0 	.word	0xffffd8f0

080025b4 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 80025b4:	e7fe      	b.n	80025b4 <_Error_Handler>
	...

080025b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_MspInit+0x78>)
{
 80025ba:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	619a      	str	r2, [r3, #24]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025cc:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d0:	f7fe fb14 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	4611      	mov	r1, r2
 80025d8:	f06f 000b 	mvn.w	r0, #11
 80025dc:	f7fe fb20 	bl	8000c20 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80025e0:	2200      	movs	r2, #0
 80025e2:	4611      	mov	r1, r2
 80025e4:	f06f 000a 	mvn.w	r0, #10
 80025e8:	f7fe fb1a 	bl	8000c20 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80025ec:	2200      	movs	r2, #0
 80025ee:	4611      	mov	r1, r2
 80025f0:	f06f 0009 	mvn.w	r0, #9
 80025f4:	f7fe fb14 	bl	8000c20 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80025f8:	2200      	movs	r2, #0
 80025fa:	4611      	mov	r1, r2
 80025fc:	f06f 0004 	mvn.w	r0, #4
 8002600:	f7fe fb0e 	bl	8000c20 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	4611      	mov	r1, r2
 8002608:	f06f 0003 	mvn.w	r0, #3
 800260c:	f7fe fb08 	bl	8000c20 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	4611      	mov	r1, r2
 8002614:	f06f 0001 	mvn.w	r0, #1
 8002618:	f7fe fb02 	bl	8000c20 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800261c:	2200      	movs	r2, #0
 800261e:	4611      	mov	r1, r2
 8002620:	f04f 30ff 	mov.w	r0, #4294967295
 8002624:	f7fe fafc 	bl	8000c20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002628:	b003      	add	sp, #12
 800262a:	f85d fb04 	ldr.w	pc, [sp], #4
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000

08002634 <NMI_Handler>:
 8002634:	4770      	bx	lr

08002636 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002636:	e7fe      	b.n	8002636 <HardFault_Handler>

08002638 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002638:	e7fe      	b.n	8002638 <MemManage_Handler>

0800263a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800263a:	e7fe      	b.n	800263a <BusFault_Handler>

0800263c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800263c:	e7fe      	b.n	800263c <UsageFault_Handler>

0800263e <SVC_Handler>:
 800263e:	4770      	bx	lr

08002640 <DebugMon_Handler>:
 8002640:	4770      	bx	lr

08002642 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002642:	4770      	bx	lr

08002644 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002644:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002646:	f7fe fabb 	bl	8000bc0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800264a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800264e:	f7fe bb3e 	b.w	8000cce <HAL_SYSTICK_IRQHandler>
	...

08002654 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002654:	4915      	ldr	r1, [pc, #84]	; (80026ac <SystemInit+0x58>)
 8002656:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800265a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <SystemInit+0x5c>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800266c:	6858      	ldr	r0, [r3, #4]
 800266e:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <SystemInit+0x60>)
 8002670:	4002      	ands	r2, r0
 8002672:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800267a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800267e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002686:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800268e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002692:	f022 020f 	bic.w	r2, r2, #15
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002698:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800269a:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <SystemInit+0x64>)
 800269c:	4002      	ands	r2, r0
 800269e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80026a8:	608b      	str	r3, [r1, #8]
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00
 80026b0:	40021000 	.word	0x40021000
 80026b4:	f87fc00c 	.word	0xf87fc00c
 80026b8:	ff00fccc 	.word	0xff00fccc

080026bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026bc:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 80026be:	4817      	ldr	r0, [pc, #92]	; (800271c <MX_TIM1_Init+0x60>)
  htim1.Init.Prescaler = 0;
 80026c0:	4b17      	ldr	r3, [pc, #92]	; (8002720 <MX_TIM1_Init+0x64>)
 80026c2:	2400      	movs	r4, #0
{
 80026c4:	b08c      	sub	sp, #48	; 0x30
  htim1.Init.Prescaler = 0;
 80026c6:	e880 0018 	stmia.w	r0, {r3, r4}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 60000;
 80026ca:	f64e 2360 	movw	r3, #60000	; 0xea60
 80026ce:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026d0:	2303      	movs	r3, #3
 80026d2:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80026d4:	a903      	add	r1, sp, #12
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026d6:	2301      	movs	r3, #1
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d8:	6084      	str	r4, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026da:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80026dc:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026de:	6184      	str	r4, [r0, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026e0:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026e2:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026e4:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 80026e6:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026e8:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026ea:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026ec:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026ee:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80026f0:	f7ff f89e 	bl	8001830 <HAL_TIM_Encoder_Init>
 80026f4:	b118      	cbz	r0, 80026fe <MX_TIM1_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 80026f6:	214c      	movs	r1, #76	; 0x4c
 80026f8:	480a      	ldr	r0, [pc, #40]	; (8002724 <MX_TIM1_Init+0x68>)
 80026fa:	f7ff ff5b 	bl	80025b4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026fe:	4669      	mov	r1, sp
 8002700:	4806      	ldr	r0, [pc, #24]	; (800271c <MX_TIM1_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002702:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002704:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002706:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002708:	f7ff fbda 	bl	8001ec0 <HAL_TIMEx_MasterConfigSynchronization>
 800270c:	b118      	cbz	r0, 8002716 <MX_TIM1_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800270e:	2154      	movs	r1, #84	; 0x54
 8002710:	4804      	ldr	r0, [pc, #16]	; (8002724 <MX_TIM1_Init+0x68>)
 8002712:	f7ff ff4f 	bl	80025b4 <_Error_Handler>
  }

}
 8002716:	b00c      	add	sp, #48	; 0x30
 8002718:	bd10      	pop	{r4, pc}
 800271a:	bf00      	nop
 800271c:	2000009c 	.word	0x2000009c
 8002720:	40012c00 	.word	0x40012c00
 8002724:	08003276 	.word	0x08003276

08002728 <HAL_TIM_Encoder_MspInit>:
  HAL_TIM_MspPostInit(&htim2);

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002728:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM1)
 800272a:	6802      	ldr	r2, [r0, #0]
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <HAL_TIM_Encoder_MspInit+0x44>)
 800272e:	429a      	cmp	r2, r3
 8002730:	d119      	bne.n	8002766 <HAL_TIM_Encoder_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002732:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002736:	a901      	add	r1, sp, #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800273e:	619a      	str	r2, [r3, #24]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800274a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800274e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800275e:	2306      	movs	r3, #6
 8002760:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002762:	f7fe fab9 	bl	8000cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002766:	b007      	add	sp, #28
 8002768:	f85d fb04 	ldr.w	pc, [sp], #4
 800276c:	40012c00 	.word	0x40012c00

08002770 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8002770:	6803      	ldr	r3, [r0, #0]
 8002772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002776:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM2)
 8002778:	d10a      	bne.n	8002790 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800277a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	61da      	str	r2, [r3, #28]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002790:	b002      	add	sp, #8
 8002792:	4770      	bx	lr

08002794 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002794:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM2)
 8002796:	6803      	ldr	r3, [r0, #0]
 8002798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279c:	d10c      	bne.n	80027b8 <HAL_TIM_MspPostInit+0x24>
  /* USER CODE END TIM2_MspPostInit 0 */
  
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800279e:	2308      	movs	r3, #8
 80027a0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ac:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027ae:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b0:	4803      	ldr	r0, [pc, #12]	; (80027c0 <HAL_TIM_MspPostInit+0x2c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027b2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b4:	f7fe fa90 	bl	8000cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027b8:	b007      	add	sp, #28
 80027ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80027be:	bf00      	nop
 80027c0:	48000400 	.word	0x48000400

080027c4 <MX_TIM2_Init>:
{
 80027c4:	b500      	push	{lr}
  htim2.Instance = TIM2;
 80027c6:	4826      	ldr	r0, [pc, #152]	; (8002860 <MX_TIM2_Init+0x9c>)
  htim2.Init.Prescaler = 640;
 80027c8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80027cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
{
 80027d0:	b08f      	sub	sp, #60	; 0x3c
  htim2.Init.Prescaler = 640;
 80027d2:	e880 000a 	stmia.w	r0, {r1, r3}
  htim2.Init.Period = 100;
 80027d6:	2264      	movs	r2, #100	; 0x64
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d8:	2300      	movs	r3, #0
 80027da:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 100;
 80027dc:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027de:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027e2:	f7fe fff1 	bl	80017c8 <HAL_TIM_Base_Init>
 80027e6:	b118      	cbz	r0, 80027f0 <MX_TIM2_Init+0x2c>
    _Error_Handler(__FILE__, __LINE__);
 80027e8:	2167      	movs	r1, #103	; 0x67
 80027ea:	481e      	ldr	r0, [pc, #120]	; (8002864 <MX_TIM2_Init+0xa0>)
 80027ec:	f7ff fee2 	bl	80025b4 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f0:	a90e      	add	r1, sp, #56	; 0x38
 80027f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f6:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027fa:	4819      	ldr	r0, [pc, #100]	; (8002860 <MX_TIM2_Init+0x9c>)
 80027fc:	f7ff f95a 	bl	8001ab4 <HAL_TIM_ConfigClockSource>
 8002800:	b118      	cbz	r0, 800280a <MX_TIM2_Init+0x46>
    _Error_Handler(__FILE__, __LINE__);
 8002802:	216d      	movs	r1, #109	; 0x6d
 8002804:	4817      	ldr	r0, [pc, #92]	; (8002864 <MX_TIM2_Init+0xa0>)
 8002806:	f7ff fed5 	bl	80025b4 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800280a:	4815      	ldr	r0, [pc, #84]	; (8002860 <MX_TIM2_Init+0x9c>)
 800280c:	f7fe fff6 	bl	80017fc <HAL_TIM_PWM_Init>
 8002810:	b118      	cbz	r0, 800281a <MX_TIM2_Init+0x56>
    _Error_Handler(__FILE__, __LINE__);
 8002812:	2172      	movs	r1, #114	; 0x72
 8002814:	4813      	ldr	r0, [pc, #76]	; (8002864 <MX_TIM2_Init+0xa0>)
 8002816:	f7ff fecd 	bl	80025b4 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800281a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800281c:	4669      	mov	r1, sp
 800281e:	4810      	ldr	r0, [pc, #64]	; (8002860 <MX_TIM2_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002820:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002822:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002824:	f7ff fb4c 	bl	8001ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8002828:	b118      	cbz	r0, 8002832 <MX_TIM2_Init+0x6e>
    _Error_Handler(__FILE__, __LINE__);
 800282a:	2179      	movs	r1, #121	; 0x79
 800282c:	480d      	ldr	r0, [pc, #52]	; (8002864 <MX_TIM2_Init+0xa0>)
 800282e:	f7ff fec1 	bl	80025b4 <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002832:	2360      	movs	r3, #96	; 0x60
 8002834:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002836:	2204      	movs	r2, #4
  sConfigOC.Pulse = 0;
 8002838:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800283a:	a907      	add	r1, sp, #28
 800283c:	4808      	ldr	r0, [pc, #32]	; (8002860 <MX_TIM2_Init+0x9c>)
  sConfigOC.Pulse = 0;
 800283e:	9308      	str	r3, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002840:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002842:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002844:	f7ff fab4 	bl	8001db0 <HAL_TIM_PWM_ConfigChannel>
 8002848:	b118      	cbz	r0, 8002852 <MX_TIM2_Init+0x8e>
    _Error_Handler(__FILE__, __LINE__);
 800284a:	2182      	movs	r1, #130	; 0x82
 800284c:	4805      	ldr	r0, [pc, #20]	; (8002864 <MX_TIM2_Init+0xa0>)
 800284e:	f7ff feb1 	bl	80025b4 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8002852:	4803      	ldr	r0, [pc, #12]	; (8002860 <MX_TIM2_Init+0x9c>)
 8002854:	f7ff ff9e 	bl	8002794 <HAL_TIM_MspPostInit>
}
 8002858:	b00f      	add	sp, #60	; 0x3c
 800285a:	f85d fb04 	ldr.w	pc, [sp], #4
 800285e:	bf00      	nop
 8002860:	200000dc 	.word	0x200000dc
 8002864:	08003276 	.word	0x08003276

08002868 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8002868:	480c      	ldr	r0, [pc, #48]	; (800289c <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 38400;
 800286a:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <MX_USART2_UART_Init+0x38>)
{
 800286c:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 38400;
 800286e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002872:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002876:	2300      	movs	r3, #0
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002878:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800287a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800287c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800287e:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002880:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002882:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002884:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002886:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002888:	f7ff fcf2 	bl	8002270 <HAL_UART_Init>
 800288c:	b128      	cbz	r0, 800289a <MX_USART2_UART_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 800288e:	2143      	movs	r1, #67	; 0x43
 8002890:	4804      	ldr	r0, [pc, #16]	; (80028a4 <MX_USART2_UART_Init+0x3c>)
  }

}
 8002892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002896:	f7ff be8d 	b.w	80025b4 <_Error_Handler>
 800289a:	bd08      	pop	{r3, pc}
 800289c:	2000011c 	.word	0x2000011c
 80028a0:	40004400 	.word	0x40004400
 80028a4:	08003283 	.word	0x08003283

080028a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 80028aa:	6802      	ldr	r2, [r0, #0]
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_UART_MspInit+0x44>)
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d119      	bne.n	80028e6 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028b2:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b6:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80028b8:	69da      	ldr	r2, [r3, #28]
 80028ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028be:	61da      	str	r2, [r3, #28]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028ca:	230c      	movs	r3, #12
 80028cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028d6:	2303      	movs	r3, #3
 80028d8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028de:	2307      	movs	r3, #7
 80028e0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e2:	f7fe f9f9 	bl	8000cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028e6:	b007      	add	sp, #28
 80028e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80028ec:	40004400 	.word	0x40004400

080028f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002928 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80028f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80028f6:	e003      	b.n	8002900 <LoopCopyDataInit>

080028f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80028fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80028fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80028fe:	3104      	adds	r1, #4

08002900 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002900:	480b      	ldr	r0, [pc, #44]	; (8002930 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002902:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002904:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002906:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002908:	d3f6      	bcc.n	80028f8 <CopyDataInit>
	ldr	r2, =_sbss
 800290a:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <LoopForever+0x12>)
	b	LoopFillZerobss
 800290c:	e002      	b.n	8002914 <LoopFillZerobss>

0800290e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800290e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002910:	f842 3b04 	str.w	r3, [r2], #4

08002914 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <LoopForever+0x16>)
	cmp	r2, r3
 8002916:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002918:	d3f9      	bcc.n	800290e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800291a:	f7ff fe9b 	bl	8002654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800291e:	f000 f811 	bl	8002944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002922:	f7ff fe1f 	bl	8002564 <main>

08002926 <LoopForever>:

LoopForever:
    b LoopForever
 8002926:	e7fe      	b.n	8002926 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002928:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800292c:	080032d0 	.word	0x080032d0
	ldr	r0, =_sdata
 8002930:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002934:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8002938:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 800293c:	20000190 	.word	0x20000190

08002940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002940:	e7fe      	b.n	8002940 <ADC1_2_IRQHandler>
	...

08002944 <__libc_init_array>:
 8002944:	b570      	push	{r4, r5, r6, lr}
 8002946:	4e0d      	ldr	r6, [pc, #52]	; (800297c <__libc_init_array+0x38>)
 8002948:	4c0d      	ldr	r4, [pc, #52]	; (8002980 <__libc_init_array+0x3c>)
 800294a:	1ba4      	subs	r4, r4, r6
 800294c:	10a4      	asrs	r4, r4, #2
 800294e:	2500      	movs	r5, #0
 8002950:	42a5      	cmp	r5, r4
 8002952:	d109      	bne.n	8002968 <__libc_init_array+0x24>
 8002954:	4e0b      	ldr	r6, [pc, #44]	; (8002984 <__libc_init_array+0x40>)
 8002956:	4c0c      	ldr	r4, [pc, #48]	; (8002988 <__libc_init_array+0x44>)
 8002958:	f000 fc5c 	bl	8003214 <_init>
 800295c:	1ba4      	subs	r4, r4, r6
 800295e:	10a4      	asrs	r4, r4, #2
 8002960:	2500      	movs	r5, #0
 8002962:	42a5      	cmp	r5, r4
 8002964:	d105      	bne.n	8002972 <__libc_init_array+0x2e>
 8002966:	bd70      	pop	{r4, r5, r6, pc}
 8002968:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800296c:	4798      	blx	r3
 800296e:	3501      	adds	r5, #1
 8002970:	e7ee      	b.n	8002950 <__libc_init_array+0xc>
 8002972:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002976:	4798      	blx	r3
 8002978:	3501      	adds	r5, #1
 800297a:	e7f2      	b.n	8002962 <__libc_init_array+0x1e>
 800297c:	080032c8 	.word	0x080032c8
 8002980:	080032c8 	.word	0x080032c8
 8002984:	080032c8 	.word	0x080032c8
 8002988:	080032cc 	.word	0x080032cc

0800298c <memset>:
 800298c:	4402      	add	r2, r0
 800298e:	4603      	mov	r3, r0
 8002990:	4293      	cmp	r3, r2
 8002992:	d100      	bne.n	8002996 <memset+0xa>
 8002994:	4770      	bx	lr
 8002996:	f803 1b01 	strb.w	r1, [r3], #1
 800299a:	e7f9      	b.n	8002990 <memset+0x4>

0800299c <sniprintf>:
 800299c:	b40c      	push	{r2, r3}
 800299e:	b530      	push	{r4, r5, lr}
 80029a0:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <sniprintf+0x64>)
 80029a2:	1e0c      	subs	r4, r1, #0
 80029a4:	b09d      	sub	sp, #116	; 0x74
 80029a6:	681d      	ldr	r5, [r3, #0]
 80029a8:	da08      	bge.n	80029bc <sniprintf+0x20>
 80029aa:	238b      	movs	r3, #139	; 0x8b
 80029ac:	602b      	str	r3, [r5, #0]
 80029ae:	f04f 30ff 	mov.w	r0, #4294967295
 80029b2:	b01d      	add	sp, #116	; 0x74
 80029b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80029b8:	b002      	add	sp, #8
 80029ba:	4770      	bx	lr
 80029bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80029c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80029c4:	bf14      	ite	ne
 80029c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80029ca:	4623      	moveq	r3, r4
 80029cc:	9304      	str	r3, [sp, #16]
 80029ce:	9307      	str	r3, [sp, #28]
 80029d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d4:	9002      	str	r0, [sp, #8]
 80029d6:	9006      	str	r0, [sp, #24]
 80029d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80029dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80029de:	ab21      	add	r3, sp, #132	; 0x84
 80029e0:	a902      	add	r1, sp, #8
 80029e2:	4628      	mov	r0, r5
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	f000 f869 	bl	8002abc <_svfiprintf_r>
 80029ea:	1c43      	adds	r3, r0, #1
 80029ec:	bfbc      	itt	lt
 80029ee:	238b      	movlt	r3, #139	; 0x8b
 80029f0:	602b      	strlt	r3, [r5, #0]
 80029f2:	2c00      	cmp	r4, #0
 80029f4:	d0dd      	beq.n	80029b2 <sniprintf+0x16>
 80029f6:	9b02      	ldr	r3, [sp, #8]
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	e7d9      	b.n	80029b2 <sniprintf+0x16>
 80029fe:	bf00      	nop
 8002a00:	20000004 	.word	0x20000004

08002a04 <__ssputs_r>:
 8002a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a08:	688e      	ldr	r6, [r1, #8]
 8002a0a:	429e      	cmp	r6, r3
 8002a0c:	4682      	mov	sl, r0
 8002a0e:	460c      	mov	r4, r1
 8002a10:	4691      	mov	r9, r2
 8002a12:	4698      	mov	r8, r3
 8002a14:	d835      	bhi.n	8002a82 <__ssputs_r+0x7e>
 8002a16:	898a      	ldrh	r2, [r1, #12]
 8002a18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a1c:	d031      	beq.n	8002a82 <__ssputs_r+0x7e>
 8002a1e:	6825      	ldr	r5, [r4, #0]
 8002a20:	6909      	ldr	r1, [r1, #16]
 8002a22:	1a6f      	subs	r7, r5, r1
 8002a24:	6965      	ldr	r5, [r4, #20]
 8002a26:	2302      	movs	r3, #2
 8002a28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a2c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002a30:	f108 0301 	add.w	r3, r8, #1
 8002a34:	443b      	add	r3, r7
 8002a36:	429d      	cmp	r5, r3
 8002a38:	bf38      	it	cc
 8002a3a:	461d      	movcc	r5, r3
 8002a3c:	0553      	lsls	r3, r2, #21
 8002a3e:	d531      	bpl.n	8002aa4 <__ssputs_r+0xa0>
 8002a40:	4629      	mov	r1, r5
 8002a42:	f000 fb39 	bl	80030b8 <_malloc_r>
 8002a46:	4606      	mov	r6, r0
 8002a48:	b950      	cbnz	r0, 8002a60 <__ssputs_r+0x5c>
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	f8ca 3000 	str.w	r3, [sl]
 8002a50:	89a3      	ldrh	r3, [r4, #12]
 8002a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a56:	81a3      	strh	r3, [r4, #12]
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a60:	463a      	mov	r2, r7
 8002a62:	6921      	ldr	r1, [r4, #16]
 8002a64:	f000 fab4 	bl	8002fd0 <memcpy>
 8002a68:	89a3      	ldrh	r3, [r4, #12]
 8002a6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a72:	81a3      	strh	r3, [r4, #12]
 8002a74:	6126      	str	r6, [r4, #16]
 8002a76:	6165      	str	r5, [r4, #20]
 8002a78:	443e      	add	r6, r7
 8002a7a:	1bed      	subs	r5, r5, r7
 8002a7c:	6026      	str	r6, [r4, #0]
 8002a7e:	60a5      	str	r5, [r4, #8]
 8002a80:	4646      	mov	r6, r8
 8002a82:	4546      	cmp	r6, r8
 8002a84:	bf28      	it	cs
 8002a86:	4646      	movcs	r6, r8
 8002a88:	4632      	mov	r2, r6
 8002a8a:	4649      	mov	r1, r9
 8002a8c:	6820      	ldr	r0, [r4, #0]
 8002a8e:	f000 faaa 	bl	8002fe6 <memmove>
 8002a92:	68a3      	ldr	r3, [r4, #8]
 8002a94:	1b9b      	subs	r3, r3, r6
 8002a96:	60a3      	str	r3, [r4, #8]
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	441e      	add	r6, r3
 8002a9c:	6026      	str	r6, [r4, #0]
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aa4:	462a      	mov	r2, r5
 8002aa6:	f000 fb65 	bl	8003174 <_realloc_r>
 8002aaa:	4606      	mov	r6, r0
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d1e1      	bne.n	8002a74 <__ssputs_r+0x70>
 8002ab0:	6921      	ldr	r1, [r4, #16]
 8002ab2:	4650      	mov	r0, sl
 8002ab4:	f000 fab2 	bl	800301c <_free_r>
 8002ab8:	e7c7      	b.n	8002a4a <__ssputs_r+0x46>
	...

08002abc <_svfiprintf_r>:
 8002abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac0:	b09d      	sub	sp, #116	; 0x74
 8002ac2:	4680      	mov	r8, r0
 8002ac4:	9303      	str	r3, [sp, #12]
 8002ac6:	898b      	ldrh	r3, [r1, #12]
 8002ac8:	061c      	lsls	r4, r3, #24
 8002aca:	460d      	mov	r5, r1
 8002acc:	4616      	mov	r6, r2
 8002ace:	d50f      	bpl.n	8002af0 <_svfiprintf_r+0x34>
 8002ad0:	690b      	ldr	r3, [r1, #16]
 8002ad2:	b96b      	cbnz	r3, 8002af0 <_svfiprintf_r+0x34>
 8002ad4:	2140      	movs	r1, #64	; 0x40
 8002ad6:	f000 faef 	bl	80030b8 <_malloc_r>
 8002ada:	6028      	str	r0, [r5, #0]
 8002adc:	6128      	str	r0, [r5, #16]
 8002ade:	b928      	cbnz	r0, 8002aec <_svfiprintf_r+0x30>
 8002ae0:	230c      	movs	r3, #12
 8002ae2:	f8c8 3000 	str.w	r3, [r8]
 8002ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8002aea:	e0c5      	b.n	8002c78 <_svfiprintf_r+0x1bc>
 8002aec:	2340      	movs	r3, #64	; 0x40
 8002aee:	616b      	str	r3, [r5, #20]
 8002af0:	2300      	movs	r3, #0
 8002af2:	9309      	str	r3, [sp, #36]	; 0x24
 8002af4:	2320      	movs	r3, #32
 8002af6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002afa:	2330      	movs	r3, #48	; 0x30
 8002afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b00:	f04f 0b01 	mov.w	fp, #1
 8002b04:	4637      	mov	r7, r6
 8002b06:	463c      	mov	r4, r7
 8002b08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d13c      	bne.n	8002b8a <_svfiprintf_r+0xce>
 8002b10:	ebb7 0a06 	subs.w	sl, r7, r6
 8002b14:	d00b      	beq.n	8002b2e <_svfiprintf_r+0x72>
 8002b16:	4653      	mov	r3, sl
 8002b18:	4632      	mov	r2, r6
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	4640      	mov	r0, r8
 8002b1e:	f7ff ff71 	bl	8002a04 <__ssputs_r>
 8002b22:	3001      	adds	r0, #1
 8002b24:	f000 80a3 	beq.w	8002c6e <_svfiprintf_r+0x1b2>
 8002b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b2a:	4453      	add	r3, sl
 8002b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8002b2e:	783b      	ldrb	r3, [r7, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 809c 	beq.w	8002c6e <_svfiprintf_r+0x1b2>
 8002b36:	2300      	movs	r3, #0
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3c:	9304      	str	r3, [sp, #16]
 8002b3e:	9307      	str	r3, [sp, #28]
 8002b40:	9205      	str	r2, [sp, #20]
 8002b42:	9306      	str	r3, [sp, #24]
 8002b44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b48:	931a      	str	r3, [sp, #104]	; 0x68
 8002b4a:	2205      	movs	r2, #5
 8002b4c:	7821      	ldrb	r1, [r4, #0]
 8002b4e:	4850      	ldr	r0, [pc, #320]	; (8002c90 <_svfiprintf_r+0x1d4>)
 8002b50:	f7fd fb46 	bl	80001e0 <memchr>
 8002b54:	1c67      	adds	r7, r4, #1
 8002b56:	9b04      	ldr	r3, [sp, #16]
 8002b58:	b9d8      	cbnz	r0, 8002b92 <_svfiprintf_r+0xd6>
 8002b5a:	06d9      	lsls	r1, r3, #27
 8002b5c:	bf44      	itt	mi
 8002b5e:	2220      	movmi	r2, #32
 8002b60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b64:	071a      	lsls	r2, r3, #28
 8002b66:	bf44      	itt	mi
 8002b68:	222b      	movmi	r2, #43	; 0x2b
 8002b6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b6e:	7822      	ldrb	r2, [r4, #0]
 8002b70:	2a2a      	cmp	r2, #42	; 0x2a
 8002b72:	d016      	beq.n	8002ba2 <_svfiprintf_r+0xe6>
 8002b74:	9a07      	ldr	r2, [sp, #28]
 8002b76:	2100      	movs	r1, #0
 8002b78:	200a      	movs	r0, #10
 8002b7a:	4627      	mov	r7, r4
 8002b7c:	3401      	adds	r4, #1
 8002b7e:	783b      	ldrb	r3, [r7, #0]
 8002b80:	3b30      	subs	r3, #48	; 0x30
 8002b82:	2b09      	cmp	r3, #9
 8002b84:	d951      	bls.n	8002c2a <_svfiprintf_r+0x16e>
 8002b86:	b1c9      	cbz	r1, 8002bbc <_svfiprintf_r+0x100>
 8002b88:	e011      	b.n	8002bae <_svfiprintf_r+0xf2>
 8002b8a:	2b25      	cmp	r3, #37	; 0x25
 8002b8c:	d0c0      	beq.n	8002b10 <_svfiprintf_r+0x54>
 8002b8e:	4627      	mov	r7, r4
 8002b90:	e7b9      	b.n	8002b06 <_svfiprintf_r+0x4a>
 8002b92:	4a3f      	ldr	r2, [pc, #252]	; (8002c90 <_svfiprintf_r+0x1d4>)
 8002b94:	1a80      	subs	r0, r0, r2
 8002b96:	fa0b f000 	lsl.w	r0, fp, r0
 8002b9a:	4318      	orrs	r0, r3
 8002b9c:	9004      	str	r0, [sp, #16]
 8002b9e:	463c      	mov	r4, r7
 8002ba0:	e7d3      	b.n	8002b4a <_svfiprintf_r+0x8e>
 8002ba2:	9a03      	ldr	r2, [sp, #12]
 8002ba4:	1d11      	adds	r1, r2, #4
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	9103      	str	r1, [sp, #12]
 8002baa:	2a00      	cmp	r2, #0
 8002bac:	db01      	blt.n	8002bb2 <_svfiprintf_r+0xf6>
 8002bae:	9207      	str	r2, [sp, #28]
 8002bb0:	e004      	b.n	8002bbc <_svfiprintf_r+0x100>
 8002bb2:	4252      	negs	r2, r2
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	9207      	str	r2, [sp, #28]
 8002bba:	9304      	str	r3, [sp, #16]
 8002bbc:	783b      	ldrb	r3, [r7, #0]
 8002bbe:	2b2e      	cmp	r3, #46	; 0x2e
 8002bc0:	d10e      	bne.n	8002be0 <_svfiprintf_r+0x124>
 8002bc2:	787b      	ldrb	r3, [r7, #1]
 8002bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8002bc6:	f107 0101 	add.w	r1, r7, #1
 8002bca:	d132      	bne.n	8002c32 <_svfiprintf_r+0x176>
 8002bcc:	9b03      	ldr	r3, [sp, #12]
 8002bce:	1d1a      	adds	r2, r3, #4
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	9203      	str	r2, [sp, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bfb8      	it	lt
 8002bd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bdc:	3702      	adds	r7, #2
 8002bde:	9305      	str	r3, [sp, #20]
 8002be0:	4c2c      	ldr	r4, [pc, #176]	; (8002c94 <_svfiprintf_r+0x1d8>)
 8002be2:	7839      	ldrb	r1, [r7, #0]
 8002be4:	2203      	movs	r2, #3
 8002be6:	4620      	mov	r0, r4
 8002be8:	f7fd fafa 	bl	80001e0 <memchr>
 8002bec:	b138      	cbz	r0, 8002bfe <_svfiprintf_r+0x142>
 8002bee:	2340      	movs	r3, #64	; 0x40
 8002bf0:	1b00      	subs	r0, r0, r4
 8002bf2:	fa03 f000 	lsl.w	r0, r3, r0
 8002bf6:	9b04      	ldr	r3, [sp, #16]
 8002bf8:	4303      	orrs	r3, r0
 8002bfa:	9304      	str	r3, [sp, #16]
 8002bfc:	3701      	adds	r7, #1
 8002bfe:	7839      	ldrb	r1, [r7, #0]
 8002c00:	4825      	ldr	r0, [pc, #148]	; (8002c98 <_svfiprintf_r+0x1dc>)
 8002c02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c06:	2206      	movs	r2, #6
 8002c08:	1c7e      	adds	r6, r7, #1
 8002c0a:	f7fd fae9 	bl	80001e0 <memchr>
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	d035      	beq.n	8002c7e <_svfiprintf_r+0x1c2>
 8002c12:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <_svfiprintf_r+0x1e0>)
 8002c14:	b9fb      	cbnz	r3, 8002c56 <_svfiprintf_r+0x19a>
 8002c16:	9b03      	ldr	r3, [sp, #12]
 8002c18:	3307      	adds	r3, #7
 8002c1a:	f023 0307 	bic.w	r3, r3, #7
 8002c1e:	3308      	adds	r3, #8
 8002c20:	9303      	str	r3, [sp, #12]
 8002c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c24:	444b      	add	r3, r9
 8002c26:	9309      	str	r3, [sp, #36]	; 0x24
 8002c28:	e76c      	b.n	8002b04 <_svfiprintf_r+0x48>
 8002c2a:	fb00 3202 	mla	r2, r0, r2, r3
 8002c2e:	2101      	movs	r1, #1
 8002c30:	e7a3      	b.n	8002b7a <_svfiprintf_r+0xbe>
 8002c32:	2300      	movs	r3, #0
 8002c34:	9305      	str	r3, [sp, #20]
 8002c36:	4618      	mov	r0, r3
 8002c38:	240a      	movs	r4, #10
 8002c3a:	460f      	mov	r7, r1
 8002c3c:	3101      	adds	r1, #1
 8002c3e:	783a      	ldrb	r2, [r7, #0]
 8002c40:	3a30      	subs	r2, #48	; 0x30
 8002c42:	2a09      	cmp	r2, #9
 8002c44:	d903      	bls.n	8002c4e <_svfiprintf_r+0x192>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0ca      	beq.n	8002be0 <_svfiprintf_r+0x124>
 8002c4a:	9005      	str	r0, [sp, #20]
 8002c4c:	e7c8      	b.n	8002be0 <_svfiprintf_r+0x124>
 8002c4e:	fb04 2000 	mla	r0, r4, r0, r2
 8002c52:	2301      	movs	r3, #1
 8002c54:	e7f1      	b.n	8002c3a <_svfiprintf_r+0x17e>
 8002c56:	ab03      	add	r3, sp, #12
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	462a      	mov	r2, r5
 8002c5c:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <_svfiprintf_r+0x1e4>)
 8002c5e:	a904      	add	r1, sp, #16
 8002c60:	4640      	mov	r0, r8
 8002c62:	f3af 8000 	nop.w
 8002c66:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c6a:	4681      	mov	r9, r0
 8002c6c:	d1d9      	bne.n	8002c22 <_svfiprintf_r+0x166>
 8002c6e:	89ab      	ldrh	r3, [r5, #12]
 8002c70:	065b      	lsls	r3, r3, #25
 8002c72:	f53f af38 	bmi.w	8002ae6 <_svfiprintf_r+0x2a>
 8002c76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c78:	b01d      	add	sp, #116	; 0x74
 8002c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c7e:	ab03      	add	r3, sp, #12
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	462a      	mov	r2, r5
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <_svfiprintf_r+0x1e4>)
 8002c86:	a904      	add	r1, sp, #16
 8002c88:	4640      	mov	r0, r8
 8002c8a:	f000 f881 	bl	8002d90 <_printf_i>
 8002c8e:	e7ea      	b.n	8002c66 <_svfiprintf_r+0x1aa>
 8002c90:	08003292 	.word	0x08003292
 8002c94:	08003298 	.word	0x08003298
 8002c98:	0800329c 	.word	0x0800329c
 8002c9c:	00000000 	.word	0x00000000
 8002ca0:	08002a05 	.word	0x08002a05

08002ca4 <_printf_common>:
 8002ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ca8:	4691      	mov	r9, r2
 8002caa:	461f      	mov	r7, r3
 8002cac:	688a      	ldr	r2, [r1, #8]
 8002cae:	690b      	ldr	r3, [r1, #16]
 8002cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	bfb8      	it	lt
 8002cb8:	4613      	movlt	r3, r2
 8002cba:	f8c9 3000 	str.w	r3, [r9]
 8002cbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cc2:	4606      	mov	r6, r0
 8002cc4:	460c      	mov	r4, r1
 8002cc6:	b112      	cbz	r2, 8002cce <_printf_common+0x2a>
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f8c9 3000 	str.w	r3, [r9]
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	0699      	lsls	r1, r3, #26
 8002cd2:	bf42      	ittt	mi
 8002cd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002cd8:	3302      	addmi	r3, #2
 8002cda:	f8c9 3000 	strmi.w	r3, [r9]
 8002cde:	6825      	ldr	r5, [r4, #0]
 8002ce0:	f015 0506 	ands.w	r5, r5, #6
 8002ce4:	d107      	bne.n	8002cf6 <_printf_common+0x52>
 8002ce6:	f104 0a19 	add.w	sl, r4, #25
 8002cea:	68e3      	ldr	r3, [r4, #12]
 8002cec:	f8d9 2000 	ldr.w	r2, [r9]
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	429d      	cmp	r5, r3
 8002cf4:	db29      	blt.n	8002d4a <_printf_common+0xa6>
 8002cf6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002cfa:	6822      	ldr	r2, [r4, #0]
 8002cfc:	3300      	adds	r3, #0
 8002cfe:	bf18      	it	ne
 8002d00:	2301      	movne	r3, #1
 8002d02:	0692      	lsls	r2, r2, #26
 8002d04:	d42e      	bmi.n	8002d64 <_printf_common+0xc0>
 8002d06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d0a:	4639      	mov	r1, r7
 8002d0c:	4630      	mov	r0, r6
 8002d0e:	47c0      	blx	r8
 8002d10:	3001      	adds	r0, #1
 8002d12:	d021      	beq.n	8002d58 <_printf_common+0xb4>
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	68e5      	ldr	r5, [r4, #12]
 8002d18:	f8d9 2000 	ldr.w	r2, [r9]
 8002d1c:	f003 0306 	and.w	r3, r3, #6
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	bf08      	it	eq
 8002d24:	1aad      	subeq	r5, r5, r2
 8002d26:	68a3      	ldr	r3, [r4, #8]
 8002d28:	6922      	ldr	r2, [r4, #16]
 8002d2a:	bf0c      	ite	eq
 8002d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d30:	2500      	movne	r5, #0
 8002d32:	4293      	cmp	r3, r2
 8002d34:	bfc4      	itt	gt
 8002d36:	1a9b      	subgt	r3, r3, r2
 8002d38:	18ed      	addgt	r5, r5, r3
 8002d3a:	f04f 0900 	mov.w	r9, #0
 8002d3e:	341a      	adds	r4, #26
 8002d40:	454d      	cmp	r5, r9
 8002d42:	d11b      	bne.n	8002d7c <_printf_common+0xd8>
 8002d44:	2000      	movs	r0, #0
 8002d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	4652      	mov	r2, sl
 8002d4e:	4639      	mov	r1, r7
 8002d50:	4630      	mov	r0, r6
 8002d52:	47c0      	blx	r8
 8002d54:	3001      	adds	r0, #1
 8002d56:	d103      	bne.n	8002d60 <_printf_common+0xbc>
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d60:	3501      	adds	r5, #1
 8002d62:	e7c2      	b.n	8002cea <_printf_common+0x46>
 8002d64:	18e1      	adds	r1, r4, r3
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	2030      	movs	r0, #48	; 0x30
 8002d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d6e:	4422      	add	r2, r4
 8002d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d78:	3302      	adds	r3, #2
 8002d7a:	e7c4      	b.n	8002d06 <_printf_common+0x62>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	4622      	mov	r2, r4
 8002d80:	4639      	mov	r1, r7
 8002d82:	4630      	mov	r0, r6
 8002d84:	47c0      	blx	r8
 8002d86:	3001      	adds	r0, #1
 8002d88:	d0e6      	beq.n	8002d58 <_printf_common+0xb4>
 8002d8a:	f109 0901 	add.w	r9, r9, #1
 8002d8e:	e7d7      	b.n	8002d40 <_printf_common+0x9c>

08002d90 <_printf_i>:
 8002d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d94:	4617      	mov	r7, r2
 8002d96:	7e0a      	ldrb	r2, [r1, #24]
 8002d98:	b085      	sub	sp, #20
 8002d9a:	2a6e      	cmp	r2, #110	; 0x6e
 8002d9c:	4698      	mov	r8, r3
 8002d9e:	4606      	mov	r6, r0
 8002da0:	460c      	mov	r4, r1
 8002da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002da4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002da8:	f000 80bc 	beq.w	8002f24 <_printf_i+0x194>
 8002dac:	d81a      	bhi.n	8002de4 <_printf_i+0x54>
 8002dae:	2a63      	cmp	r2, #99	; 0x63
 8002db0:	d02e      	beq.n	8002e10 <_printf_i+0x80>
 8002db2:	d80a      	bhi.n	8002dca <_printf_i+0x3a>
 8002db4:	2a00      	cmp	r2, #0
 8002db6:	f000 80c8 	beq.w	8002f4a <_printf_i+0x1ba>
 8002dba:	2a58      	cmp	r2, #88	; 0x58
 8002dbc:	f000 808a 	beq.w	8002ed4 <_printf_i+0x144>
 8002dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dc4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002dc8:	e02a      	b.n	8002e20 <_printf_i+0x90>
 8002dca:	2a64      	cmp	r2, #100	; 0x64
 8002dcc:	d001      	beq.n	8002dd2 <_printf_i+0x42>
 8002dce:	2a69      	cmp	r2, #105	; 0x69
 8002dd0:	d1f6      	bne.n	8002dc0 <_printf_i+0x30>
 8002dd2:	6821      	ldr	r1, [r4, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002dda:	d023      	beq.n	8002e24 <_printf_i+0x94>
 8002ddc:	1d11      	adds	r1, r2, #4
 8002dde:	6019      	str	r1, [r3, #0]
 8002de0:	6813      	ldr	r3, [r2, #0]
 8002de2:	e027      	b.n	8002e34 <_printf_i+0xa4>
 8002de4:	2a73      	cmp	r2, #115	; 0x73
 8002de6:	f000 80b4 	beq.w	8002f52 <_printf_i+0x1c2>
 8002dea:	d808      	bhi.n	8002dfe <_printf_i+0x6e>
 8002dec:	2a6f      	cmp	r2, #111	; 0x6f
 8002dee:	d02a      	beq.n	8002e46 <_printf_i+0xb6>
 8002df0:	2a70      	cmp	r2, #112	; 0x70
 8002df2:	d1e5      	bne.n	8002dc0 <_printf_i+0x30>
 8002df4:	680a      	ldr	r2, [r1, #0]
 8002df6:	f042 0220 	orr.w	r2, r2, #32
 8002dfa:	600a      	str	r2, [r1, #0]
 8002dfc:	e003      	b.n	8002e06 <_printf_i+0x76>
 8002dfe:	2a75      	cmp	r2, #117	; 0x75
 8002e00:	d021      	beq.n	8002e46 <_printf_i+0xb6>
 8002e02:	2a78      	cmp	r2, #120	; 0x78
 8002e04:	d1dc      	bne.n	8002dc0 <_printf_i+0x30>
 8002e06:	2278      	movs	r2, #120	; 0x78
 8002e08:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002e0c:	496e      	ldr	r1, [pc, #440]	; (8002fc8 <_printf_i+0x238>)
 8002e0e:	e064      	b.n	8002eda <_printf_i+0x14a>
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002e16:	1d11      	adds	r1, r2, #4
 8002e18:	6019      	str	r1, [r3, #0]
 8002e1a:	6813      	ldr	r3, [r2, #0]
 8002e1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0a3      	b.n	8002f6c <_printf_i+0x1dc>
 8002e24:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002e28:	f102 0104 	add.w	r1, r2, #4
 8002e2c:	6019      	str	r1, [r3, #0]
 8002e2e:	d0d7      	beq.n	8002de0 <_printf_i+0x50>
 8002e30:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	da03      	bge.n	8002e40 <_printf_i+0xb0>
 8002e38:	222d      	movs	r2, #45	; 0x2d
 8002e3a:	425b      	negs	r3, r3
 8002e3c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002e40:	4962      	ldr	r1, [pc, #392]	; (8002fcc <_printf_i+0x23c>)
 8002e42:	220a      	movs	r2, #10
 8002e44:	e017      	b.n	8002e76 <_printf_i+0xe6>
 8002e46:	6820      	ldr	r0, [r4, #0]
 8002e48:	6819      	ldr	r1, [r3, #0]
 8002e4a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e4e:	d003      	beq.n	8002e58 <_printf_i+0xc8>
 8002e50:	1d08      	adds	r0, r1, #4
 8002e52:	6018      	str	r0, [r3, #0]
 8002e54:	680b      	ldr	r3, [r1, #0]
 8002e56:	e006      	b.n	8002e66 <_printf_i+0xd6>
 8002e58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e5c:	f101 0004 	add.w	r0, r1, #4
 8002e60:	6018      	str	r0, [r3, #0]
 8002e62:	d0f7      	beq.n	8002e54 <_printf_i+0xc4>
 8002e64:	880b      	ldrh	r3, [r1, #0]
 8002e66:	4959      	ldr	r1, [pc, #356]	; (8002fcc <_printf_i+0x23c>)
 8002e68:	2a6f      	cmp	r2, #111	; 0x6f
 8002e6a:	bf14      	ite	ne
 8002e6c:	220a      	movne	r2, #10
 8002e6e:	2208      	moveq	r2, #8
 8002e70:	2000      	movs	r0, #0
 8002e72:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002e76:	6865      	ldr	r5, [r4, #4]
 8002e78:	60a5      	str	r5, [r4, #8]
 8002e7a:	2d00      	cmp	r5, #0
 8002e7c:	f2c0 809c 	blt.w	8002fb8 <_printf_i+0x228>
 8002e80:	6820      	ldr	r0, [r4, #0]
 8002e82:	f020 0004 	bic.w	r0, r0, #4
 8002e86:	6020      	str	r0, [r4, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d13f      	bne.n	8002f0c <_printf_i+0x17c>
 8002e8c:	2d00      	cmp	r5, #0
 8002e8e:	f040 8095 	bne.w	8002fbc <_printf_i+0x22c>
 8002e92:	4675      	mov	r5, lr
 8002e94:	2a08      	cmp	r2, #8
 8002e96:	d10b      	bne.n	8002eb0 <_printf_i+0x120>
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	07da      	lsls	r2, r3, #31
 8002e9c:	d508      	bpl.n	8002eb0 <_printf_i+0x120>
 8002e9e:	6923      	ldr	r3, [r4, #16]
 8002ea0:	6862      	ldr	r2, [r4, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	bfde      	ittt	le
 8002ea6:	2330      	movle	r3, #48	; 0x30
 8002ea8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002eac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002eb0:	ebae 0305 	sub.w	r3, lr, r5
 8002eb4:	6123      	str	r3, [r4, #16]
 8002eb6:	f8cd 8000 	str.w	r8, [sp]
 8002eba:	463b      	mov	r3, r7
 8002ebc:	aa03      	add	r2, sp, #12
 8002ebe:	4621      	mov	r1, r4
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	f7ff feef 	bl	8002ca4 <_printf_common>
 8002ec6:	3001      	adds	r0, #1
 8002ec8:	d155      	bne.n	8002f76 <_printf_i+0x1e6>
 8002eca:	f04f 30ff 	mov.w	r0, #4294967295
 8002ece:	b005      	add	sp, #20
 8002ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ed4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002ed8:	493c      	ldr	r1, [pc, #240]	; (8002fcc <_printf_i+0x23c>)
 8002eda:	6822      	ldr	r2, [r4, #0]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002ee2:	f100 0504 	add.w	r5, r0, #4
 8002ee6:	601d      	str	r5, [r3, #0]
 8002ee8:	d001      	beq.n	8002eee <_printf_i+0x15e>
 8002eea:	6803      	ldr	r3, [r0, #0]
 8002eec:	e002      	b.n	8002ef4 <_printf_i+0x164>
 8002eee:	0655      	lsls	r5, r2, #25
 8002ef0:	d5fb      	bpl.n	8002eea <_printf_i+0x15a>
 8002ef2:	8803      	ldrh	r3, [r0, #0]
 8002ef4:	07d0      	lsls	r0, r2, #31
 8002ef6:	bf44      	itt	mi
 8002ef8:	f042 0220 	orrmi.w	r2, r2, #32
 8002efc:	6022      	strmi	r2, [r4, #0]
 8002efe:	b91b      	cbnz	r3, 8002f08 <_printf_i+0x178>
 8002f00:	6822      	ldr	r2, [r4, #0]
 8002f02:	f022 0220 	bic.w	r2, r2, #32
 8002f06:	6022      	str	r2, [r4, #0]
 8002f08:	2210      	movs	r2, #16
 8002f0a:	e7b1      	b.n	8002e70 <_printf_i+0xe0>
 8002f0c:	4675      	mov	r5, lr
 8002f0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8002f12:	fb02 3310 	mls	r3, r2, r0, r3
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2800      	cmp	r0, #0
 8002f20:	d1f5      	bne.n	8002f0e <_printf_i+0x17e>
 8002f22:	e7b7      	b.n	8002e94 <_printf_i+0x104>
 8002f24:	6808      	ldr	r0, [r1, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	6949      	ldr	r1, [r1, #20]
 8002f2a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002f2e:	d004      	beq.n	8002f3a <_printf_i+0x1aa>
 8002f30:	1d10      	adds	r0, r2, #4
 8002f32:	6018      	str	r0, [r3, #0]
 8002f34:	6813      	ldr	r3, [r2, #0]
 8002f36:	6019      	str	r1, [r3, #0]
 8002f38:	e007      	b.n	8002f4a <_printf_i+0x1ba>
 8002f3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f3e:	f102 0004 	add.w	r0, r2, #4
 8002f42:	6018      	str	r0, [r3, #0]
 8002f44:	6813      	ldr	r3, [r2, #0]
 8002f46:	d0f6      	beq.n	8002f36 <_printf_i+0x1a6>
 8002f48:	8019      	strh	r1, [r3, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	6123      	str	r3, [r4, #16]
 8002f4e:	4675      	mov	r5, lr
 8002f50:	e7b1      	b.n	8002eb6 <_printf_i+0x126>
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	1d11      	adds	r1, r2, #4
 8002f56:	6019      	str	r1, [r3, #0]
 8002f58:	6815      	ldr	r5, [r2, #0]
 8002f5a:	6862      	ldr	r2, [r4, #4]
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4628      	mov	r0, r5
 8002f60:	f7fd f93e 	bl	80001e0 <memchr>
 8002f64:	b108      	cbz	r0, 8002f6a <_printf_i+0x1da>
 8002f66:	1b40      	subs	r0, r0, r5
 8002f68:	6060      	str	r0, [r4, #4]
 8002f6a:	6863      	ldr	r3, [r4, #4]
 8002f6c:	6123      	str	r3, [r4, #16]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f74:	e79f      	b.n	8002eb6 <_printf_i+0x126>
 8002f76:	6923      	ldr	r3, [r4, #16]
 8002f78:	462a      	mov	r2, r5
 8002f7a:	4639      	mov	r1, r7
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	47c0      	blx	r8
 8002f80:	3001      	adds	r0, #1
 8002f82:	d0a2      	beq.n	8002eca <_printf_i+0x13a>
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	079b      	lsls	r3, r3, #30
 8002f88:	d507      	bpl.n	8002f9a <_printf_i+0x20a>
 8002f8a:	2500      	movs	r5, #0
 8002f8c:	f104 0919 	add.w	r9, r4, #25
 8002f90:	68e3      	ldr	r3, [r4, #12]
 8002f92:	9a03      	ldr	r2, [sp, #12]
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	429d      	cmp	r5, r3
 8002f98:	db05      	blt.n	8002fa6 <_printf_i+0x216>
 8002f9a:	68e0      	ldr	r0, [r4, #12]
 8002f9c:	9b03      	ldr	r3, [sp, #12]
 8002f9e:	4298      	cmp	r0, r3
 8002fa0:	bfb8      	it	lt
 8002fa2:	4618      	movlt	r0, r3
 8002fa4:	e793      	b.n	8002ece <_printf_i+0x13e>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	464a      	mov	r2, r9
 8002faa:	4639      	mov	r1, r7
 8002fac:	4630      	mov	r0, r6
 8002fae:	47c0      	blx	r8
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	d08a      	beq.n	8002eca <_printf_i+0x13a>
 8002fb4:	3501      	adds	r5, #1
 8002fb6:	e7eb      	b.n	8002f90 <_printf_i+0x200>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1a7      	bne.n	8002f0c <_printf_i+0x17c>
 8002fbc:	780b      	ldrb	r3, [r1, #0]
 8002fbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fc6:	e765      	b.n	8002e94 <_printf_i+0x104>
 8002fc8:	080032b4 	.word	0x080032b4
 8002fcc:	080032a3 	.word	0x080032a3

08002fd0 <memcpy>:
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	1e43      	subs	r3, r0, #1
 8002fd4:	440a      	add	r2, r1
 8002fd6:	4291      	cmp	r1, r2
 8002fd8:	d100      	bne.n	8002fdc <memcpy+0xc>
 8002fda:	bd10      	pop	{r4, pc}
 8002fdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fe4:	e7f7      	b.n	8002fd6 <memcpy+0x6>

08002fe6 <memmove>:
 8002fe6:	4288      	cmp	r0, r1
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	eb01 0302 	add.w	r3, r1, r2
 8002fee:	d803      	bhi.n	8002ff8 <memmove+0x12>
 8002ff0:	1e42      	subs	r2, r0, #1
 8002ff2:	4299      	cmp	r1, r3
 8002ff4:	d10c      	bne.n	8003010 <memmove+0x2a>
 8002ff6:	bd10      	pop	{r4, pc}
 8002ff8:	4298      	cmp	r0, r3
 8002ffa:	d2f9      	bcs.n	8002ff0 <memmove+0xa>
 8002ffc:	1881      	adds	r1, r0, r2
 8002ffe:	1ad2      	subs	r2, r2, r3
 8003000:	42d3      	cmn	r3, r2
 8003002:	d100      	bne.n	8003006 <memmove+0x20>
 8003004:	bd10      	pop	{r4, pc}
 8003006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800300a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800300e:	e7f7      	b.n	8003000 <memmove+0x1a>
 8003010:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003014:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003018:	e7eb      	b.n	8002ff2 <memmove+0xc>
	...

0800301c <_free_r>:
 800301c:	b538      	push	{r3, r4, r5, lr}
 800301e:	4605      	mov	r5, r0
 8003020:	2900      	cmp	r1, #0
 8003022:	d045      	beq.n	80030b0 <_free_r+0x94>
 8003024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003028:	1f0c      	subs	r4, r1, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	bfb8      	it	lt
 800302e:	18e4      	addlt	r4, r4, r3
 8003030:	f000 f8d6 	bl	80031e0 <__malloc_lock>
 8003034:	4a1f      	ldr	r2, [pc, #124]	; (80030b4 <_free_r+0x98>)
 8003036:	6813      	ldr	r3, [r2, #0]
 8003038:	4610      	mov	r0, r2
 800303a:	b933      	cbnz	r3, 800304a <_free_r+0x2e>
 800303c:	6063      	str	r3, [r4, #4]
 800303e:	6014      	str	r4, [r2, #0]
 8003040:	4628      	mov	r0, r5
 8003042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003046:	f000 b8cc 	b.w	80031e2 <__malloc_unlock>
 800304a:	42a3      	cmp	r3, r4
 800304c:	d90c      	bls.n	8003068 <_free_r+0x4c>
 800304e:	6821      	ldr	r1, [r4, #0]
 8003050:	1862      	adds	r2, r4, r1
 8003052:	4293      	cmp	r3, r2
 8003054:	bf04      	itt	eq
 8003056:	681a      	ldreq	r2, [r3, #0]
 8003058:	685b      	ldreq	r3, [r3, #4]
 800305a:	6063      	str	r3, [r4, #4]
 800305c:	bf04      	itt	eq
 800305e:	1852      	addeq	r2, r2, r1
 8003060:	6022      	streq	r2, [r4, #0]
 8003062:	6004      	str	r4, [r0, #0]
 8003064:	e7ec      	b.n	8003040 <_free_r+0x24>
 8003066:	4613      	mov	r3, r2
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	b10a      	cbz	r2, 8003070 <_free_r+0x54>
 800306c:	42a2      	cmp	r2, r4
 800306e:	d9fa      	bls.n	8003066 <_free_r+0x4a>
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	1858      	adds	r0, r3, r1
 8003074:	42a0      	cmp	r0, r4
 8003076:	d10b      	bne.n	8003090 <_free_r+0x74>
 8003078:	6820      	ldr	r0, [r4, #0]
 800307a:	4401      	add	r1, r0
 800307c:	1858      	adds	r0, r3, r1
 800307e:	4282      	cmp	r2, r0
 8003080:	6019      	str	r1, [r3, #0]
 8003082:	d1dd      	bne.n	8003040 <_free_r+0x24>
 8003084:	6810      	ldr	r0, [r2, #0]
 8003086:	6852      	ldr	r2, [r2, #4]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	4401      	add	r1, r0
 800308c:	6019      	str	r1, [r3, #0]
 800308e:	e7d7      	b.n	8003040 <_free_r+0x24>
 8003090:	d902      	bls.n	8003098 <_free_r+0x7c>
 8003092:	230c      	movs	r3, #12
 8003094:	602b      	str	r3, [r5, #0]
 8003096:	e7d3      	b.n	8003040 <_free_r+0x24>
 8003098:	6820      	ldr	r0, [r4, #0]
 800309a:	1821      	adds	r1, r4, r0
 800309c:	428a      	cmp	r2, r1
 800309e:	bf04      	itt	eq
 80030a0:	6811      	ldreq	r1, [r2, #0]
 80030a2:	6852      	ldreq	r2, [r2, #4]
 80030a4:	6062      	str	r2, [r4, #4]
 80030a6:	bf04      	itt	eq
 80030a8:	1809      	addeq	r1, r1, r0
 80030aa:	6021      	streq	r1, [r4, #0]
 80030ac:	605c      	str	r4, [r3, #4]
 80030ae:	e7c7      	b.n	8003040 <_free_r+0x24>
 80030b0:	bd38      	pop	{r3, r4, r5, pc}
 80030b2:	bf00      	nop
 80030b4:	2000008c 	.word	0x2000008c

080030b8 <_malloc_r>:
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	1ccd      	adds	r5, r1, #3
 80030bc:	f025 0503 	bic.w	r5, r5, #3
 80030c0:	3508      	adds	r5, #8
 80030c2:	2d0c      	cmp	r5, #12
 80030c4:	bf38      	it	cc
 80030c6:	250c      	movcc	r5, #12
 80030c8:	2d00      	cmp	r5, #0
 80030ca:	4606      	mov	r6, r0
 80030cc:	db01      	blt.n	80030d2 <_malloc_r+0x1a>
 80030ce:	42a9      	cmp	r1, r5
 80030d0:	d903      	bls.n	80030da <_malloc_r+0x22>
 80030d2:	230c      	movs	r3, #12
 80030d4:	6033      	str	r3, [r6, #0]
 80030d6:	2000      	movs	r0, #0
 80030d8:	bd70      	pop	{r4, r5, r6, pc}
 80030da:	f000 f881 	bl	80031e0 <__malloc_lock>
 80030de:	4a23      	ldr	r2, [pc, #140]	; (800316c <_malloc_r+0xb4>)
 80030e0:	6814      	ldr	r4, [r2, #0]
 80030e2:	4621      	mov	r1, r4
 80030e4:	b991      	cbnz	r1, 800310c <_malloc_r+0x54>
 80030e6:	4c22      	ldr	r4, [pc, #136]	; (8003170 <_malloc_r+0xb8>)
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	b91b      	cbnz	r3, 80030f4 <_malloc_r+0x3c>
 80030ec:	4630      	mov	r0, r6
 80030ee:	f000 f867 	bl	80031c0 <_sbrk_r>
 80030f2:	6020      	str	r0, [r4, #0]
 80030f4:	4629      	mov	r1, r5
 80030f6:	4630      	mov	r0, r6
 80030f8:	f000 f862 	bl	80031c0 <_sbrk_r>
 80030fc:	1c43      	adds	r3, r0, #1
 80030fe:	d126      	bne.n	800314e <_malloc_r+0x96>
 8003100:	230c      	movs	r3, #12
 8003102:	6033      	str	r3, [r6, #0]
 8003104:	4630      	mov	r0, r6
 8003106:	f000 f86c 	bl	80031e2 <__malloc_unlock>
 800310a:	e7e4      	b.n	80030d6 <_malloc_r+0x1e>
 800310c:	680b      	ldr	r3, [r1, #0]
 800310e:	1b5b      	subs	r3, r3, r5
 8003110:	d41a      	bmi.n	8003148 <_malloc_r+0x90>
 8003112:	2b0b      	cmp	r3, #11
 8003114:	d90f      	bls.n	8003136 <_malloc_r+0x7e>
 8003116:	600b      	str	r3, [r1, #0]
 8003118:	50cd      	str	r5, [r1, r3]
 800311a:	18cc      	adds	r4, r1, r3
 800311c:	4630      	mov	r0, r6
 800311e:	f000 f860 	bl	80031e2 <__malloc_unlock>
 8003122:	f104 000b 	add.w	r0, r4, #11
 8003126:	1d23      	adds	r3, r4, #4
 8003128:	f020 0007 	bic.w	r0, r0, #7
 800312c:	1ac3      	subs	r3, r0, r3
 800312e:	d01b      	beq.n	8003168 <_malloc_r+0xb0>
 8003130:	425a      	negs	r2, r3
 8003132:	50e2      	str	r2, [r4, r3]
 8003134:	bd70      	pop	{r4, r5, r6, pc}
 8003136:	428c      	cmp	r4, r1
 8003138:	bf0d      	iteet	eq
 800313a:	6863      	ldreq	r3, [r4, #4]
 800313c:	684b      	ldrne	r3, [r1, #4]
 800313e:	6063      	strne	r3, [r4, #4]
 8003140:	6013      	streq	r3, [r2, #0]
 8003142:	bf18      	it	ne
 8003144:	460c      	movne	r4, r1
 8003146:	e7e9      	b.n	800311c <_malloc_r+0x64>
 8003148:	460c      	mov	r4, r1
 800314a:	6849      	ldr	r1, [r1, #4]
 800314c:	e7ca      	b.n	80030e4 <_malloc_r+0x2c>
 800314e:	1cc4      	adds	r4, r0, #3
 8003150:	f024 0403 	bic.w	r4, r4, #3
 8003154:	42a0      	cmp	r0, r4
 8003156:	d005      	beq.n	8003164 <_malloc_r+0xac>
 8003158:	1a21      	subs	r1, r4, r0
 800315a:	4630      	mov	r0, r6
 800315c:	f000 f830 	bl	80031c0 <_sbrk_r>
 8003160:	3001      	adds	r0, #1
 8003162:	d0cd      	beq.n	8003100 <_malloc_r+0x48>
 8003164:	6025      	str	r5, [r4, #0]
 8003166:	e7d9      	b.n	800311c <_malloc_r+0x64>
 8003168:	bd70      	pop	{r4, r5, r6, pc}
 800316a:	bf00      	nop
 800316c:	2000008c 	.word	0x2000008c
 8003170:	20000090 	.word	0x20000090

08003174 <_realloc_r>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	4607      	mov	r7, r0
 8003178:	4614      	mov	r4, r2
 800317a:	460e      	mov	r6, r1
 800317c:	b921      	cbnz	r1, 8003188 <_realloc_r+0x14>
 800317e:	4611      	mov	r1, r2
 8003180:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003184:	f7ff bf98 	b.w	80030b8 <_malloc_r>
 8003188:	b922      	cbnz	r2, 8003194 <_realloc_r+0x20>
 800318a:	f7ff ff47 	bl	800301c <_free_r>
 800318e:	4625      	mov	r5, r4
 8003190:	4628      	mov	r0, r5
 8003192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003194:	f000 f826 	bl	80031e4 <_malloc_usable_size_r>
 8003198:	4284      	cmp	r4, r0
 800319a:	d90f      	bls.n	80031bc <_realloc_r+0x48>
 800319c:	4621      	mov	r1, r4
 800319e:	4638      	mov	r0, r7
 80031a0:	f7ff ff8a 	bl	80030b8 <_malloc_r>
 80031a4:	4605      	mov	r5, r0
 80031a6:	2800      	cmp	r0, #0
 80031a8:	d0f2      	beq.n	8003190 <_realloc_r+0x1c>
 80031aa:	4631      	mov	r1, r6
 80031ac:	4622      	mov	r2, r4
 80031ae:	f7ff ff0f 	bl	8002fd0 <memcpy>
 80031b2:	4631      	mov	r1, r6
 80031b4:	4638      	mov	r0, r7
 80031b6:	f7ff ff31 	bl	800301c <_free_r>
 80031ba:	e7e9      	b.n	8003190 <_realloc_r+0x1c>
 80031bc:	4635      	mov	r5, r6
 80031be:	e7e7      	b.n	8003190 <_realloc_r+0x1c>

080031c0 <_sbrk_r>:
 80031c0:	b538      	push	{r3, r4, r5, lr}
 80031c2:	4c06      	ldr	r4, [pc, #24]	; (80031dc <_sbrk_r+0x1c>)
 80031c4:	2300      	movs	r3, #0
 80031c6:	4605      	mov	r5, r0
 80031c8:	4608      	mov	r0, r1
 80031ca:	6023      	str	r3, [r4, #0]
 80031cc:	f000 f814 	bl	80031f8 <_sbrk>
 80031d0:	1c43      	adds	r3, r0, #1
 80031d2:	d102      	bne.n	80031da <_sbrk_r+0x1a>
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	b103      	cbz	r3, 80031da <_sbrk_r+0x1a>
 80031d8:	602b      	str	r3, [r5, #0]
 80031da:	bd38      	pop	{r3, r4, r5, pc}
 80031dc:	2000018c 	.word	0x2000018c

080031e0 <__malloc_lock>:
 80031e0:	4770      	bx	lr

080031e2 <__malloc_unlock>:
 80031e2:	4770      	bx	lr

080031e4 <_malloc_usable_size_r>:
 80031e4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80031e8:	2800      	cmp	r0, #0
 80031ea:	f1a0 0004 	sub.w	r0, r0, #4
 80031ee:	bfbc      	itt	lt
 80031f0:	580b      	ldrlt	r3, [r1, r0]
 80031f2:	18c0      	addlt	r0, r0, r3
 80031f4:	4770      	bx	lr
	...

080031f8 <_sbrk>:
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <_sbrk+0x14>)
 80031fa:	6819      	ldr	r1, [r3, #0]
 80031fc:	4602      	mov	r2, r0
 80031fe:	b909      	cbnz	r1, 8003204 <_sbrk+0xc>
 8003200:	4903      	ldr	r1, [pc, #12]	; (8003210 <_sbrk+0x18>)
 8003202:	6019      	str	r1, [r3, #0]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	4402      	add	r2, r0
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	4770      	bx	lr
 800320c:	20000094 	.word	0x20000094
 8003210:	20000190 	.word	0x20000190

08003214 <_init>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	bf00      	nop
 8003218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	469e      	mov	lr, r3
 800321e:	4770      	bx	lr

08003220 <_fini>:
 8003220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003222:	bf00      	nop
 8003224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003226:	bc08      	pop	{r3}
 8003228:	469e      	mov	lr, r3
 800322a:	4770      	bx	lr
